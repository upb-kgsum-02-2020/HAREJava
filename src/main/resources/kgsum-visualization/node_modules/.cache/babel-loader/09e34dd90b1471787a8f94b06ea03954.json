{"ast":null,"code":"import { EventDispatcher, Matrix4, Plane, Raycaster, Vector2, Vector3 } from 'three';\n\nconst _plane = new Plane();\n\nconst _raycaster = new Raycaster();\n\nconst _mouse = new Vector2();\n\nconst _offset = new Vector3();\n\nconst _intersection = new Vector3();\n\nconst _worldPosition = new Vector3();\n\nconst _inverseMatrix = new Matrix4();\n\nclass DragControls extends EventDispatcher {\n  constructor(_objects, _camera, _domElement) {\n    super();\n    let _selected = null,\n        _hovered = null;\n    const _intersections = []; //\n\n    const scope = this;\n\n    function activate() {\n      _domElement.addEventListener('pointermove', onPointerMove);\n\n      _domElement.addEventListener('pointerdown', onPointerDown);\n\n      _domElement.addEventListener('pointerup', onPointerCancel);\n\n      _domElement.addEventListener('pointerleave', onPointerCancel);\n\n      _domElement.addEventListener('touchmove', onTouchMove, {\n        passive: false\n      });\n\n      _domElement.addEventListener('touchstart', onTouchStart, {\n        passive: false\n      });\n\n      _domElement.addEventListener('touchend', onTouchEnd);\n    }\n\n    function deactivate() {\n      _domElement.removeEventListener('pointermove', onPointerMove);\n\n      _domElement.removeEventListener('pointerdown', onPointerDown);\n\n      _domElement.removeEventListener('pointerup', onPointerCancel);\n\n      _domElement.removeEventListener('pointerleave', onPointerCancel);\n\n      _domElement.removeEventListener('touchmove', onTouchMove);\n\n      _domElement.removeEventListener('touchstart', onTouchStart);\n\n      _domElement.removeEventListener('touchend', onTouchEnd);\n\n      _domElement.style.cursor = '';\n    }\n\n    function dispose() {\n      deactivate();\n    }\n\n    function getObjects() {\n      return _objects;\n    }\n\n    function onPointerMove(event) {\n      event.preventDefault();\n\n      switch (event.pointerType) {\n        case 'mouse':\n        case 'pen':\n          onMouseMove(event);\n          break;\n        // TODO touch\n      }\n    }\n\n    function onMouseMove(event) {\n      const rect = _domElement.getBoundingClientRect();\n\n      _mouse.x = (event.clientX - rect.left) / rect.width * 2 - 1;\n      _mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;\n\n      _raycaster.setFromCamera(_mouse, _camera);\n\n      if (_selected && scope.enabled) {\n        if (_raycaster.ray.intersectPlane(_plane, _intersection)) {\n          _selected.position.copy(_intersection.sub(_offset).applyMatrix4(_inverseMatrix));\n        }\n\n        scope.dispatchEvent({\n          type: 'drag',\n          object: _selected\n        });\n        return;\n      }\n\n      _intersections.length = 0;\n\n      _raycaster.setFromCamera(_mouse, _camera);\n\n      _raycaster.intersectObjects(_objects, true, _intersections);\n\n      if (_intersections.length > 0) {\n        const object = _intersections[0].object;\n\n        _plane.setFromNormalAndCoplanarPoint(_camera.getWorldDirection(_plane.normal), _worldPosition.setFromMatrixPosition(object.matrixWorld));\n\n        if (_hovered !== object && _hovered !== null) {\n          scope.dispatchEvent({\n            type: 'hoveroff',\n            object: _hovered\n          });\n          _domElement.style.cursor = 'auto';\n          _hovered = null;\n        }\n\n        if (_hovered !== object) {\n          scope.dispatchEvent({\n            type: 'hoveron',\n            object: object\n          });\n          _domElement.style.cursor = 'pointer';\n          _hovered = object;\n        }\n      } else {\n        if (_hovered !== null) {\n          scope.dispatchEvent({\n            type: 'hoveroff',\n            object: _hovered\n          });\n          _domElement.style.cursor = 'auto';\n          _hovered = null;\n        }\n      }\n    }\n\n    function onPointerDown(event) {\n      event.preventDefault();\n\n      switch (event.pointerType) {\n        case 'mouse':\n        case 'pen':\n          onMouseDown(event);\n          break;\n        // TODO touch\n      }\n    }\n\n    function onMouseDown(event) {\n      event.preventDefault();\n      _intersections.length = 0;\n\n      _raycaster.setFromCamera(_mouse, _camera);\n\n      _raycaster.intersectObjects(_objects, true, _intersections);\n\n      if (_intersections.length > 0) {\n        _selected = scope.transformGroup === true ? _objects[0] : _intersections[0].object;\n\n        if (_raycaster.ray.intersectPlane(_plane, _intersection)) {\n          _inverseMatrix.copy(_selected.parent.matrixWorld).invert();\n\n          _offset.copy(_intersection).sub(_worldPosition.setFromMatrixPosition(_selected.matrixWorld));\n        }\n\n        _domElement.style.cursor = 'move';\n        scope.dispatchEvent({\n          type: 'dragstart',\n          object: _selected\n        });\n      }\n    }\n\n    function onPointerCancel(event) {\n      event.preventDefault();\n\n      switch (event.pointerType) {\n        case 'mouse':\n        case 'pen':\n          onMouseCancel(event);\n          break;\n        // TODO touch\n      }\n    }\n\n    function onMouseCancel(event) {\n      event.preventDefault();\n\n      if (_selected) {\n        scope.dispatchEvent({\n          type: 'dragend',\n          object: _selected\n        });\n        _selected = null;\n      }\n\n      _domElement.style.cursor = _hovered ? 'pointer' : 'auto';\n    }\n\n    function onTouchMove(event) {\n      event.preventDefault();\n      event = event.changedTouches[0];\n\n      const rect = _domElement.getBoundingClientRect();\n\n      _mouse.x = (event.clientX - rect.left) / rect.width * 2 - 1;\n      _mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;\n\n      _raycaster.setFromCamera(_mouse, _camera);\n\n      if (_selected && scope.enabled) {\n        if (_raycaster.ray.intersectPlane(_plane, _intersection)) {\n          _selected.position.copy(_intersection.sub(_offset).applyMatrix4(_inverseMatrix));\n        }\n\n        scope.dispatchEvent({\n          type: 'drag',\n          object: _selected\n        });\n        return;\n      }\n    }\n\n    function onTouchStart(event) {\n      event.preventDefault();\n      event = event.changedTouches[0];\n\n      const rect = _domElement.getBoundingClientRect();\n\n      _mouse.x = (event.clientX - rect.left) / rect.width * 2 - 1;\n      _mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;\n      _intersections.length = 0;\n\n      _raycaster.setFromCamera(_mouse, _camera);\n\n      _raycaster.intersectObjects(_objects, true, _intersections);\n\n      if (_intersections.length > 0) {\n        _selected = scope.transformGroup === true ? _objects[0] : _intersections[0].object;\n\n        _plane.setFromNormalAndCoplanarPoint(_camera.getWorldDirection(_plane.normal), _worldPosition.setFromMatrixPosition(_selected.matrixWorld));\n\n        if (_raycaster.ray.intersectPlane(_plane, _intersection)) {\n          _inverseMatrix.copy(_selected.parent.matrixWorld).invert();\n\n          _offset.copy(_intersection).sub(_worldPosition.setFromMatrixPosition(_selected.matrixWorld));\n        }\n\n        _domElement.style.cursor = 'move';\n        scope.dispatchEvent({\n          type: 'dragstart',\n          object: _selected\n        });\n      }\n    }\n\n    function onTouchEnd(event) {\n      event.preventDefault();\n\n      if (_selected) {\n        scope.dispatchEvent({\n          type: 'dragend',\n          object: _selected\n        });\n        _selected = null;\n      }\n\n      _domElement.style.cursor = 'auto';\n    }\n\n    activate(); // API\n\n    this.enabled = true;\n    this.transformGroup = false;\n    this.activate = activate;\n    this.deactivate = deactivate;\n    this.dispose = dispose;\n    this.getObjects = getObjects;\n  }\n\n}\n\nexport { DragControls };","map":{"version":3,"sources":["E:/Universitat Paderborn/NEW/kgsum/kgsum/kgsum/src/main/resources/kgsum-visualization/node_modules/3d-force-graph/node_modules/three/examples/jsm/controls/DragControls.js"],"names":["EventDispatcher","Matrix4","Plane","Raycaster","Vector2","Vector3","_plane","_raycaster","_mouse","_offset","_intersection","_worldPosition","_inverseMatrix","DragControls","constructor","_objects","_camera","_domElement","_selected","_hovered","_intersections","scope","activate","addEventListener","onPointerMove","onPointerDown","onPointerCancel","onTouchMove","passive","onTouchStart","onTouchEnd","deactivate","removeEventListener","style","cursor","dispose","getObjects","event","preventDefault","pointerType","onMouseMove","rect","getBoundingClientRect","x","clientX","left","width","y","clientY","top","height","setFromCamera","enabled","ray","intersectPlane","position","copy","sub","applyMatrix4","dispatchEvent","type","object","length","intersectObjects","setFromNormalAndCoplanarPoint","getWorldDirection","normal","setFromMatrixPosition","matrixWorld","onMouseDown","transformGroup","parent","invert","onMouseCancel","changedTouches"],"mappings":"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","sourcesContent":["import {\n\tEventDispatcher,\n\tMatrix4,\n\tPlane,\n\tRaycaster,\n\tVector2,\n\tVector3\n} from 'three';\n\nconst _plane = new Plane();\nconst _raycaster = new Raycaster();\n\nconst _mouse = new Vector2();\nconst _offset = new Vector3();\nconst _intersection = new Vector3();\nconst _worldPosition = new Vector3();\nconst _inverseMatrix = new Matrix4();\n\nclass DragControls extends EventDispatcher {\n\n\tconstructor( _objects, _camera, _domElement ) {\n\n\t\tsuper();\n\n\t\tlet _selected = null, _hovered = null;\n\n\t\tconst _intersections = [];\n\n\t\t//\n\n\t\tconst scope = this;\n\n\t\tfunction activate() {\n\n\t\t\t_domElement.addEventListener( 'pointermove', onPointerMove );\n\t\t\t_domElement.addEventListener( 'pointerdown', onPointerDown );\n\t\t\t_domElement.addEventListener( 'pointerup', onPointerCancel );\n\t\t\t_domElement.addEventListener( 'pointerleave', onPointerCancel );\n\t\t\t_domElement.addEventListener( 'touchmove', onTouchMove, { passive: false } );\n\t\t\t_domElement.addEventListener( 'touchstart', onTouchStart, { passive: false } );\n\t\t\t_domElement.addEventListener( 'touchend', onTouchEnd );\n\n\t\t}\n\n\t\tfunction deactivate() {\n\n\t\t\t_domElement.removeEventListener( 'pointermove', onPointerMove );\n\t\t\t_domElement.removeEventListener( 'pointerdown', onPointerDown );\n\t\t\t_domElement.removeEventListener( 'pointerup', onPointerCancel );\n\t\t\t_domElement.removeEventListener( 'pointerleave', onPointerCancel );\n\t\t\t_domElement.removeEventListener( 'touchmove', onTouchMove );\n\t\t\t_domElement.removeEventListener( 'touchstart', onTouchStart );\n\t\t\t_domElement.removeEventListener( 'touchend', onTouchEnd );\n\n\t\t\t_domElement.style.cursor = '';\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\tdeactivate();\n\n\t\t}\n\n\t\tfunction getObjects() {\n\n\t\t\treturn _objects;\n\n\t\t}\n\n\t\tfunction onPointerMove( event ) {\n\n\t\t\tevent.preventDefault();\n\n\t\t\tswitch ( event.pointerType ) {\n\n\t\t\t\tcase 'mouse':\n\t\t\t\tcase 'pen':\n\t\t\t\t\tonMouseMove( event );\n\t\t\t\t\tbreak;\n\n\t\t\t\t// TODO touch\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onMouseMove( event ) {\n\n\t\t\tconst rect = _domElement.getBoundingClientRect();\n\n\t\t\t_mouse.x = ( ( event.clientX - rect.left ) / rect.width ) * 2 - 1;\n\t\t\t_mouse.y = - ( ( event.clientY - rect.top ) / rect.height ) * 2 + 1;\n\n\t\t\t_raycaster.setFromCamera( _mouse, _camera );\n\n\t\t\tif ( _selected && scope.enabled ) {\n\n\t\t\t\tif ( _raycaster.ray.intersectPlane( _plane, _intersection ) ) {\n\n\t\t\t\t\t_selected.position.copy( _intersection.sub( _offset ).applyMatrix4( _inverseMatrix ) );\n\n\t\t\t\t}\n\n\t\t\t\tscope.dispatchEvent( { type: 'drag', object: _selected } );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t_intersections.length = 0;\n\n\t\t\t_raycaster.setFromCamera( _mouse, _camera );\n\t\t\t_raycaster.intersectObjects( _objects, true, _intersections );\n\n\t\t\tif ( _intersections.length > 0 ) {\n\n\t\t\t\tconst object = _intersections[ 0 ].object;\n\n\t\t\t\t_plane.setFromNormalAndCoplanarPoint( _camera.getWorldDirection( _plane.normal ), _worldPosition.setFromMatrixPosition( object.matrixWorld ) );\n\n\t\t\t\tif ( _hovered !== object && _hovered !== null ) {\n\n\t\t\t\t\tscope.dispatchEvent( { type: 'hoveroff', object: _hovered } );\n\n\t\t\t\t\t_domElement.style.cursor = 'auto';\n\t\t\t\t\t_hovered = null;\n\n\t\t\t\t}\n\n\t\t\t\tif ( _hovered !== object ) {\n\n\t\t\t\t\tscope.dispatchEvent( { type: 'hoveron', object: object } );\n\n\t\t\t\t\t_domElement.style.cursor = 'pointer';\n\t\t\t\t\t_hovered = object;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( _hovered !== null ) {\n\n\t\t\t\t\tscope.dispatchEvent( { type: 'hoveroff', object: _hovered } );\n\n\t\t\t\t\t_domElement.style.cursor = 'auto';\n\t\t\t\t\t_hovered = null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onPointerDown( event ) {\n\n\t\t\tevent.preventDefault();\n\n\t\t\tswitch ( event.pointerType ) {\n\n\t\t\t\tcase 'mouse':\n\t\t\t\tcase 'pen':\n\t\t\t\t\tonMouseDown( event );\n\t\t\t\t\tbreak;\n\n\t\t\t\t// TODO touch\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onMouseDown( event ) {\n\n\t\t\tevent.preventDefault();\n\n\t\t\t_intersections.length = 0;\n\n\t\t\t_raycaster.setFromCamera( _mouse, _camera );\n\t\t\t_raycaster.intersectObjects( _objects, true, _intersections );\n\n\t\t\tif ( _intersections.length > 0 ) {\n\n\t\t\t\t_selected = ( scope.transformGroup === true ) ? _objects[ 0 ] : _intersections[ 0 ].object;\n\n\t\t\t\tif ( _raycaster.ray.intersectPlane( _plane, _intersection ) ) {\n\n\t\t\t\t\t_inverseMatrix.copy( _selected.parent.matrixWorld ).invert();\n\t\t\t\t\t_offset.copy( _intersection ).sub( _worldPosition.setFromMatrixPosition( _selected.matrixWorld ) );\n\n\t\t\t\t}\n\n\t\t\t\t_domElement.style.cursor = 'move';\n\n\t\t\t\tscope.dispatchEvent( { type: 'dragstart', object: _selected } );\n\n\t\t\t}\n\n\n\t\t}\n\n\t\tfunction onPointerCancel( event ) {\n\n\t\t\tevent.preventDefault();\n\n\t\t\tswitch ( event.pointerType ) {\n\n\t\t\t\tcase 'mouse':\n\t\t\t\tcase 'pen':\n\t\t\t\t\tonMouseCancel( event );\n\t\t\t\t\tbreak;\n\n\t\t\t\t// TODO touch\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onMouseCancel( event ) {\n\n\t\t\tevent.preventDefault();\n\n\t\t\tif ( _selected ) {\n\n\t\t\t\tscope.dispatchEvent( { type: 'dragend', object: _selected } );\n\n\t\t\t\t_selected = null;\n\n\t\t\t}\n\n\t\t\t_domElement.style.cursor = _hovered ? 'pointer' : 'auto';\n\n\t\t}\n\n\t\tfunction onTouchMove( event ) {\n\n\t\t\tevent.preventDefault();\n\t\t\tevent = event.changedTouches[ 0 ];\n\n\t\t\tconst rect = _domElement.getBoundingClientRect();\n\n\t\t\t_mouse.x = ( ( event.clientX - rect.left ) / rect.width ) * 2 - 1;\n\t\t\t_mouse.y = - ( ( event.clientY - rect.top ) / rect.height ) * 2 + 1;\n\n\t\t\t_raycaster.setFromCamera( _mouse, _camera );\n\n\t\t\tif ( _selected && scope.enabled ) {\n\n\t\t\t\tif ( _raycaster.ray.intersectPlane( _plane, _intersection ) ) {\n\n\t\t\t\t\t_selected.position.copy( _intersection.sub( _offset ).applyMatrix4( _inverseMatrix ) );\n\n\t\t\t\t}\n\n\t\t\t\tscope.dispatchEvent( { type: 'drag', object: _selected } );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onTouchStart( event ) {\n\n\t\t\tevent.preventDefault();\n\t\t\tevent = event.changedTouches[ 0 ];\n\n\t\t\tconst rect = _domElement.getBoundingClientRect();\n\n\t\t\t_mouse.x = ( ( event.clientX - rect.left ) / rect.width ) * 2 - 1;\n\t\t\t_mouse.y = - ( ( event.clientY - rect.top ) / rect.height ) * 2 + 1;\n\n\t\t\t_intersections.length = 0;\n\n\t\t\t_raycaster.setFromCamera( _mouse, _camera );\n\t\t\t _raycaster.intersectObjects( _objects, true, _intersections );\n\n\t\t\tif ( _intersections.length > 0 ) {\n\n\t\t\t\t_selected = ( scope.transformGroup === true ) ? _objects[ 0 ] : _intersections[ 0 ].object;\n\n\t\t\t\t_plane.setFromNormalAndCoplanarPoint( _camera.getWorldDirection( _plane.normal ), _worldPosition.setFromMatrixPosition( _selected.matrixWorld ) );\n\n\t\t\t\tif ( _raycaster.ray.intersectPlane( _plane, _intersection ) ) {\n\n\t\t\t\t\t_inverseMatrix.copy( _selected.parent.matrixWorld ).invert();\n\t\t\t\t\t_offset.copy( _intersection ).sub( _worldPosition.setFromMatrixPosition( _selected.matrixWorld ) );\n\n\t\t\t\t}\n\n\t\t\t\t_domElement.style.cursor = 'move';\n\n\t\t\t\tscope.dispatchEvent( { type: 'dragstart', object: _selected } );\n\n\t\t\t}\n\n\n\t\t}\n\n\t\tfunction onTouchEnd( event ) {\n\n\t\t\tevent.preventDefault();\n\n\t\t\tif ( _selected ) {\n\n\t\t\t\tscope.dispatchEvent( { type: 'dragend', object: _selected } );\n\n\t\t\t\t_selected = null;\n\n\t\t\t}\n\n\t\t\t_domElement.style.cursor = 'auto';\n\n\t\t}\n\n\t\tactivate();\n\n\t\t// API\n\n\t\tthis.enabled = true;\n\t\tthis.transformGroup = false;\n\n\t\tthis.activate = activate;\n\t\tthis.deactivate = deactivate;\n\t\tthis.dispose = dispose;\n\t\tthis.getObjects = getObjects;\n\n\t}\n\n}\n\nexport { DragControls };\n"]},"metadata":{},"sourceType":"module"}