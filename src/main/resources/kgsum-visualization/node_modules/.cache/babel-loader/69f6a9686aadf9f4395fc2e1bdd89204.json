{"ast":null,"code":"/**\n * Recursively applies a MeshNormalMaterial to the entity, such that\n * face colors are determined by their orientation. Helpful for\n * debugging geometry\n */\nmodule.exports = AFRAME.registerComponent('normal-material', {\n  init: function () {\n    this.material = new THREE.MeshNormalMaterial({\n      flatShading: true\n    });\n    this.applyMaterial = this.applyMaterial.bind(this);\n    this.el.addEventListener('object3dset', this.applyMaterial);\n  },\n  remove: function () {\n    this.el.removeEventListener('object3dset', this.applyMaterial);\n  },\n  applyMaterial: function () {\n    this.el.object3D.traverse(node => {\n      if (node.isMesh) node.material = this.material;\n    });\n  }\n});","map":{"version":3,"sources":["E:/Universitat Paderborn/NEW/kgsum/kgsum-visualization/node_modules/aframe-extras/src/misc/normal-material.js"],"names":["module","exports","AFRAME","registerComponent","init","material","THREE","MeshNormalMaterial","flatShading","applyMaterial","bind","el","addEventListener","remove","removeEventListener","object3D","traverse","node","isMesh"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,OAAP,GAAiBC,MAAM,CAACC,iBAAP,CAAyB,iBAAzB,EAA4C;AAC3DC,EAAAA,IAAI,EAAE,YAAY;AAChB,SAAKC,QAAL,GAAgB,IAAIC,KAAK,CAACC,kBAAV,CAA6B;AAACC,MAAAA,WAAW,EAAE;AAAd,KAA7B,CAAhB;AACA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKC,EAAL,CAAQC,gBAAR,CAAyB,aAAzB,EAAwC,KAAKH,aAA7C;AACD,GAL0D;AAO3DI,EAAAA,MAAM,EAAE,YAAY;AAClB,SAAKF,EAAL,CAAQG,mBAAR,CAA4B,aAA5B,EAA2C,KAAKL,aAAhD;AACD,GAT0D;AAW3DA,EAAAA,aAAa,EAAE,YAAY;AACzB,SAAKE,EAAL,CAAQI,QAAR,CAAiBC,QAAjB,CAA2BC,IAAD,IAAU;AAClC,UAAIA,IAAI,CAACC,MAAT,EAAiBD,IAAI,CAACZ,QAAL,GAAgB,KAAKA,QAArB;AAClB,KAFD;AAGD;AAf0D,CAA5C,CAAjB","sourcesContent":["/**\n * Recursively applies a MeshNormalMaterial to the entity, such that\n * face colors are determined by their orientation. Helpful for\n * debugging geometry\n */\nmodule.exports = AFRAME.registerComponent('normal-material', {\n  init: function () {\n    this.material = new THREE.MeshNormalMaterial({flatShading: true});\n    this.applyMaterial = this.applyMaterial.bind(this);\n    this.el.addEventListener('object3dset', this.applyMaterial);\n  },\n\n  remove: function () {\n    this.el.removeEventListener('object3dset', this.applyMaterial);\n  },\n\n  applyMaterial: function () {\n    this.el.object3D.traverse((node) => {\n      if (node.isMesh) node.material = this.material;\n    });\n  }\n});\n"]},"metadata":{},"sourceType":"script"}