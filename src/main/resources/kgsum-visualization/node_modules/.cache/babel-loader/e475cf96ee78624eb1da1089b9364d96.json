{"ast":null,"code":"var _jsxFileName = \"E:\\\\Universitat Paderborn\\\\NEW\\\\kgsum\\\\kgsum\\\\kgsum\\\\src\\\\main\\\\resources\\\\kgsum-visualization\\\\src\\\\Components\\\\GraphContainer\\\\GraphContainer.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\"; // import results from \"../../kgsum_result.json\";\n\nimport { ForceGraph2D } from \"react-force-graph\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass GraphContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      dataParsed: false,\n      nodeIds: [],\n      nodes: [],\n      links: [],\n      typeProps: {\n        Album: [\"artist\", \"producer\", \"track\", \"name\", \"date\", \"description\"],\n        Song: [\"writer\", \"name\", \"description\"],\n        Songwriter: [\"member\", \"name\", \"description\"],\n        SoloArtist: [\"name\", \"description\"],\n        Producer: [\"name\", \"description\"],\n        Band: [\"member\", \"name\", \"description\"]\n      }\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextState.dataParsed !== this.state.dataParsed) return true;\n  }\n\n  generateGraph(data) {}\n\n  componentDidMount() {\n    console.log(\"GraphContainer\", \"componentDidMount\");\n\n    const getData = () => {\n      fetch(\"srckgsum_result.json\", {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        }\n      }).then(function (response) {\n        console.log(\"GraphContainer json\", response.json()); // return response.json();\n      }).then(function (myJson) {\n        console.log(myJson);\n      });\n    };\n\n    if (this.props.fileLoaded) {\n      axios.get(\"kgsum_result.json\").then(res => {\n        res.data[\"@graph\"].forEach((element, index) => {\n          if (index > 2) {\n            this.setState({\n              dataParsed: true\n            });\n          } else {\n            if (typeof element[\"@type\"] === \"string\") {\n              this.handleNode(element, element[\"@type\"], index);\n            } else if (typeof element[\"@type\"] === \"object\") {\n              element[\"@type\"].forEach(elementType => {\n                this.handleNode(element, elementType, index);\n              });\n            } else {// undefined\n              // console.log(typeof element[\"@type\"], element);\n            }\n          }\n        });\n      }).catch(err => console.log(\"JSON ERROR\", err)); // getData();\n    }\n  }\n\n  arrayAdd(array, element) {\n    const newArray = array.slice();\n    newArray.push(element);\n    return newArray;\n  }\n\n  handleObject(elemId, object, objectType, group) {\n    this.setState(prevState => {\n      if (!prevState.nodeIds.includes(object)) {\n        const uriParts = object.split(\"/\");\n        return {\n          nodeIds: this.arrayAdd(prevState.nodeIds, object),\n          nodes: this.arrayAdd(prevState.nodes, {\n            id: object,\n            name: decodeURIComponent(uriParts[uriParts.length - 1]),\n            group: group\n          }),\n          links: this.arrayAdd(prevState.links, {\n            source: elemId,\n            target: object,\n            name: objectType // value: group,\n\n          })\n        };\n      } else {\n        return {\n          links: this.arrayAdd(prevState.links, {\n            source: elemId,\n            target: object,\n            name: objectType // value: group,\n\n          })\n        };\n      }\n    });\n  }\n\n  handleNode(element, elemType, group) {\n    this.setState(prevState => {\n      if (!prevState.nodeIds.includes(element[\"@id\"])) {\n        let uriParts = element[\"@id\"].split(\"/\");\n        let typeParts = elemType.split(\"/\");\n        const type = typeParts[typeParts.length - 1];\n        this.state.typeProps[type].forEach(prop => {\n          if (prop in element) {\n            if (typeof element[prop] === \"string\") {\n              this.handleObject(element[\"@id\"], element[prop], prop, group);\n            } else if (typeof element[prop] === \"object\") {\n              element[prop].forEach(subProp => {\n                this.handleObject(element[\"@id\"], subProp, prop, group);\n              });\n            }\n          }\n        });\n        return {\n          nodeIds: this.arrayAdd(prevState.nodeIds, element[\"@id\"]),\n          nodes: this.arrayAdd(prevState.nodes, {\n            id: element[\"@id\"],\n            name: decodeURIComponent(uriParts[uriParts.length - 1]),\n            group: group\n          })\n        };\n      }\n    });\n  }\n\n  render() {\n    let graph = null;\n\n    if (this.state.dataParsed) {\n      let graphData = {\n        nodes: this.state.nodes,\n        links: this.state.links\n      };\n      graph = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graph-vis\",\n        children: /*#__PURE__*/_jsxDEV(ForceGraph2D, {\n          graphData: graphData,\n          nodeRelSize: 6,\n          linkDirectionalArrowLength: 3.5,\n          linkDirectionalArrowRelPos: 1,\n          linkCurvature: 0.0,\n          nodeLabel: \"name\",\n          enableNavigationControls: \"true\",\n          controlType: \"trackball\",\n          nodeAutoColorBy: \"group\",\n          linkWidth: 1,\n          linkDirectionalParticles: 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [graph, /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"/kgsum_result.ttl\",\n            download: true,\n            children: \"Download Summmarized TTL File\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default GraphContainer;","map":{"version":3,"sources":["E:/Universitat Paderborn/NEW/kgsum/kgsum/kgsum/src/main/resources/kgsum-visualization/src/Components/GraphContainer/GraphContainer.js"],"names":["React","Component","axios","ForceGraph2D","GraphContainer","state","dataParsed","nodeIds","nodes","links","typeProps","Album","Song","Songwriter","SoloArtist","Producer","Band","shouldComponentUpdate","nextProps","nextState","generateGraph","data","componentDidMount","console","log","getData","fetch","headers","Accept","then","response","json","myJson","props","fileLoaded","get","res","forEach","element","index","setState","handleNode","elementType","catch","err","arrayAdd","array","newArray","slice","push","handleObject","elemId","object","objectType","group","prevState","includes","uriParts","split","id","name","decodeURIComponent","length","source","target","elemType","typeParts","type","prop","subProp","render","graph","graphData"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport axios from \"axios\";\r\n// import results from \"../../kgsum_result.json\";\r\n\r\nimport { ForceGraph2D } from \"react-force-graph\";\r\n\r\nclass GraphContainer extends Component {\r\n  state = {\r\n    dataParsed: false,\r\n    nodeIds: [],\r\n    nodes: [],\r\n    links: [],\r\n    typeProps: {\r\n      Album: [\"artist\", \"producer\", \"track\", \"name\", \"date\", \"description\"],\r\n      Song: [\"writer\", \"name\", \"description\"],\r\n      Songwriter: [\"member\", \"name\", \"description\"],\r\n      SoloArtist: [\"name\", \"description\"],\r\n      Producer: [\"name\", \"description\"],\r\n      Band: [\"member\", \"name\", \"description\"],\r\n    },\r\n  };\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (nextState.dataParsed !== this.state.dataParsed) return true;\r\n  }\r\n\r\n  generateGraph(data) {}\r\n\r\n  componentDidMount() {\r\n    console.log(\"GraphContainer\", \"componentDidMount\");\r\n\r\n    const getData = () => {\r\n      fetch(\"srckgsum_result.json\", {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\",\r\n        },\r\n      })\r\n        .then(function (response) {\r\n          console.log(\"GraphContainer json\", response.json());\r\n\r\n          // return response.json();\r\n        })\r\n        .then(function (myJson) {\r\n          console.log(myJson);\r\n        });\r\n    };\r\n\r\n    if (this.props.fileLoaded) {\r\n      axios\r\n        .get(\"kgsum_result.json\")\r\n        .then((res) => {\r\n          res.data[\"@graph\"].forEach((element, index) => {\r\n            if (index > 2) {\r\n              this.setState({\r\n                dataParsed: true,\r\n              });\r\n            } else {\r\n              if (typeof element[\"@type\"] === \"string\") {\r\n                this.handleNode(element, element[\"@type\"], index);\r\n              } else if (typeof element[\"@type\"] === \"object\") {\r\n                element[\"@type\"].forEach((elementType) => {\r\n                  this.handleNode(element, elementType, index);\r\n                });\r\n              } else {\r\n                // undefined\r\n                // console.log(typeof element[\"@type\"], element);\r\n              }\r\n            }\r\n          });\r\n        })\r\n        .catch((err) => console.log(\"JSON ERROR\", err));\r\n      // getData();\r\n    }\r\n  }\r\n\r\n  arrayAdd(array, element) {\r\n    const newArray = array.slice();\r\n    newArray.push(element);\r\n    return newArray;\r\n  }\r\n\r\n  handleObject(elemId, object, objectType, group) {\r\n    this.setState((prevState) => {\r\n      if (!prevState.nodeIds.includes(object)) {\r\n        const uriParts = object.split(\"/\");\r\n        return {\r\n          nodeIds: this.arrayAdd(prevState.nodeIds, object),\r\n          nodes: this.arrayAdd(prevState.nodes, {\r\n            id: object,\r\n            name: decodeURIComponent(uriParts[uriParts.length - 1]),\r\n            group: group,\r\n          }),\r\n          links: this.arrayAdd(prevState.links, {\r\n            source: elemId,\r\n            target: object,\r\n            name: objectType,\r\n            // value: group,\r\n          }),\r\n        };\r\n      } else {\r\n        return {\r\n          links: this.arrayAdd(prevState.links, {\r\n            source: elemId,\r\n            target: object,\r\n            name: objectType,\r\n            // value: group,\r\n          }),\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  handleNode(element, elemType, group) {\r\n    this.setState((prevState) => {\r\n      if (!prevState.nodeIds.includes(element[\"@id\"])) {\r\n        let uriParts = element[\"@id\"].split(\"/\");\r\n\r\n        let typeParts = elemType.split(\"/\");\r\n        const type = typeParts[typeParts.length - 1];\r\n\r\n        this.state.typeProps[type].forEach((prop) => {\r\n          if (prop in element) {\r\n            if (typeof element[prop] === \"string\") {\r\n              this.handleObject(element[\"@id\"], element[prop], prop, group);\r\n            } else if (typeof element[prop] === \"object\") {\r\n              element[prop].forEach((subProp) => {\r\n                this.handleObject(element[\"@id\"], subProp, prop, group);\r\n              });\r\n            }\r\n          }\r\n        });\r\n        return {\r\n          nodeIds: this.arrayAdd(prevState.nodeIds, element[\"@id\"]),\r\n          nodes: this.arrayAdd(prevState.nodes, {\r\n            id: element[\"@id\"],\r\n            name: decodeURIComponent(uriParts[uriParts.length - 1]),\r\n            group: group,\r\n          }),\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let graph = null;\r\n\r\n    if (this.state.dataParsed) {\r\n      let graphData = {\r\n        nodes: this.state.nodes,\r\n        links: this.state.links,\r\n      };\r\n\r\n      graph = (\r\n        <div className=\"graph-vis\">\r\n          <ForceGraph2D\r\n            graphData={graphData}\r\n            nodeRelSize={6}\r\n            linkDirectionalArrowLength={3.5}\r\n            linkDirectionalArrowRelPos={1}\r\n            linkCurvature={0.0}\r\n            nodeLabel=\"name\"\r\n            enableNavigationControls=\"true\"\r\n            controlType=\"trackball\"\r\n            nodeAutoColorBy=\"group\"\r\n            linkWidth={1}\r\n            linkDirectionalParticles={1}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {graph}\r\n        <div>\r\n          <button>\r\n            <a href=\"/kgsum_result.ttl\" download>\r\n              Download Summmarized TTL File\r\n            </a>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GraphContainer;\r\n"]},"metadata":{},"sourceType":"module"}