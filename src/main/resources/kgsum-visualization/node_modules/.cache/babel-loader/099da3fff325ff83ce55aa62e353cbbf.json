{"ast":null,"code":"/* global CANNON */\n\n/**\n * Based on aframe/examples/showcase/tracked-controls.\n *\n * Handles events coming from the hand-controls.\n * Determines if the entity is grabbed or released.\n * Updates its position to move along the controller.\n */\nmodule.exports = AFRAME.registerComponent('grab', {\n  init: function () {\n    this.system = this.el.sceneEl.systems.physics;\n    this.GRABBED_STATE = 'grabbed';\n    this.grabbing = false;\n    this.hitEl =\n    /** @type {AFRAME.Element}    */\n    null;\n    this.physics =\n    /** @type {AFRAME.System}     */\n    this.el.sceneEl.systems.physics;\n    this.constraint =\n    /** @type {CANNON.Constraint} */\n    null; // Bind event handlers\n\n    this.onHit = this.onHit.bind(this);\n    this.onGripOpen = this.onGripOpen.bind(this);\n    this.onGripClose = this.onGripClose.bind(this);\n  },\n  play: function () {\n    const el = this.el;\n    el.addEventListener('hit', this.onHit);\n    el.addEventListener('gripdown', this.onGripClose);\n    el.addEventListener('gripup', this.onGripOpen);\n    el.addEventListener('trackpaddown', this.onGripClose);\n    el.addEventListener('trackpadup', this.onGripOpen);\n    el.addEventListener('triggerdown', this.onGripClose);\n    el.addEventListener('triggerup', this.onGripOpen);\n  },\n  pause: function () {\n    const el = this.el;\n    el.removeEventListener('hit', this.onHit);\n    el.removeEventListener('gripdown', this.onGripClose);\n    el.removeEventListener('gripup', this.onGripOpen);\n    el.removeEventListener('trackpaddown', this.onGripClose);\n    el.removeEventListener('trackpadup', this.onGripOpen);\n    el.removeEventListener('triggerdown', this.onGripClose);\n    el.removeEventListener('triggerup', this.onGripOpen);\n  },\n  onGripClose: function () {\n    this.grabbing = true;\n  },\n  onGripOpen: function () {\n    const hitEl = this.hitEl;\n    this.grabbing = false;\n\n    if (!hitEl) {\n      return;\n    }\n\n    hitEl.removeState(this.GRABBED_STATE);\n    this.hitEl = undefined;\n    this.system.removeConstraint(this.constraint);\n    this.constraint = null;\n  },\n  onHit: function (evt) {\n    const hitEl = evt.detail.el; // If the element is already grabbed (it could be grabbed by another controller).\n    // If the hand is not grabbing the element does not stick.\n    // If we're already grabbing something you can't grab again.\n\n    if (!hitEl || hitEl.is(this.GRABBED_STATE) || !this.grabbing || this.hitEl) {\n      return;\n    }\n\n    hitEl.addState(this.GRABBED_STATE);\n    this.hitEl = hitEl;\n    this.constraint = new CANNON.LockConstraint(this.el.body, hitEl.body);\n    this.system.addConstraint(this.constraint);\n  }\n});","map":{"version":3,"sources":["E:/Universitat Paderborn/NEW/kgsum/kgsum/kgsum/src/main/resources/kgsum-visualization/node_modules/aframe-extras/src/misc/grab.js"],"names":["module","exports","AFRAME","registerComponent","init","system","el","sceneEl","systems","physics","GRABBED_STATE","grabbing","hitEl","constraint","onHit","bind","onGripOpen","onGripClose","play","addEventListener","pause","removeEventListener","removeState","undefined","removeConstraint","evt","detail","is","addState","CANNON","LockConstraint","body","addConstraint"],"mappings":"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","sourcesContent":["/* global CANNON */\n\n/**\n * Based on aframe/examples/showcase/tracked-controls.\n *\n * Handles events coming from the hand-controls.\n * Determines if the entity is grabbed or released.\n * Updates its position to move along the controller.\n */\nmodule.exports = AFRAME.registerComponent('grab', {\n  init: function () {\n    this.system = this.el.sceneEl.systems.physics;\n\n    this.GRABBED_STATE = 'grabbed';\n\n    this.grabbing = false;\n    this.hitEl =      /** @type {AFRAME.Element}    */ null;\n    this.physics =    /** @type {AFRAME.System}     */ this.el.sceneEl.systems.physics;\n    this.constraint = /** @type {CANNON.Constraint} */ null;\n\n    // Bind event handlers\n    this.onHit = this.onHit.bind(this);\n    this.onGripOpen = this.onGripOpen.bind(this);\n    this.onGripClose = this.onGripClose.bind(this);\n  },\n\n  play: function () {\n    const el = this.el;\n    el.addEventListener('hit', this.onHit);\n    el.addEventListener('gripdown', this.onGripClose);\n    el.addEventListener('gripup', this.onGripOpen);\n    el.addEventListener('trackpaddown', this.onGripClose);\n    el.addEventListener('trackpadup', this.onGripOpen);\n    el.addEventListener('triggerdown', this.onGripClose);\n    el.addEventListener('triggerup', this.onGripOpen);\n  },\n\n  pause: function () {\n    const el = this.el;\n    el.removeEventListener('hit', this.onHit);\n    el.removeEventListener('gripdown', this.onGripClose);\n    el.removeEventListener('gripup', this.onGripOpen);\n    el.removeEventListener('trackpaddown', this.onGripClose);\n    el.removeEventListener('trackpadup', this.onGripOpen);\n    el.removeEventListener('triggerdown', this.onGripClose);\n    el.removeEventListener('triggerup', this.onGripOpen);\n  },\n\n  onGripClose: function () {\n    this.grabbing = true;\n  },\n\n  onGripOpen: function () {\n    const hitEl = this.hitEl;\n    this.grabbing = false;\n    if (!hitEl) { return; }\n    hitEl.removeState(this.GRABBED_STATE);\n    this.hitEl = undefined;\n    this.system.removeConstraint(this.constraint);\n    this.constraint = null;\n  },\n\n  onHit: function (evt) {\n    const hitEl = evt.detail.el;\n    // If the element is already grabbed (it could be grabbed by another controller).\n    // If the hand is not grabbing the element does not stick.\n    // If we're already grabbing something you can't grab again.\n    if (!hitEl || hitEl.is(this.GRABBED_STATE) || !this.grabbing || this.hitEl) { return; }\n    hitEl.addState(this.GRABBED_STATE);\n    this.hitEl = hitEl;\n    this.constraint = new CANNON.LockConstraint(this.el.body, hitEl.body);\n    this.system.addConstraint(this.constraint);\n  }\n});\n"]},"metadata":{},"sourceType":"script"}