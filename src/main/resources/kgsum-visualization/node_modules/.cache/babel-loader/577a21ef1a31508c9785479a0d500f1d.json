{"ast":null,"code":"const createPatternBuilder = require('./createPatternBuilder');\n\nmodule.exports = generateCreateSpringForceFunction;\nmodule.exports.generateCreateSpringForceFunctionBody = generateCreateSpringForceFunctionBody;\n\nfunction generateCreateSpringForceFunction(dimension) {\n  let code = generateCreateSpringForceFunctionBody(dimension);\n  return new Function('options', 'random', code);\n}\n\nfunction generateCreateSpringForceFunctionBody(dimension) {\n  let pattern = createPatternBuilder(dimension);\n  let code = `\n  if (!Number.isFinite(options.springCoefficient)) throw new Error('Spring coefficient is not a number');\n  if (!Number.isFinite(options.springLength)) throw new Error('Spring length is not a number');\n\n  return {\n    /**\n     * Updates forces acting on a spring\n     */\n    update: function (spring) {\n      var body1 = spring.from;\n      var body2 = spring.to;\n      var length = spring.length < 0 ? options.springLength : spring.length;\n      ${pattern('var d{var} = body2.pos.{var} - body1.pos.{var};', {\n    indent: 6\n  })}\n      var r = Math.sqrt(${pattern('d{var} * d{var}', {\n    join: ' + '\n  })});\n\n      if (r === 0) {\n        ${pattern('d{var} = (random.nextDouble() - 0.5) / 50;', {\n    indent: 8\n  })}\n        r = Math.sqrt(${pattern('d{var} * d{var}', {\n    join: ' + '\n  })});\n      }\n\n      var d = r - length;\n      var coefficient = ((spring.coefficient > 0) ? spring.coefficient : options.springCoefficient) * d / r;\n\n      ${pattern('body1.force.{var} += coefficient * d{var}', {\n    indent: 6\n  })};\n      body1.springCount += 1;\n      body1.springLength += r;\n\n      ${pattern('body2.force.{var} -= coefficient * d{var}', {\n    indent: 6\n  })};\n      body2.springCount += 1;\n      body2.springLength += r;\n    }\n  };\n`;\n  return code;\n}","map":{"version":3,"sources":["E:/Universitat Paderborn/NEW/src/node_modules/ngraph.forcelayout/lib/codeGenerators/generateCreateSpringForce.js"],"names":["createPatternBuilder","require","module","exports","generateCreateSpringForceFunction","generateCreateSpringForceFunctionBody","dimension","code","Function","pattern","indent","join"],"mappings":"AAAA,MAAMA,oBAAoB,GAAGC,OAAO,CAAC,wBAAD,CAApC;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,iCAAjB;AACAF,MAAM,CAACC,OAAP,CAAeE,qCAAf,GAAuDA,qCAAvD;;AAEA,SAASD,iCAAT,CAA2CE,SAA3C,EAAsD;AACpD,MAAIC,IAAI,GAAGF,qCAAqC,CAACC,SAAD,CAAhD;AACA,SAAO,IAAIE,QAAJ,CAAa,SAAb,EAAwB,QAAxB,EAAkCD,IAAlC,CAAP;AACD;;AAED,SAASF,qCAAT,CAA+CC,SAA/C,EAA0D;AACxD,MAAIG,OAAO,GAAGT,oBAAoB,CAACM,SAAD,CAAlC;AACA,MAAIC,IAAI,GAAI;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQE,OAAO,CAAC,iDAAD,EAAoD;AAACC,IAAAA,MAAM,EAAE;AAAT,GAApD,CAAiE;AAChF,0BAA0BD,OAAO,CAAC,iBAAD,EAAoB;AAACE,IAAAA,IAAI,EAAE;AAAP,GAApB,CAAmC;AACpE;AACA;AACA,UAAUF,OAAO,CAAC,4CAAD,EAA+C;AAACC,IAAAA,MAAM,EAAE;AAAT,GAA/C,CAA4D;AAC7E,wBAAwBD,OAAO,CAAC,iBAAD,EAAoB;AAACE,IAAAA,IAAI,EAAE;AAAP,GAApB,CAAmC;AAClE;AACA;AACA;AACA;AACA;AACA,QAAQF,OAAO,CAAC,2CAAD,EAA8C;AAACC,IAAAA,MAAM,EAAE;AAAT,GAA9C,CAA2D;AAC1E;AACA;AACA;AACA,QAAQD,OAAO,CAAC,2CAAD,EAA8C;AAACC,IAAAA,MAAM,EAAE;AAAT,GAA9C,CAA2D;AAC1E;AACA;AACA;AACA;AACA,CAhCE;AAiCA,SAAOH,IAAP;AACD","sourcesContent":["const createPatternBuilder = require('./createPatternBuilder');\n\nmodule.exports = generateCreateSpringForceFunction;\nmodule.exports.generateCreateSpringForceFunctionBody = generateCreateSpringForceFunctionBody;\n\nfunction generateCreateSpringForceFunction(dimension) {\n  let code = generateCreateSpringForceFunctionBody(dimension);\n  return new Function('options', 'random', code);\n}\n\nfunction generateCreateSpringForceFunctionBody(dimension) {\n  let pattern = createPatternBuilder(dimension);\n  let code = `\n  if (!Number.isFinite(options.springCoefficient)) throw new Error('Spring coefficient is not a number');\n  if (!Number.isFinite(options.springLength)) throw new Error('Spring length is not a number');\n\n  return {\n    /**\n     * Updates forces acting on a spring\n     */\n    update: function (spring) {\n      var body1 = spring.from;\n      var body2 = spring.to;\n      var length = spring.length < 0 ? options.springLength : spring.length;\n      ${pattern('var d{var} = body2.pos.{var} - body1.pos.{var};', {indent: 6})}\n      var r = Math.sqrt(${pattern('d{var} * d{var}', {join: ' + '})});\n\n      if (r === 0) {\n        ${pattern('d{var} = (random.nextDouble() - 0.5) / 50;', {indent: 8})}\n        r = Math.sqrt(${pattern('d{var} * d{var}', {join: ' + '})});\n      }\n\n      var d = r - length;\n      var coefficient = ((spring.coefficient > 0) ? spring.coefficient : options.springCoefficient) * d / r;\n\n      ${pattern('body1.force.{var} += coefficient * d{var}', {indent: 6})};\n      body1.springCount += 1;\n      body1.springLength += r;\n\n      ${pattern('body2.force.{var} -= coefficient * d{var}', {indent: 6})};\n      body2.springCount += 1;\n      body2.springLength += r;\n    }\n  };\n`;\n  return code;\n}\n"]},"metadata":{},"sourceType":"script"}