{"ast":null,"code":"/**\n * object-model\n *\n * Loader for THREE.js JSON format. Somewhat confusingly, there are two different THREE.js formats,\n * both having the .json extension. This loader supports only THREE.ObjectLoader, which typically\n * includes multiple meshes or an entire scene.\n *\n * Check the console for errors, if in doubt. You may need to use `json-model` or\n * `blend-character-model` for some .js and .json files.\n *\n * See: https://clara.io/learn/user-guide/data_exchange/threejs_export\n */\nmodule.exports = AFRAME.registerComponent('object-model', {\n  schema: {\n    src: {\n      type: 'asset'\n    },\n    crossorigin: {\n      default: ''\n    }\n  },\n  init: function () {\n    this.model = null;\n  },\n  update: function () {\n    let loader;\n    const data = this.data;\n    if (!data.src) return;\n    this.remove();\n    loader = new THREE.ObjectLoader();\n    if (data.crossorigin) loader.setCrossOrigin(data.crossorigin);\n    loader.load(data.src, object => {\n      // Enable skinning, if applicable.\n      object.traverse(o => {\n        if (o instanceof THREE.SkinnedMesh && o.material) {\n          o.material.skinning = !!(o.geometry && o.geometry.bones || []).length;\n        }\n      });\n      this.load(object);\n    });\n  },\n  load: function (model) {\n    this.model = model;\n    this.el.setObject3D('mesh', model);\n    this.el.emit('model-loaded', {\n      format: 'json',\n      model: model\n    });\n  },\n  remove: function () {\n    if (this.model) this.el.removeObject3D('mesh');\n  }\n});","map":{"version":3,"sources":["E:/Universitat Paderborn/NEW/src/node_modules/aframe-extras/src/loaders/object-model.js"],"names":["module","exports","AFRAME","registerComponent","schema","src","type","crossorigin","default","init","model","update","loader","data","remove","THREE","ObjectLoader","setCrossOrigin","load","object","traverse","o","SkinnedMesh","material","skinning","geometry","bones","length","el","setObject3D","emit","format","removeObject3D"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,OAAP,GAAiBC,MAAM,CAACC,iBAAP,CAAyB,cAAzB,EAAyC;AACxDC,EAAAA,MAAM,EAAE;AACNC,IAAAA,GAAG,EAAU;AAAEC,MAAAA,IAAI,EAAE;AAAR,KADP;AAENC,IAAAA,WAAW,EAAE;AAAEC,MAAAA,OAAO,EAAE;AAAX;AAFP,GADgD;AAMxDC,EAAAA,IAAI,EAAE,YAAY;AAChB,SAAKC,KAAL,GAAa,IAAb;AACD,GARuD;AAUxDC,EAAAA,MAAM,EAAE,YAAY;AAClB,QAAIC,MAAJ;AACA,UAAMC,IAAI,GAAG,KAAKA,IAAlB;AACA,QAAI,CAACA,IAAI,CAACR,GAAV,EAAe;AAEf,SAAKS,MAAL;AACAF,IAAAA,MAAM,GAAG,IAAIG,KAAK,CAACC,YAAV,EAAT;AACA,QAAIH,IAAI,CAACN,WAAT,EAAsBK,MAAM,CAACK,cAAP,CAAsBJ,IAAI,CAACN,WAA3B;AACtBK,IAAAA,MAAM,CAACM,IAAP,CAAYL,IAAI,CAACR,GAAjB,EAAuBc,MAAD,IAAY;AAEhC;AACAA,MAAAA,MAAM,CAACC,QAAP,CAAiBC,CAAD,IAAO;AACrB,YAAIA,CAAC,YAAYN,KAAK,CAACO,WAAnB,IAAkCD,CAAC,CAACE,QAAxC,EAAkD;AAChDF,UAAAA,CAAC,CAACE,QAAF,CAAWC,QAAX,GAAsB,CAAC,CAAC,CAAEH,CAAC,CAACI,QAAF,IAAcJ,CAAC,CAACI,QAAF,CAAWC,KAA1B,IAAoC,EAArC,EAAyCC,MAAjE;AACD;AACF,OAJD;AAMA,WAAKT,IAAL,CAAUC,MAAV;AACD,KAVD;AAWD,GA7BuD;AA+BxDD,EAAAA,IAAI,EAAE,UAAUR,KAAV,EAAiB;AACrB,SAAKA,KAAL,GAAaA,KAAb;AACA,SAAKkB,EAAL,CAAQC,WAAR,CAAoB,MAApB,EAA4BnB,KAA5B;AACA,SAAKkB,EAAL,CAAQE,IAAR,CAAa,cAAb,EAA6B;AAACC,MAAAA,MAAM,EAAE,MAAT;AAAiBrB,MAAAA,KAAK,EAAEA;AAAxB,KAA7B;AACD,GAnCuD;AAqCxDI,EAAAA,MAAM,EAAE,YAAY;AAClB,QAAI,KAAKJ,KAAT,EAAgB,KAAKkB,EAAL,CAAQI,cAAR,CAAuB,MAAvB;AACjB;AAvCuD,CAAzC,CAAjB","sourcesContent":["/**\n * object-model\n *\n * Loader for THREE.js JSON format. Somewhat confusingly, there are two different THREE.js formats,\n * both having the .json extension. This loader supports only THREE.ObjectLoader, which typically\n * includes multiple meshes or an entire scene.\n *\n * Check the console for errors, if in doubt. You may need to use `json-model` or\n * `blend-character-model` for some .js and .json files.\n *\n * See: https://clara.io/learn/user-guide/data_exchange/threejs_export\n */\nmodule.exports = AFRAME.registerComponent('object-model', {\n  schema: {\n    src:         { type: 'asset' },\n    crossorigin: { default: '' }\n  },\n\n  init: function () {\n    this.model = null;\n  },\n\n  update: function () {\n    let loader;\n    const data = this.data;\n    if (!data.src) return;\n\n    this.remove();\n    loader = new THREE.ObjectLoader();\n    if (data.crossorigin) loader.setCrossOrigin(data.crossorigin);\n    loader.load(data.src, (object) => {\n\n      // Enable skinning, if applicable.\n      object.traverse((o) => {\n        if (o instanceof THREE.SkinnedMesh && o.material) {\n          o.material.skinning = !!((o.geometry && o.geometry.bones) || []).length;\n        }\n      });\n\n      this.load(object);\n    });\n  },\n\n  load: function (model) {\n    this.model = model;\n    this.el.setObject3D('mesh', model);\n    this.el.emit('model-loaded', {format: 'json', model: model});\n  },\n\n  remove: function () {\n    if (this.model) this.el.removeObject3D('mesh');\n  }\n});\n"]},"metadata":{},"sourceType":"script"}