{"ast":null,"code":"/* global AFRAME */\nif (typeof AFRAME === 'undefined') {\n  throw new Error('Component attempted to register before AFRAME was available.');\n}\n\nlet accessorFn = require('accessor-fn');\n\nif ('default' in accessorFn) {\n  // unwrap default export\n  accessorFn = accessorFn.default;\n}\n\nlet ThreeForceGraph = require('three-forcegraph');\n\nif ('default' in ThreeForceGraph) {\n  // unwrap default export\n  ThreeForceGraph = ThreeForceGraph.default;\n}\n\nconst parseJson = function (prop) {\n  return typeof prop === 'string' ? JSON.parse(prop) : prop; // already parsed\n};\n\nconst parseFn = function (prop) {\n  if (typeof prop === 'function') return prop; // already a function\n\n  const geval = eval; // Avoid using eval directly https://github.com/rollup/rollup/wiki/Troubleshooting#avoiding-eval\n\n  try {\n    const evalled = geval('(' + prop + ')');\n    return evalled;\n  } catch (e) {} // Can't eval, not a function\n\n\n  return null;\n};\n\nconst parseAccessor = function (prop) {\n  if (!isNaN(parseFloat(prop))) {\n    return parseFloat(prop);\n  } // parse numbers\n\n\n  if (parseFn(prop)) {\n    return parseFn(prop);\n  } // parse functions\n\n\n  return prop; // strings\n};\n/**\n * 3D Force-Directed Graph component for A-Frame.\n */\n\n\nAFRAME.registerComponent('forcegraph', {\n  schema: {\n    jsonUrl: {\n      type: 'string',\n      default: ''\n    },\n    nodes: {\n      parse: parseJson,\n      default: []\n    },\n    links: {\n      parse: parseJson,\n      default: []\n    },\n    numDimensions: {\n      type: 'number',\n      default: 3\n    },\n    dagMode: {\n      type: 'string',\n      default: ''\n    },\n    dagLevelDistance: {\n      type: 'number',\n      default: 0\n    },\n    dagNodeFilter: {\n      parse: parseFn,\n\n      function() {\n        return true;\n      }\n\n    },\n    onDagError: {\n      parse: parseFn,\n      default: undefined\n    },\n    nodeRelSize: {\n      type: 'number',\n      default: 4\n    },\n    // volume per val unit\n    nodeId: {\n      type: 'string',\n      default: 'id'\n    },\n    nodeVal: {\n      parse: parseAccessor,\n      default: 'val'\n    },\n    nodeResolution: {\n      type: 'number',\n      default: 8\n    },\n    // how many slice segments in the sphere's circumference\n    nodeVisibility: {\n      parse: parseAccessor,\n      default: true\n    },\n    nodeColor: {\n      parse: parseAccessor,\n      default: 'color'\n    },\n    nodeAutoColorBy: {\n      parse: parseAccessor,\n      default: ''\n    },\n    // color nodes with the same field equally\n    nodeOpacity: {\n      type: 'number',\n      default: 0.75\n    },\n    nodeThreeObject: {\n      parse: parseAccessor,\n      default: null\n    },\n    nodeThreeObjectExtend: {\n      parse: parseAccessor,\n      default: false\n    },\n    linkSource: {\n      type: 'string',\n      default: 'source'\n    },\n    linkTarget: {\n      type: 'string',\n      default: 'target'\n    },\n    linkVisibility: {\n      parse: parseAccessor,\n      default: true\n    },\n    linkColor: {\n      parse: parseAccessor,\n      default: 'color'\n    },\n    linkAutoColorBy: {\n      parse: parseAccessor,\n      default: ''\n    },\n    // color links with the same field equally\n    linkOpacity: {\n      type: 'number',\n      default: 0.2\n    },\n    linkWidth: {\n      parse: parseAccessor,\n      default: 0\n    },\n    linkResolution: {\n      type: 'number',\n      default: 6\n    },\n    // how many radial segments in each line cylinder's geometry\n    linkCurvature: {\n      parse: parseAccessor,\n      default: 0\n    },\n    linkCurveRotation: {\n      parse: parseAccessor,\n      default: 0\n    },\n    linkMaterial: {\n      parse: parseAccessor,\n      default: null\n    },\n    linkThreeObject: {\n      parse: parseAccessor,\n      default: null\n    },\n    linkThreeObjectExtend: {\n      parse: parseAccessor,\n      default: false\n    },\n    linkPositionUpdate: {\n      parse: parseFn,\n      default: null\n    },\n    linkDirectionalArrowLength: {\n      parse: parseAccessor,\n      default: 0\n    },\n    linkDirectionalArrowColor: {\n      parse: parseAccessor,\n      default: null\n    },\n    linkDirectionalArrowRelPos: {\n      parse: parseAccessor,\n      default: 0.5\n    },\n    // value between 0<>1 indicating the relative pos along the (exposed) line\n    linkDirectionalArrowResolution: {\n      type: 'number',\n      default: 8\n    },\n    // how many slice segments in the arrow's conic circumference\n    linkDirectionalParticles: {\n      parse: parseAccessor,\n      default: 0\n    },\n    // animate photons travelling in the link direction\n    linkDirectionalParticleSpeed: {\n      parse: parseAccessor,\n      default: 0.01\n    },\n    // in link length ratio per frame\n    linkDirectionalParticleWidth: {\n      parse: parseAccessor,\n      default: 0.5\n    },\n    linkDirectionalParticleColor: {\n      parse: parseAccessor,\n      default: null\n    },\n    linkDirectionalParticleResolution: {\n      type: 'number',\n      default: 4\n    },\n    // how many slice segments in the particle sphere's circumference\n    onNodeHover: {\n      parse: parseFn,\n      default: () => {}\n    },\n    onLinkHover: {\n      parse: parseFn,\n      default: () => {}\n    },\n    onNodeClick: {\n      parse: parseFn,\n      default: () => {}\n    },\n    onLinkClick: {\n      parse: parseFn,\n      default: () => {}\n    },\n    forceEngine: {\n      type: 'string',\n      default: 'd3'\n    },\n    // 'd3' or 'ngraph'\n    d3AlphaMin: {\n      type: 'number',\n      default: 0\n    },\n    d3AlphaDecay: {\n      type: 'number',\n      default: 0.0228\n    },\n    d3VelocityDecay: {\n      type: 'number',\n      default: 0.4\n    },\n    ngraphPhysics: {\n      parse: parseJson,\n      default: null\n    },\n    warmupTicks: {\n      type: 'int',\n      default: 0\n    },\n    // how many times to tick the force engine at init before starting to render\n    cooldownTicks: {\n      type: 'int',\n      default: 1e18\n    },\n    // Simulate infinity (int parser doesn't accept Infinity object)\n    cooldownTime: {\n      type: 'int',\n      default: 15000\n    },\n    // ms\n    onEngineTick: {\n      parse: parseFn,\n      default: function () {}\n    },\n    onEngineStop: {\n      parse: parseFn,\n      default: function () {}\n    }\n  },\n  // Bind component methods\n  getGraphBbox: function () {\n    if (!this.forceGraph) {\n      // Got here before component init -> initialize forceGraph\n      this.forceGraph = new ThreeForceGraph();\n    }\n\n    return this.forceGraph.getGraphBbox();\n  },\n  emitParticle: function () {\n    if (!this.forceGraph) {\n      // Got here before component init -> initialize forceGraph\n      this.forceGraph = new ThreeForceGraph();\n    }\n\n    const forceGraph = this.forceGraph;\n    const returnVal = forceGraph.emitParticle.apply(forceGraph, arguments);\n    return returnVal === forceGraph ? this // return self, not the inner forcegraph component\n    : returnVal;\n  },\n  d3Force: function () {\n    if (!this.forceGraph) {\n      // Got here before component init -> initialize forceGraph\n      this.forceGraph = new ThreeForceGraph();\n    }\n\n    const forceGraph = this.forceGraph;\n    const returnVal = forceGraph.d3Force.apply(forceGraph, arguments);\n    return returnVal === forceGraph ? this // return self, not the inner forcegraph component\n    : returnVal;\n  },\n  d3ReheatSimulation: function () {\n    this.forceGraph && this.forceGraph.d3ReheatSimulation();\n    return this;\n  },\n  refresh: function () {\n    this.forceGraph && this.forceGraph.refresh();\n    return this;\n  },\n  init: function () {\n    const state = this.state = {}; // Internal state\n    // Add info msg\n\n    state.infoEl = document.createElement('a-text');\n    state.infoEl.setAttribute('position', '0 -0.1 -1'); // Canvas center\n\n    state.infoEl.setAttribute('width', 1);\n    state.infoEl.setAttribute('align', 'center');\n    state.infoEl.setAttribute('color', 'lavender'); // Get camera dom element and attach fixed view elements to camera\n\n    const cameraEl = document.querySelector('a-entity[camera], a-camera');\n    cameraEl.appendChild(state.infoEl); // Keep reference to Three camera object\n\n    state.cameraObj = cameraEl.object3D.children.filter(function (child) {\n      return child.type === 'PerspectiveCamera';\n    })[0]; // On camera switch\n\n    this.el.sceneEl.addEventListener('camera-set-active', function (evt) {\n      // Switch camera reference\n      state.cameraObj = evt.detail.cameraEl.components.camera.camera;\n    }); // setup FG object\n\n    if (!this.forceGraph) this.forceGraph = new ThreeForceGraph(); // initialize forceGraph if it doesn't exist yet\n\n    this.forceGraph.onFinishUpdate(() => this.el.setObject3D('forcegraphGroup', this.forceGraph)) // Bind forcegraph to elem\n    .onLoading(() => state.infoEl.setAttribute('value', 'Loading...')) // Add loading msg\n    .onFinishLoading(() => state.infoEl.setAttribute('value', '')); // prefer raycaster events over mouseenter/mouseleave because they expose immediately available intersection data via detail.getIntersection()\n\n    this.el.addEventListener('raycaster-intersected', ev => state.hoverDetail = ev.detail);\n    this.el.addEventListener('raycaster-intersected-cleared', ev => state.hoverDetail = ev.detail);\n    this.el.addEventListener('click', () => state.hoverObj && this.data['on' + (state.hoverObj.__graphObjType === 'node' ? 'Node' : 'Link') + 'Click'](state.hoverObj.__data));\n  },\n  remove: function () {\n    // Clean-up elems\n    this.state.infoEl.remove();\n    this.el.removeObject3D('forcegraphGroup');\n  },\n  update: function (oldData) {\n    const comp = this;\n    const elData = this.data;\n    const diff = AFRAME.utils.diff(elData, oldData);\n    const fgProps = ['jsonUrl', 'numDimensions', 'dagMode', 'dagLevelDistance', 'dagNodeFilter', 'onDagError', 'nodeRelSize', 'nodeId', 'nodeVal', 'nodeResolution', 'nodeVisibility', 'nodeColor', 'nodeAutoColorBy', 'nodeOpacity', 'nodeThreeObject', 'nodeThreeObjectExtend', 'linkSource', 'linkTarget', 'linkVisibility', 'linkColor', 'linkAutoColorBy', 'linkOpacity', 'linkWidth', 'linkResolution', 'linkCurvature', 'linkCurveRotation', 'linkMaterial', 'linkThreeObject', 'linkThreeObjectExtend', 'linkPositionUpdate', 'linkDirectionalArrowLength', 'linkDirectionalArrowColor', 'linkDirectionalArrowRelPos', 'linkDirectionalArrowResolution', 'linkDirectionalParticles', 'linkDirectionalParticleSpeed', 'linkDirectionalParticleWidth', 'linkDirectionalParticleColor', 'linkDirectionalParticleResolution', 'forceEngine', 'd3AlphaMin', 'd3AphaDecay', 'd3VelocityDecay', 'ngraphPhysics', 'warmupTicks', 'cooldownTicks', 'cooldownTime', 'onEngineTick', 'onEngineStop'];\n    fgProps.filter(function (p) {\n      return p in diff;\n    }).forEach(function (p) {\n      comp.forceGraph[p](elData[p] !== '' ? elData[p] : null);\n    }); // Convert blank values into nulls\n\n    if ('nodes' in diff || 'links' in diff) {\n      comp.forceGraph.graphData({\n        nodes: elData.nodes,\n        links: elData.links\n      });\n    }\n  },\n  tick: function (t, td) {\n    const state = this.state;\n    const props = this.data; // Update hover (intersected) object\n\n    const intersection = state.hoverDetail ? state.hoverDetail.getIntersection ? state.hoverDetail.getIntersection(this.el) // available in raycaster-intersected events\n    : state.hoverDetail.intersection || undefined // available in mouseenter/mouseleave events (with delayed update)\n    : undefined; // Note:\n    // Unfortunately we only have access to the intersected object closer to the camera (1st element in the raycaster intersectObjects result),\n    // there is no \".getIntersections()\" method available in the event details. Therefore, we can't prioritize hover on nodes over links, or even exclude\n    // objects that are neither nodes or links. This makes the interaction a bit erratic if nodes have a lot of links in front.\n    // Configuring the raycaster.params.Line.threshold might help with this somewhat, but that config is also not available via the a-frame raycaster component.\n    // recurse up until forcegraph obj is found\n\n    let topObject = intersection ? intersection.object : undefined;\n\n    while (topObject && !topObject.hasOwnProperty('__graphObjType')) topObject = topObject.parent;\n\n    if (topObject !== state.hoverObj) {\n      const prevObjType = state.hoverObj ? state.hoverObj.__graphObjType : null;\n      const prevObjData = state.hoverObj ? state.hoverObj.__data : null;\n      const objType = topObject ? topObject.__graphObjType : null;\n      const objData = topObject ? topObject.__data : null;\n\n      if (prevObjType && prevObjType !== objType) {\n        // Hover out\n        props['on' + (prevObjType === 'node' ? 'Node' : 'Link') + 'Hover'](null, prevObjData);\n      }\n\n      if (objType) {\n        // Hover in\n        props['on' + (objType === 'node' ? 'Node' : 'Link') + 'Hover'](objData, prevObjType === objType ? prevObjData : null);\n      }\n\n      state.hoverObj = topObject;\n    } // Run force-graph ticker\n\n\n    this.forceGraph.tickFrame();\n  }\n});","map":{"version":3,"sources":["E:/Universitat Paderborn/NEW/kgsum/kgsum-visualization/node_modules/aframe-forcegraph-component/index.js"],"names":["AFRAME","Error","accessorFn","require","default","ThreeForceGraph","parseJson","prop","JSON","parse","parseFn","geval","eval","evalled","e","parseAccessor","isNaN","parseFloat","registerComponent","schema","jsonUrl","type","nodes","links","numDimensions","dagMode","dagLevelDistance","dagNodeFilter","function","onDagError","undefined","nodeRelSize","nodeId","nodeVal","nodeResolution","nodeVisibility","nodeColor","nodeAutoColorBy","nodeOpacity","nodeThreeObject","nodeThreeObjectExtend","linkSource","linkTarget","linkVisibility","linkColor","linkAutoColorBy","linkOpacity","linkWidth","linkResolution","linkCurvature","linkCurveRotation","linkMaterial","linkThreeObject","linkThreeObjectExtend","linkPositionUpdate","linkDirectionalArrowLength","linkDirectionalArrowColor","linkDirectionalArrowRelPos","linkDirectionalArrowResolution","linkDirectionalParticles","linkDirectionalParticleSpeed","linkDirectionalParticleWidth","linkDirectionalParticleColor","linkDirectionalParticleResolution","onNodeHover","onLinkHover","onNodeClick","onLinkClick","forceEngine","d3AlphaMin","d3AlphaDecay","d3VelocityDecay","ngraphPhysics","warmupTicks","cooldownTicks","cooldownTime","onEngineTick","onEngineStop","getGraphBbox","forceGraph","emitParticle","returnVal","apply","arguments","d3Force","d3ReheatSimulation","refresh","init","state","infoEl","document","createElement","setAttribute","cameraEl","querySelector","appendChild","cameraObj","object3D","children","filter","child","el","sceneEl","addEventListener","evt","detail","components","camera","onFinishUpdate","setObject3D","onLoading","onFinishLoading","ev","hoverDetail","hoverObj","data","__graphObjType","__data","remove","removeObject3D","update","oldData","comp","elData","diff","utils","fgProps","p","forEach","graphData","tick","t","td","props","intersection","getIntersection","topObject","object","hasOwnProperty","parent","prevObjType","prevObjData","objType","objData","tickFrame"],"mappings":"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","sourcesContent":["/* global AFRAME */\n\nif (typeof AFRAME === 'undefined') {\n  throw new Error('Component attempted to register before AFRAME was available.');\n}\n\nlet accessorFn = require('accessor-fn');\nif ('default' in accessorFn) {\n  // unwrap default export\n  accessorFn = accessorFn.default;\n}\n\nlet ThreeForceGraph = require('three-forcegraph');\nif ('default' in ThreeForceGraph) {\n  // unwrap default export\n  ThreeForceGraph = ThreeForceGraph.default;\n}\n\nconst parseJson = function (prop) {\n  return (typeof prop === 'string')\n    ? JSON.parse(prop)\n    : prop; // already parsed\n};\n\nconst parseFn = function (prop) {\n  if (typeof prop === 'function') return prop; // already a function\n  const geval = eval; // Avoid using eval directly https://github.com/rollup/rollup/wiki/Troubleshooting#avoiding-eval\n  try {\n    const evalled = geval('(' + prop + ')');\n    return evalled;\n  } catch (e) {} // Can't eval, not a function\n  return null;\n};\n\nconst parseAccessor = function (prop) {\n  if (!isNaN(parseFloat(prop))) { return parseFloat(prop); } // parse numbers\n  if (parseFn(prop)) { return parseFn(prop); } // parse functions\n  return prop; // strings\n};\n\n/**\n * 3D Force-Directed Graph component for A-Frame.\n */\nAFRAME.registerComponent('forcegraph', {\n  schema: {\n    jsonUrl: { type: 'string', default: '' },\n    nodes: { parse: parseJson, default: [] },\n    links: { parse: parseJson, default: [] },\n    numDimensions: { type: 'number', default: 3 },\n    dagMode: { type: 'string', default: '' },\n    dagLevelDistance: { type: 'number', default: 0 },\n    dagNodeFilter: { parse: parseFn, function() { return true; }},\n    onDagError: { parse: parseFn, default: undefined },\n    nodeRelSize: { type: 'number', default: 4 }, // volume per val unit\n    nodeId: { type: 'string', default: 'id' },\n    nodeVal: { parse: parseAccessor, default: 'val' },\n    nodeResolution: { type: 'number', default: 8 }, // how many slice segments in the sphere's circumference\n    nodeVisibility: { parse: parseAccessor, default: true },\n    nodeColor: { parse: parseAccessor, default: 'color' },\n    nodeAutoColorBy: { parse: parseAccessor, default: '' }, // color nodes with the same field equally\n    nodeOpacity: { type: 'number', default: 0.75 },\n    nodeThreeObject: { parse: parseAccessor, default: null },\n    nodeThreeObjectExtend: { parse: parseAccessor, default: false },\n    linkSource: { type: 'string', default: 'source' },\n    linkTarget: { type: 'string', default: 'target' },\n    linkVisibility: { parse: parseAccessor, default: true },\n    linkColor: { parse: parseAccessor, default: 'color' },\n    linkAutoColorBy: { parse: parseAccessor, default: '' }, // color links with the same field equally\n    linkOpacity: { type: 'number', default: 0.2 },\n    linkWidth: { parse: parseAccessor, default: 0 },\n    linkResolution: { type: 'number', default: 6 }, // how many radial segments in each line cylinder's geometry\n    linkCurvature: { parse: parseAccessor, default: 0 },\n    linkCurveRotation: { parse: parseAccessor, default: 0 },\n    linkMaterial: { parse: parseAccessor, default: null },\n    linkThreeObject: { parse: parseAccessor, default: null },\n    linkThreeObjectExtend: { parse: parseAccessor, default: false },\n    linkPositionUpdate: { parse: parseFn, default: null },\n    linkDirectionalArrowLength: { parse: parseAccessor, default: 0 },\n    linkDirectionalArrowColor: { parse: parseAccessor, default: null },\n    linkDirectionalArrowRelPos: { parse: parseAccessor, default: 0.5 }, // value between 0<>1 indicating the relative pos along the (exposed) line\n    linkDirectionalArrowResolution: { type: 'number', default: 8 }, // how many slice segments in the arrow's conic circumference\n    linkDirectionalParticles: { parse: parseAccessor, default: 0 }, // animate photons travelling in the link direction\n    linkDirectionalParticleSpeed: { parse: parseAccessor, default: 0.01 }, // in link length ratio per frame\n    linkDirectionalParticleWidth: { parse: parseAccessor, default: 0.5 },\n    linkDirectionalParticleColor: { parse: parseAccessor, default: null },\n    linkDirectionalParticleResolution: { type: 'number', default: 4 }, // how many slice segments in the particle sphere's circumference\n    onNodeHover: { parse: parseFn, default: () => {} },\n    onLinkHover: { parse: parseFn, default: () => {} },\n    onNodeClick: { parse: parseFn, default: () => {} },\n    onLinkClick: { parse: parseFn, default: () => {} },\n    forceEngine: { type: 'string', default: 'd3' }, // 'd3' or 'ngraph'\n    d3AlphaMin: { type: 'number', default: 0 },\n    d3AlphaDecay: { type: 'number', default: 0.0228 },\n    d3VelocityDecay: { type: 'number', default: 0.4 },\n    ngraphPhysics: { parse: parseJson, default: null },\n    warmupTicks: { type: 'int', default: 0 }, // how many times to tick the force engine at init before starting to render\n    cooldownTicks: { type: 'int', default: 1e18 }, // Simulate infinity (int parser doesn't accept Infinity object)\n    cooldownTime: { type: 'int', default: 15000 }, // ms\n    onEngineTick: { parse: parseFn, default: function () {} },\n    onEngineStop: { parse: parseFn, default: function () {} }\n  },\n\n  // Bind component methods\n  getGraphBbox: function() {\n    if (!this.forceGraph) {\n      // Got here before component init -> initialize forceGraph\n      this.forceGraph = new ThreeForceGraph();\n    }\n\n    return this.forceGraph.getGraphBbox();\n  },\n  emitParticle: function () {\n    if (!this.forceGraph) {\n      // Got here before component init -> initialize forceGraph\n      this.forceGraph = new ThreeForceGraph();\n    }\n\n    const forceGraph = this.forceGraph;\n    const returnVal = forceGraph.emitParticle.apply(forceGraph, arguments);\n\n    return returnVal === forceGraph\n      ? this // return self, not the inner forcegraph component\n      : returnVal;\n  },\n\n  d3Force: function () {\n    if (!this.forceGraph) {\n      // Got here before component init -> initialize forceGraph\n      this.forceGraph = new ThreeForceGraph();\n    }\n\n    const forceGraph = this.forceGraph;\n    const returnVal = forceGraph.d3Force.apply(forceGraph, arguments);\n\n    return returnVal === forceGraph\n      ? this // return self, not the inner forcegraph component\n      : returnVal;\n  },\n\n  d3ReheatSimulation: function () {\n    this.forceGraph && this.forceGraph.d3ReheatSimulation();\n    return this;\n  },\n\n  refresh: function () {\n    this.forceGraph && this.forceGraph.refresh();\n    return this;\n  },\n\n  init: function () {\n    const state = this.state = {}; // Internal state\n\n    // Add info msg\n    state.infoEl = document.createElement('a-text');\n    state.infoEl.setAttribute('position', '0 -0.1 -1'); // Canvas center\n    state.infoEl.setAttribute('width', 1);\n    state.infoEl.setAttribute('align', 'center');\n    state.infoEl.setAttribute('color', 'lavender');\n\n    // Get camera dom element and attach fixed view elements to camera\n    const cameraEl = document.querySelector('a-entity[camera], a-camera');\n    cameraEl.appendChild(state.infoEl);\n\n    // Keep reference to Three camera object\n    state.cameraObj = cameraEl.object3D.children\n      .filter(function (child) { return child.type === 'PerspectiveCamera'; })[0];\n\n    // On camera switch\n    this.el.sceneEl.addEventListener('camera-set-active', function (evt) {\n      // Switch camera reference\n      state.cameraObj = evt.detail.cameraEl.components.camera.camera;\n    });\n\n    // setup FG object\n    if (!this.forceGraph) this.forceGraph = new ThreeForceGraph(); // initialize forceGraph if it doesn't exist yet\n    this.forceGraph\n      .onFinishUpdate(() => this.el.setObject3D('forcegraphGroup', this.forceGraph)) // Bind forcegraph to elem\n      .onLoading(() => state.infoEl.setAttribute('value', 'Loading...')) // Add loading msg\n      .onFinishLoading(() => state.infoEl.setAttribute('value', ''));\n\n    // prefer raycaster events over mouseenter/mouseleave because they expose immediately available intersection data via detail.getIntersection()\n    this.el.addEventListener('raycaster-intersected', ev => state.hoverDetail = ev.detail);\n    this.el.addEventListener('raycaster-intersected-cleared', ev => state.hoverDetail = ev.detail);\n\n    this.el.addEventListener('click', () =>\n      state.hoverObj && this.data['on' + (state.hoverObj.__graphObjType === 'node' ? 'Node' : 'Link') + 'Click'](state.hoverObj.__data)\n    );\n  },\n\n  remove: function () {\n    // Clean-up elems\n    this.state.infoEl.remove();\n    this.el.removeObject3D('forcegraphGroup');\n  },\n\n  update: function (oldData) {\n    const comp = this;\n    const elData = this.data;\n    const diff = AFRAME.utils.diff(elData, oldData);\n\n    const fgProps = [\n      'jsonUrl',\n      'numDimensions',\n      'dagMode',\n      'dagLevelDistance',\n      'dagNodeFilter',\n      'onDagError',\n      'nodeRelSize',\n      'nodeId',\n      'nodeVal',\n      'nodeResolution',\n      'nodeVisibility',\n      'nodeColor',\n      'nodeAutoColorBy',\n      'nodeOpacity',\n      'nodeThreeObject',\n      'nodeThreeObjectExtend',\n      'linkSource',\n      'linkTarget',\n      'linkVisibility',\n      'linkColor',\n      'linkAutoColorBy',\n      'linkOpacity',\n      'linkWidth',\n      'linkResolution',\n      'linkCurvature',\n      'linkCurveRotation',\n      'linkMaterial',\n      'linkThreeObject',\n      'linkThreeObjectExtend',\n      'linkPositionUpdate',\n      'linkDirectionalArrowLength',\n      'linkDirectionalArrowColor',\n      'linkDirectionalArrowRelPos',\n      'linkDirectionalArrowResolution',\n      'linkDirectionalParticles',\n      'linkDirectionalParticleSpeed',\n      'linkDirectionalParticleWidth',\n      'linkDirectionalParticleColor',\n      'linkDirectionalParticleResolution',\n      'forceEngine',\n      'd3AlphaMin',\n      'd3AphaDecay',\n      'd3VelocityDecay',\n      'ngraphPhysics',\n      'warmupTicks',\n      'cooldownTicks',\n      'cooldownTime',\n      'onEngineTick',\n      'onEngineStop'\n    ];\n\n    fgProps\n      .filter(function (p) { return p in diff; })\n      .forEach(function (p) { comp.forceGraph[p](elData[p] !== '' ? elData[p] : null); }); // Convert blank values into nulls\n\n    if ('nodes' in diff || 'links' in diff) {\n      comp.forceGraph.graphData({\n        nodes: elData.nodes,\n        links: elData.links\n      });\n    }\n  },\n\n  tick: function (t, td) {\n    const state = this.state;\n    const props = this.data;\n\n    // Update hover (intersected) object\n    const intersection = state.hoverDetail\n      ? state.hoverDetail.getIntersection\n        ? state.hoverDetail.getIntersection(this.el) // available in raycaster-intersected events\n        : state.hoverDetail.intersection || undefined // available in mouseenter/mouseleave events (with delayed update)\n      : undefined;\n\n    // Note:\n    // Unfortunately we only have access to the intersected object closer to the camera (1st element in the raycaster intersectObjects result),\n    // there is no \".getIntersections()\" method available in the event details. Therefore, we can't prioritize hover on nodes over links, or even exclude\n    // objects that are neither nodes or links. This makes the interaction a bit erratic if nodes have a lot of links in front.\n    // Configuring the raycaster.params.Line.threshold might help with this somewhat, but that config is also not available via the a-frame raycaster component.\n\n    // recurse up until forcegraph obj is found\n    let topObject = intersection ? intersection.object : undefined;\n    while (topObject && !topObject.hasOwnProperty('__graphObjType'))\n      topObject = topObject.parent;\n\n    if (topObject !== state.hoverObj) {\n      const prevObjType = state.hoverObj ? state.hoverObj.__graphObjType : null;\n      const prevObjData = state.hoverObj ? state.hoverObj.__data : null;\n      const objType = topObject ? topObject.__graphObjType : null;\n      const objData = topObject ? topObject.__data : null;\n\n      if (prevObjType && prevObjType !== objType) {\n        // Hover out\n        props['on' + (prevObjType === 'node' ? 'Node' : 'Link') + 'Hover'](null, prevObjData);\n      }\n      if (objType) {\n        // Hover in\n        props['on' + (objType === 'node' ? 'Node' : 'Link') + 'Hover'](objData, prevObjType === objType ? prevObjData : null);\n      }\n\n      state.hoverObj = topObject;\n    }\n\n    // Run force-graph ticker\n    this.forceGraph.tickFrame();\n  }\n});\n"]},"metadata":{},"sourceType":"script"}