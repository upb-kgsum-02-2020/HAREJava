{"ast":null,"code":"/**\n * @author Kyle-Larson https://github.com/Kyle-Larson\n * @author Takahiro https://github.com/takahirox\n * @author Lewy Blue https://github.com/looeee\n *\n * Loader loads FBX file and generates Group representing FBX scene.\n * Requires FBX file to be >= 7.0 and in ASCII or >= 6400 in Binary format\n * Versions lower than this may load but will probably have errors\n *\n * Needs Support:\n *  Morph normals / blend shape normals\n *\n * FBX format references:\n * \thttps://wiki.blender.org/index.php/User:Mont29/Foundation/FBX_File_Structure\n * \thttp://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_index_html (C++ SDK reference)\n *\n * \tBinary format specification:\n *\t\thttps://code.blender.org/2013/08/fbx-binary-file-format-specification/\n */\nmodule.exports = THREE.FBXLoader = function () {\n  var fbxTree;\n  var connections;\n  var sceneGraph;\n\n  function FBXLoader(manager) {\n    this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\n  }\n\n  FBXLoader.prototype = {\n    constructor: FBXLoader,\n    crossOrigin: 'anonymous',\n    load: function (url, onLoad, onProgress, onError) {\n      var self = this;\n      var resourceDirectory = THREE.LoaderUtils.extractUrlBase(url);\n      var loader = new THREE.FileLoader(this.manager);\n      loader.setResponseType('arraybuffer');\n      loader.load(url, function (buffer) {\n        try {\n          var scene = self.parse(buffer, resourceDirectory);\n          onLoad(scene);\n        } catch (error) {\n          setTimeout(function () {\n            if (onError) onError(error);\n            self.manager.itemError(url);\n          }, 0);\n        }\n      }, onProgress, onError);\n    },\n    setCrossOrigin: function (value) {\n      this.crossOrigin = value;\n      return this;\n    },\n    parse: function (FBXBuffer, resourceDirectory) {\n      if (isFbxFormatBinary(FBXBuffer)) {\n        fbxTree = new BinaryParser().parse(FBXBuffer);\n      } else {\n        var FBXText = convertArrayBufferToString(FBXBuffer);\n\n        if (!isFbxFormatASCII(FBXText)) {\n          throw new Error('THREE.FBXLoader: Unknown format.');\n        }\n\n        if (getFbxVersion(FBXText) < 7000) {\n          throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion(FBXText));\n        }\n\n        fbxTree = new TextParser().parse(FBXText);\n      } //console.log( FBXTree );\n\n\n      var textureLoader = new THREE.TextureLoader(this.manager).setPath(resourceDirectory).setCrossOrigin(this.crossOrigin);\n      return new FBXTreeParser(textureLoader).parse(fbxTree);\n    }\n  }; // Parse the FBXTree object returned by the BinaryParser or TextParser and return a THREE.Group\n\n  function FBXTreeParser(textureLoader) {\n    this.textureLoader = textureLoader;\n  }\n\n  FBXTreeParser.prototype = {\n    constructor: FBXTreeParser,\n    parse: function () {\n      connections = this.parseConnections();\n      var images = this.parseImages();\n      var textures = this.parseTextures(images);\n      var materials = this.parseMaterials(textures);\n      var deformers = this.parseDeformers();\n      var geometryMap = new GeometryParser().parse(deformers);\n      this.parseScene(deformers, geometryMap, materials);\n      return sceneGraph;\n    },\n    // Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n    // and details the connection type\n    parseConnections: function () {\n      var connectionMap = new Map();\n\n      if ('Connections' in fbxTree) {\n        var rawConnections = fbxTree.Connections.connections;\n        rawConnections.forEach(function (rawConnection) {\n          var fromID = rawConnection[0];\n          var toID = rawConnection[1];\n          var relationship = rawConnection[2];\n\n          if (!connectionMap.has(fromID)) {\n            connectionMap.set(fromID, {\n              parents: [],\n              children: []\n            });\n          }\n\n          var parentRelationship = {\n            ID: toID,\n            relationship: relationship\n          };\n          connectionMap.get(fromID).parents.push(parentRelationship);\n\n          if (!connectionMap.has(toID)) {\n            connectionMap.set(toID, {\n              parents: [],\n              children: []\n            });\n          }\n\n          var childRelationship = {\n            ID: fromID,\n            relationship: relationship\n          };\n          connectionMap.get(toID).children.push(childRelationship);\n        });\n      }\n\n      return connectionMap;\n    },\n    // Parse FBXTree.Objects.Video for embedded image data\n    // These images are connected to textures in FBXTree.Objects.Textures\n    // via FBXTree.Connections.\n    parseImages: function () {\n      var images = {};\n      var blobs = {};\n\n      if ('Video' in fbxTree.Objects) {\n        var videoNodes = fbxTree.Objects.Video;\n\n        for (var nodeID in videoNodes) {\n          var videoNode = videoNodes[nodeID];\n          var id = parseInt(nodeID);\n          images[id] = videoNode.RelativeFilename || videoNode.Filename; // raw image data is in videoNode.Content\n\n          if ('Content' in videoNode) {\n            var arrayBufferContent = videoNode.Content instanceof ArrayBuffer && videoNode.Content.byteLength > 0;\n            var base64Content = typeof videoNode.Content === 'string' && videoNode.Content !== '';\n\n            if (arrayBufferContent || base64Content) {\n              var image = this.parseImage(videoNodes[nodeID]);\n              blobs[videoNode.RelativeFilename || videoNode.Filename] = image;\n            }\n          }\n        }\n      }\n\n      for (var id in images) {\n        var filename = images[id];\n        if (blobs[filename] !== undefined) images[id] = blobs[filename];else images[id] = images[id].split('\\\\').pop();\n      }\n\n      return images;\n    },\n    // Parse embedded image data in FBXTree.Video.Content\n    parseImage: function (videoNode) {\n      var content = videoNode.Content;\n      var fileName = videoNode.RelativeFilename || videoNode.Filename;\n      var extension = fileName.slice(fileName.lastIndexOf('.') + 1).toLowerCase();\n      var type;\n\n      switch (extension) {\n        case 'bmp':\n          type = 'image/bmp';\n          break;\n\n        case 'jpg':\n        case 'jpeg':\n          type = 'image/jpeg';\n          break;\n\n        case 'png':\n          type = 'image/png';\n          break;\n\n        case 'tif':\n          type = 'image/tiff';\n          break;\n\n        case 'tga':\n          if (typeof THREE.TGALoader !== 'function') {\n            console.warn('FBXLoader: THREE.TGALoader is required to load TGA textures');\n            return;\n          } else {\n            if (THREE.Loader.Handlers.get('.tga') === null) {\n              THREE.Loader.Handlers.add(/\\.tga$/i, new THREE.TGALoader());\n            }\n\n            type = 'image/tga';\n            break;\n          }\n\n        default:\n          console.warn('FBXLoader: Image type \"' + extension + '\" is not supported.');\n          return;\n      }\n\n      if (typeof content === 'string') {\n        // ASCII format\n        return 'data:' + type + ';base64,' + content;\n      } else {\n        // Binary Format\n        var array = new Uint8Array(content);\n        return window.URL.createObjectURL(new Blob([array], {\n          type: type\n        }));\n      }\n    },\n    // Parse nodes in FBXTree.Objects.Texture\n    // These contain details such as UV scaling, cropping, rotation etc and are connected\n    // to images in FBXTree.Objects.Video\n    parseTextures: function (images) {\n      var textureMap = new Map();\n\n      if ('Texture' in fbxTree.Objects) {\n        var textureNodes = fbxTree.Objects.Texture;\n\n        for (var nodeID in textureNodes) {\n          var texture = this.parseTexture(textureNodes[nodeID], images);\n          textureMap.set(parseInt(nodeID), texture);\n        }\n      }\n\n      return textureMap;\n    },\n    // Parse individual node in FBXTree.Objects.Texture\n    parseTexture: function (textureNode, images) {\n      var texture = this.loadTexture(textureNode, images);\n      texture.ID = textureNode.id;\n      texture.name = textureNode.attrName;\n      var wrapModeU = textureNode.WrapModeU;\n      var wrapModeV = textureNode.WrapModeV;\n      var valueU = wrapModeU !== undefined ? wrapModeU.value : 0;\n      var valueV = wrapModeV !== undefined ? wrapModeV.value : 0; // http://download.autodesk.com/us/fbx/SDKdocs/FBX_SDK_Help/files/fbxsdkref/class_k_fbx_texture.html#889640e63e2e681259ea81061b85143a\n      // 0: repeat(default), 1: clamp\n\n      texture.wrapS = valueU === 0 ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n      texture.wrapT = valueV === 0 ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n\n      if ('Scaling' in textureNode) {\n        var values = textureNode.Scaling.value;\n        texture.repeat.x = values[0];\n        texture.repeat.y = values[1];\n      }\n\n      return texture;\n    },\n    // load a texture specified as a blob or data URI, or via an external URL using THREE.TextureLoader\n    loadTexture: function (textureNode, images) {\n      var fileName;\n      var currentPath = this.textureLoader.path;\n      var children = connections.get(textureNode.id).children;\n\n      if (children !== undefined && children.length > 0 && images[children[0].ID] !== undefined) {\n        fileName = images[children[0].ID];\n\n        if (fileName.indexOf('blob:') === 0 || fileName.indexOf('data:') === 0) {\n          this.textureLoader.setPath(undefined);\n        }\n      }\n\n      var texture;\n      var extension = textureNode.FileName.slice(-3).toLowerCase();\n\n      if (extension === 'tga') {\n        var loader = THREE.Loader.Handlers.get('.tga');\n\n        if (loader === null) {\n          console.warn('FBXLoader: TGALoader not found, creating empty placeholder texture for', fileName);\n          texture = new THREE.Texture();\n        } else {\n          texture = loader.load(fileName);\n        }\n      } else if (extension === 'psd') {\n        console.warn('FBXLoader: PSD textures are not supported, creating empty placeholder texture for', fileName);\n        texture = new THREE.Texture();\n      } else {\n        texture = this.textureLoader.load(fileName);\n      }\n\n      this.textureLoader.setPath(currentPath);\n      return texture;\n    },\n    // Parse nodes in FBXTree.Objects.Material\n    parseMaterials: function (textureMap) {\n      var materialMap = new Map();\n\n      if ('Material' in fbxTree.Objects) {\n        var materialNodes = fbxTree.Objects.Material;\n\n        for (var nodeID in materialNodes) {\n          var material = this.parseMaterial(materialNodes[nodeID], textureMap);\n          if (material !== null) materialMap.set(parseInt(nodeID), material);\n        }\n      }\n\n      return materialMap;\n    },\n    // Parse single node in FBXTree.Objects.Material\n    // Materials are connected to texture maps in FBXTree.Objects.Textures\n    // FBX format currently only supports Lambert and Phong shading models\n    parseMaterial: function (materialNode, textureMap) {\n      var ID = materialNode.id;\n      var name = materialNode.attrName;\n      var type = materialNode.ShadingModel; // Case where FBX wraps shading model in property object.\n\n      if (typeof type === 'object') {\n        type = type.value;\n      } // Ignore unused materials which don't have any connections.\n\n\n      if (!connections.has(ID)) return null;\n      var parameters = this.parseParameters(materialNode, textureMap, ID);\n      var material;\n\n      switch (type.toLowerCase()) {\n        case 'phong':\n          material = new THREE.MeshPhongMaterial();\n          break;\n\n        case 'lambert':\n          material = new THREE.MeshLambertMaterial();\n          break;\n\n        default:\n          console.warn('THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type);\n          material = new THREE.MeshPhongMaterial({\n            color: 0x3300ff\n          });\n          break;\n      }\n\n      material.setValues(parameters);\n      material.name = name;\n      return material;\n    },\n    // Parse FBX material and return parameters suitable for a three.js material\n    // Also parse the texture map and return any textures associated with the material\n    parseParameters: function (materialNode, textureMap, ID) {\n      var parameters = {};\n\n      if (materialNode.BumpFactor) {\n        parameters.bumpScale = materialNode.BumpFactor.value;\n      }\n\n      if (materialNode.Diffuse) {\n        parameters.color = new THREE.Color().fromArray(materialNode.Diffuse.value);\n      } else if (materialNode.DiffuseColor && materialNode.DiffuseColor.type === 'Color') {\n        // The blender exporter exports diffuse here instead of in materialNode.Diffuse\n        parameters.color = new THREE.Color().fromArray(materialNode.DiffuseColor.value);\n      }\n\n      if (materialNode.DisplacementFactor) {\n        parameters.displacementScale = materialNode.DisplacementFactor.value;\n      }\n\n      if (materialNode.Emissive) {\n        parameters.emissive = new THREE.Color().fromArray(materialNode.Emissive.value);\n      } else if (materialNode.EmissiveColor && materialNode.EmissiveColor.type === 'Color') {\n        // The blender exporter exports emissive color here instead of in materialNode.Emissive\n        parameters.emissive = new THREE.Color().fromArray(materialNode.EmissiveColor.value);\n      }\n\n      if (materialNode.EmissiveFactor) {\n        parameters.emissiveIntensity = parseFloat(materialNode.EmissiveFactor.value);\n      }\n\n      if (materialNode.Opacity) {\n        parameters.opacity = parseFloat(materialNode.Opacity.value);\n      }\n\n      if (parameters.opacity < 1.0) {\n        parameters.transparent = true;\n      }\n\n      if (materialNode.ReflectionFactor) {\n        parameters.reflectivity = materialNode.ReflectionFactor.value;\n      }\n\n      if (materialNode.Shininess) {\n        parameters.shininess = materialNode.Shininess.value;\n      }\n\n      if (materialNode.Specular) {\n        parameters.specular = new THREE.Color().fromArray(materialNode.Specular.value);\n      } else if (materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color') {\n        // The blender exporter exports specular color here instead of in materialNode.Specular\n        parameters.specular = new THREE.Color().fromArray(materialNode.SpecularColor.value);\n      }\n\n      var self = this;\n      connections.get(ID).children.forEach(function (child) {\n        var type = child.relationship;\n\n        switch (type) {\n          case 'Bump':\n            parameters.bumpMap = self.getTexture(textureMap, child.ID);\n            break;\n\n          case 'DiffuseColor':\n            parameters.map = self.getTexture(textureMap, child.ID);\n            break;\n\n          case 'DisplacementColor':\n            parameters.displacementMap = self.getTexture(textureMap, child.ID);\n            break;\n\n          case 'EmissiveColor':\n            parameters.emissiveMap = self.getTexture(textureMap, child.ID);\n            break;\n\n          case 'NormalMap':\n            parameters.normalMap = self.getTexture(textureMap, child.ID);\n            break;\n\n          case 'ReflectionColor':\n            parameters.envMap = self.getTexture(textureMap, child.ID);\n            parameters.envMap.mapping = THREE.EquirectangularReflectionMapping;\n            break;\n\n          case 'SpecularColor':\n            parameters.specularMap = self.getTexture(textureMap, child.ID);\n            break;\n\n          case 'TransparentColor':\n            parameters.alphaMap = self.getTexture(textureMap, child.ID);\n            parameters.transparent = true;\n            break;\n\n          case 'AmbientColor':\n          case 'ShininessExponent': // AKA glossiness map\n\n          case 'SpecularFactor': // AKA specularLevel\n\n          case 'VectorDisplacementColor': // NOTE: Seems to be a copy of DisplacementColor\n\n          default:\n            console.warn('THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type);\n            break;\n        }\n      });\n      return parameters;\n    },\n    // get a texture from the textureMap for use by a material.\n    getTexture: function (textureMap, id) {\n      // if the texture is a layered texture, just use the first layer and issue a warning\n      if ('LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture) {\n        console.warn('THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.');\n        id = connections.get(id).children[0].ID;\n      }\n\n      return textureMap.get(id);\n    },\n    // Parse nodes in FBXTree.Objects.Deformer\n    // Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n    // Generates map of Skeleton-like objects for use later when generating and binding skeletons.\n    parseDeformers: function () {\n      var skeletons = {};\n      var morphTargets = {};\n\n      if ('Deformer' in fbxTree.Objects) {\n        var DeformerNodes = fbxTree.Objects.Deformer;\n\n        for (var nodeID in DeformerNodes) {\n          var deformerNode = DeformerNodes[nodeID];\n          var relationships = connections.get(parseInt(nodeID));\n\n          if (deformerNode.attrType === 'Skin') {\n            var skeleton = this.parseSkeleton(relationships, DeformerNodes);\n            skeleton.ID = nodeID;\n            if (relationships.parents.length > 1) console.warn('THREE.FBXLoader: skeleton attached to more than one geometry is not supported.');\n            skeleton.geometryID = relationships.parents[0].ID;\n            skeletons[nodeID] = skeleton;\n          } else if (deformerNode.attrType === 'BlendShape') {\n            var morphTarget = {\n              id: nodeID\n            };\n            morphTarget.rawTargets = this.parseMorphTargets(relationships, DeformerNodes);\n            morphTarget.id = nodeID;\n            if (relationships.parents.length > 1) console.warn('THREE.FBXLoader: morph target attached to more than one geometry is not supported.');\n            morphTargets[nodeID] = morphTarget;\n          }\n        }\n      }\n\n      return {\n        skeletons: skeletons,\n        morphTargets: morphTargets\n      };\n    },\n    // Parse single nodes in FBXTree.Objects.Deformer\n    // The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\n    // Each skin node represents a skeleton and each cluster node represents a bone\n    parseSkeleton: function (relationships, deformerNodes) {\n      var rawBones = [];\n      relationships.children.forEach(function (child) {\n        var boneNode = deformerNodes[child.ID];\n        if (boneNode.attrType !== 'Cluster') return;\n        var rawBone = {\n          ID: child.ID,\n          indices: [],\n          weights: [],\n          transform: new THREE.Matrix4().fromArray(boneNode.Transform.a),\n          transformLink: new THREE.Matrix4().fromArray(boneNode.TransformLink.a),\n          linkMode: boneNode.Mode\n        };\n\n        if ('Indexes' in boneNode) {\n          rawBone.indices = boneNode.Indexes.a;\n          rawBone.weights = boneNode.Weights.a;\n        }\n\n        rawBones.push(rawBone);\n      });\n      return {\n        rawBones: rawBones,\n        bones: []\n      };\n    },\n    // The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\n    parseMorphTargets: function (relationships, deformerNodes) {\n      var rawMorphTargets = [];\n\n      for (var i = 0; i < relationships.children.length; i++) {\n        if (i === 8) {\n          console.warn('FBXLoader: maximum of 8 morph targets supported. Ignoring additional targets.');\n          break;\n        }\n\n        var child = relationships.children[i];\n        var morphTargetNode = deformerNodes[child.ID];\n        var rawMorphTarget = {\n          name: morphTargetNode.attrName,\n          initialWeight: morphTargetNode.DeformPercent,\n          id: morphTargetNode.id,\n          fullWeights: morphTargetNode.FullWeights.a\n        };\n        if (morphTargetNode.attrType !== 'BlendShapeChannel') return;\n        var targetRelationships = connections.get(parseInt(child.ID));\n        targetRelationships.children.forEach(function (child) {\n          if (child.relationship === undefined) rawMorphTarget.geoID = child.ID;\n        });\n        rawMorphTargets.push(rawMorphTarget);\n      }\n\n      return rawMorphTargets;\n    },\n    // create the main THREE.Group() to be returned by the loader\n    parseScene: function (deformers, geometryMap, materialMap) {\n      sceneGraph = new THREE.Group();\n      var modelMap = this.parseModels(deformers.skeletons, geometryMap, materialMap);\n      var modelNodes = fbxTree.Objects.Model;\n      var self = this;\n      modelMap.forEach(function (model) {\n        var modelNode = modelNodes[model.ID];\n        self.setLookAtProperties(model, modelNode);\n        var parentConnections = connections.get(model.ID).parents;\n        parentConnections.forEach(function (connection) {\n          var parent = modelMap.get(connection.ID);\n          if (parent !== undefined) parent.add(model);\n        });\n\n        if (model.parent === null) {\n          sceneGraph.add(model);\n        }\n      });\n      this.bindSkeleton(deformers.skeletons, geometryMap, modelMap);\n      this.createAmbientLight();\n      this.setupMorphMaterials();\n      var animations = new AnimationParser().parse(); // if all the models where already combined in a single group, just return that\n\n      if (sceneGraph.children.length === 1 && sceneGraph.children[0].isGroup) {\n        sceneGraph.children[0].animations = animations;\n        sceneGraph = sceneGraph.children[0];\n      }\n\n      sceneGraph.animations = animations;\n    },\n    // parse nodes in FBXTree.Objects.Model\n    parseModels: function (skeletons, geometryMap, materialMap) {\n      var modelMap = new Map();\n      var modelNodes = fbxTree.Objects.Model;\n\n      for (var nodeID in modelNodes) {\n        var id = parseInt(nodeID);\n        var node = modelNodes[nodeID];\n        var relationships = connections.get(id);\n        var model = this.buildSkeleton(relationships, skeletons, id, node.attrName);\n\n        if (!model) {\n          switch (node.attrType) {\n            case 'Camera':\n              model = this.createCamera(relationships);\n              break;\n\n            case 'Light':\n              model = this.createLight(relationships);\n              break;\n\n            case 'Mesh':\n              model = this.createMesh(relationships, geometryMap, materialMap);\n              break;\n\n            case 'NurbsCurve':\n              model = this.createCurve(relationships, geometryMap);\n              break;\n\n            case 'LimbNode': // usually associated with a Bone, however if a Bone was not created we'll make a Group instead\n\n            case 'Null':\n            default:\n              model = new THREE.Group();\n              break;\n          }\n\n          model.name = THREE.PropertyBinding.sanitizeNodeName(node.attrName);\n          model.ID = id;\n        }\n\n        this.setModelTransforms(model, node);\n        modelMap.set(id, model);\n      }\n\n      return modelMap;\n    },\n    buildSkeleton: function (relationships, skeletons, id, name) {\n      var bone = null;\n      relationships.parents.forEach(function (parent) {\n        for (var ID in skeletons) {\n          var skeleton = skeletons[ID];\n          skeleton.rawBones.forEach(function (rawBone, i) {\n            if (rawBone.ID === parent.ID) {\n              var subBone = bone;\n              bone = new THREE.Bone();\n              bone.matrixWorld.copy(rawBone.transformLink); // set name and id here - otherwise in cases where \"subBone\" is created it will not have a name / id\n\n              bone.name = THREE.PropertyBinding.sanitizeNodeName(name);\n              bone.ID = id;\n              skeleton.bones[i] = bone; // In cases where a bone is shared between multiple meshes\n              // duplicate the bone here and and it as a child of the first bone\n\n              if (subBone !== null) {\n                bone.add(subBone);\n              }\n            }\n          });\n        }\n      });\n      return bone;\n    },\n    // create a THREE.PerspectiveCamera or THREE.OrthographicCamera\n    createCamera: function (relationships) {\n      var model;\n      var cameraAttribute;\n      relationships.children.forEach(function (child) {\n        var attr = fbxTree.Objects.NodeAttribute[child.ID];\n\n        if (attr !== undefined) {\n          cameraAttribute = attr;\n        }\n      });\n\n      if (cameraAttribute === undefined) {\n        model = new THREE.Object3D();\n      } else {\n        var type = 0;\n\n        if (cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1) {\n          type = 1;\n        }\n\n        var nearClippingPlane = 1;\n\n        if (cameraAttribute.NearPlane !== undefined) {\n          nearClippingPlane = cameraAttribute.NearPlane.value / 1000;\n        }\n\n        var farClippingPlane = 1000;\n\n        if (cameraAttribute.FarPlane !== undefined) {\n          farClippingPlane = cameraAttribute.FarPlane.value / 1000;\n        }\n\n        var width = window.innerWidth;\n        var height = window.innerHeight;\n\n        if (cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined) {\n          width = cameraAttribute.AspectWidth.value;\n          height = cameraAttribute.AspectHeight.value;\n        }\n\n        var aspect = width / height;\n        var fov = 45;\n\n        if (cameraAttribute.FieldOfView !== undefined) {\n          fov = cameraAttribute.FieldOfView.value;\n        }\n\n        var focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n\n        switch (type) {\n          case 0:\n            // Perspective\n            model = new THREE.PerspectiveCamera(fov, aspect, nearClippingPlane, farClippingPlane);\n            if (focalLength !== null) model.setFocalLength(focalLength);\n            break;\n\n          case 1:\n            // Orthographic\n            model = new THREE.OrthographicCamera(-width / 2, width / 2, height / 2, -height / 2, nearClippingPlane, farClippingPlane);\n            break;\n\n          default:\n            console.warn('THREE.FBXLoader: Unknown camera type ' + type + '.');\n            model = new THREE.Object3D();\n            break;\n        }\n      }\n\n      return model;\n    },\n    // Create a THREE.DirectionalLight, THREE.PointLight or THREE.SpotLight\n    createLight: function (relationships) {\n      var model;\n      var lightAttribute;\n      relationships.children.forEach(function (child) {\n        var attr = fbxTree.Objects.NodeAttribute[child.ID];\n\n        if (attr !== undefined) {\n          lightAttribute = attr;\n        }\n      });\n\n      if (lightAttribute === undefined) {\n        model = new THREE.Object3D();\n      } else {\n        var type; // LightType can be undefined for Point lights\n\n        if (lightAttribute.LightType === undefined) {\n          type = 0;\n        } else {\n          type = lightAttribute.LightType.value;\n        }\n\n        var color = 0xffffff;\n\n        if (lightAttribute.Color !== undefined) {\n          color = new THREE.Color().fromArray(lightAttribute.Color.value);\n        }\n\n        var intensity = lightAttribute.Intensity === undefined ? 1 : lightAttribute.Intensity.value / 100; // light disabled\n\n        if (lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0) {\n          intensity = 0;\n        }\n\n        var distance = 0;\n\n        if (lightAttribute.FarAttenuationEnd !== undefined) {\n          if (lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0) {\n            distance = 0;\n          } else {\n            distance = lightAttribute.FarAttenuationEnd.value;\n          }\n        } // TODO: could this be calculated linearly from FarAttenuationStart to FarAttenuationEnd?\n\n\n        var decay = 1;\n\n        switch (type) {\n          case 0:\n            // Point\n            model = new THREE.PointLight(color, intensity, distance, decay);\n            break;\n\n          case 1:\n            // Directional\n            model = new THREE.DirectionalLight(color, intensity);\n            break;\n\n          case 2:\n            // Spot\n            var angle = Math.PI / 3;\n\n            if (lightAttribute.InnerAngle !== undefined) {\n              angle = THREE.Math.degToRad(lightAttribute.InnerAngle.value);\n            }\n\n            var penumbra = 0;\n\n            if (lightAttribute.OuterAngle !== undefined) {\n              // TODO: this is not correct - FBX calculates outer and inner angle in degrees\n              // with OuterAngle > InnerAngle && OuterAngle <= Math.PI\n              // while three.js uses a penumbra between (0, 1) to attenuate the inner angle\n              penumbra = THREE.Math.degToRad(lightAttribute.OuterAngle.value);\n              penumbra = Math.max(penumbra, 1);\n            }\n\n            model = new THREE.SpotLight(color, intensity, distance, angle, penumbra, decay);\n            break;\n\n          default:\n            console.warn('THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a THREE.PointLight.');\n            model = new THREE.PointLight(color, intensity);\n            break;\n        }\n\n        if (lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1) {\n          model.castShadow = true;\n        }\n      }\n\n      return model;\n    },\n    createMesh: function (relationships, geometryMap, materialMap) {\n      var model;\n      var geometry = null;\n      var material = null;\n      var materials = []; // get geometry and materials(s) from connections\n\n      relationships.children.forEach(function (child) {\n        if (geometryMap.has(child.ID)) {\n          geometry = geometryMap.get(child.ID);\n        }\n\n        if (materialMap.has(child.ID)) {\n          materials.push(materialMap.get(child.ID));\n        }\n      });\n\n      if (materials.length > 1) {\n        material = materials;\n      } else if (materials.length > 0) {\n        material = materials[0];\n      } else {\n        material = new THREE.MeshPhongMaterial({\n          color: 0xcccccc\n        });\n        materials.push(material);\n      }\n\n      if ('color' in geometry.attributes) {\n        materials.forEach(function (material) {\n          material.vertexColors = THREE.VertexColors;\n        });\n      }\n\n      if (geometry.FBX_Deformer) {\n        materials.forEach(function (material) {\n          material.skinning = true;\n        });\n        model = new THREE.SkinnedMesh(geometry, material);\n      } else {\n        model = new THREE.Mesh(geometry, material);\n      }\n\n      return model;\n    },\n    createCurve: function (relationships, geometryMap) {\n      var geometry = relationships.children.reduce(function (geo, child) {\n        if (geometryMap.has(child.ID)) geo = geometryMap.get(child.ID);\n        return geo;\n      }, null); // FBX does not list materials for Nurbs lines, so we'll just put our own in here.\n\n      var material = new THREE.LineBasicMaterial({\n        color: 0x3300ff,\n        linewidth: 1\n      });\n      return new THREE.Line(geometry, material);\n    },\n    // parse the model node for transform details and apply them to the model\n    setModelTransforms: function (model, modelNode) {\n      var transformData = {};\n      if ('RotationOrder' in modelNode) transformData.eulerOrder = parseInt(modelNode.RotationOrder.value);\n      if ('Lcl_Translation' in modelNode) transformData.translation = modelNode.Lcl_Translation.value;\n      if ('RotationOffset' in modelNode) transformData.rotationOffset = modelNode.RotationOffset.value;\n      if ('Lcl_Rotation' in modelNode) transformData.rotation = modelNode.Lcl_Rotation.value;\n      if ('PreRotation' in modelNode) transformData.preRotation = modelNode.PreRotation.value;\n      if ('PostRotation' in modelNode) transformData.postRotation = modelNode.PostRotation.value;\n      if ('Lcl_Scaling' in modelNode) transformData.scale = modelNode.Lcl_Scaling.value;\n      var transform = generateTransform(transformData);\n      model.applyMatrix(transform);\n    },\n    setLookAtProperties: function (model, modelNode) {\n      if ('LookAtProperty' in modelNode) {\n        var children = connections.get(model.ID).children;\n        children.forEach(function (child) {\n          if (child.relationship === 'LookAtProperty') {\n            var lookAtTarget = fbxTree.Objects.Model[child.ID];\n\n            if ('Lcl_Translation' in lookAtTarget) {\n              var pos = lookAtTarget.Lcl_Translation.value; // DirectionalLight, SpotLight\n\n              if (model.target !== undefined) {\n                model.target.position.fromArray(pos);\n                sceneGraph.add(model.target);\n              } else {\n                // Cameras and other Object3Ds\n                model.lookAt(new THREE.Vector3().fromArray(pos));\n              }\n            }\n          }\n        });\n      }\n    },\n    bindSkeleton: function (skeletons, geometryMap, modelMap) {\n      var bindMatrices = this.parsePoseNodes();\n\n      for (var ID in skeletons) {\n        var skeleton = skeletons[ID];\n        var parents = connections.get(parseInt(skeleton.ID)).parents;\n        parents.forEach(function (parent) {\n          if (geometryMap.has(parent.ID)) {\n            var geoID = parent.ID;\n            var geoRelationships = connections.get(geoID);\n            geoRelationships.parents.forEach(function (geoConnParent) {\n              if (modelMap.has(geoConnParent.ID)) {\n                var model = modelMap.get(geoConnParent.ID);\n                model.bind(new THREE.Skeleton(skeleton.bones), bindMatrices[geoConnParent.ID]);\n              }\n            });\n          }\n        });\n      }\n    },\n    parsePoseNodes: function () {\n      var bindMatrices = {};\n\n      if ('Pose' in fbxTree.Objects) {\n        var BindPoseNode = fbxTree.Objects.Pose;\n\n        for (var nodeID in BindPoseNode) {\n          if (BindPoseNode[nodeID].attrType === 'BindPose') {\n            var poseNodes = BindPoseNode[nodeID].PoseNode;\n\n            if (Array.isArray(poseNodes)) {\n              poseNodes.forEach(function (poseNode) {\n                bindMatrices[poseNode.Node] = new THREE.Matrix4().fromArray(poseNode.Matrix.a);\n              });\n            } else {\n              bindMatrices[poseNodes.Node] = new THREE.Matrix4().fromArray(poseNodes.Matrix.a);\n            }\n          }\n        }\n      }\n\n      return bindMatrices;\n    },\n    // Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light\n    createAmbientLight: function () {\n      if ('GlobalSettings' in fbxTree && 'AmbientColor' in fbxTree.GlobalSettings) {\n        var ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n        var r = ambientColor[0];\n        var g = ambientColor[1];\n        var b = ambientColor[2];\n\n        if (r !== 0 || g !== 0 || b !== 0) {\n          var color = new THREE.Color(r, g, b);\n          sceneGraph.add(new THREE.AmbientLight(color, 1));\n        }\n      }\n    },\n    setupMorphMaterials: function () {\n      sceneGraph.traverse(function (child) {\n        if (child.isMesh) {\n          if (child.geometry.morphAttributes.position || child.geometry.morphAttributes.normal) {\n            var uuid = child.uuid;\n            var matUuid = child.material.uuid; // if a geometry has morph targets, it cannot share the material with other geometries\n\n            var sharedMat = false;\n            sceneGraph.traverse(function (child) {\n              if (child.isMesh) {\n                if (child.material.uuid === matUuid && child.uuid !== uuid) sharedMat = true;\n              }\n            });\n            if (sharedMat === true) child.material = child.material.clone();\n            child.material.morphTargets = true;\n          }\n        }\n      });\n    }\n  }; // parse Geometry data from FBXTree and return map of BufferGeometries\n\n  function GeometryParser() {}\n\n  GeometryParser.prototype = {\n    constructor: GeometryParser,\n    // Parse nodes in FBXTree.Objects.Geometry\n    parse: function (deformers) {\n      var geometryMap = new Map();\n\n      if ('Geometry' in fbxTree.Objects) {\n        var geoNodes = fbxTree.Objects.Geometry;\n\n        for (var nodeID in geoNodes) {\n          var relationships = connections.get(parseInt(nodeID));\n          var geo = this.parseGeometry(relationships, geoNodes[nodeID], deformers);\n          geometryMap.set(parseInt(nodeID), geo);\n        }\n      }\n\n      return geometryMap;\n    },\n    // Parse single node in FBXTree.Objects.Geometry\n    parseGeometry: function (relationships, geoNode, deformers) {\n      switch (geoNode.attrType) {\n        case 'Mesh':\n          return this.parseMeshGeometry(relationships, geoNode, deformers);\n          break;\n\n        case 'NurbsCurve':\n          return this.parseNurbsGeometry(geoNode);\n          break;\n      }\n    },\n    // Parse single node mesh geometry in FBXTree.Objects.Geometry\n    parseMeshGeometry: function (relationships, geoNode, deformers) {\n      var skeletons = deformers.skeletons;\n      var morphTargets = deformers.morphTargets;\n      var modelNodes = relationships.parents.map(function (parent) {\n        return fbxTree.Objects.Model[parent.ID];\n      }); // don't create geometry if it is not associated with any models\n\n      if (modelNodes.length === 0) return;\n      var skeleton = relationships.children.reduce(function (skeleton, child) {\n        if (skeletons[child.ID] !== undefined) skeleton = skeletons[child.ID];\n        return skeleton;\n      }, null);\n      var morphTarget = relationships.children.reduce(function (morphTarget, child) {\n        if (morphTargets[child.ID] !== undefined) morphTarget = morphTargets[child.ID];\n        return morphTarget;\n      }, null); // TODO: if there is more than one model associated with the geometry, AND the models have\n      // different geometric transforms, then this will cause problems\n      // if ( modelNodes.length > 1 ) { }\n      // For now just assume one model and get the preRotations from that\n\n      var modelNode = modelNodes[0];\n      var transformData = {};\n      if ('RotationOrder' in modelNode) transformData.eulerOrder = modelNode.RotationOrder.value;\n      if ('GeometricTranslation' in modelNode) transformData.translation = modelNode.GeometricTranslation.value;\n      if ('GeometricRotation' in modelNode) transformData.rotation = modelNode.GeometricRotation.value;\n      if ('GeometricScaling' in modelNode) transformData.scale = modelNode.GeometricScaling.value;\n      var transform = generateTransform(transformData);\n      return this.genGeometry(geoNode, skeleton, morphTarget, transform);\n    },\n    // Generate a THREE.BufferGeometry from a node in FBXTree.Objects.Geometry\n    genGeometry: function (geoNode, skeleton, morphTarget, preTransform) {\n      var geo = new THREE.BufferGeometry();\n      if (geoNode.attrName) geo.name = geoNode.attrName;\n      var geoInfo = this.parseGeoNode(geoNode, skeleton);\n      var buffers = this.genBuffers(geoInfo);\n      var positionAttribute = new THREE.Float32BufferAttribute(buffers.vertex, 3);\n      preTransform.applyToBufferAttribute(positionAttribute);\n      geo.addAttribute('position', positionAttribute);\n\n      if (buffers.colors.length > 0) {\n        geo.addAttribute('color', new THREE.Float32BufferAttribute(buffers.colors, 3));\n      }\n\n      if (skeleton) {\n        geo.addAttribute('skinIndex', new THREE.Uint16BufferAttribute(buffers.weightsIndices, 4));\n        geo.addAttribute('skinWeight', new THREE.Float32BufferAttribute(buffers.vertexWeights, 4)); // used later to bind the skeleton to the model\n\n        geo.FBX_Deformer = skeleton;\n      }\n\n      if (buffers.normal.length > 0) {\n        var normalAttribute = new THREE.Float32BufferAttribute(buffers.normal, 3);\n        var normalMatrix = new THREE.Matrix3().getNormalMatrix(preTransform);\n        normalMatrix.applyToBufferAttribute(normalAttribute);\n        geo.addAttribute('normal', normalAttribute);\n      }\n\n      buffers.uvs.forEach(function (uvBuffer, i) {\n        // subsequent uv buffers are called 'uv1', 'uv2', ...\n        var name = 'uv' + (i + 1).toString(); // the first uv buffer is just called 'uv'\n\n        if (i === 0) {\n          name = 'uv';\n        }\n\n        geo.addAttribute(name, new THREE.Float32BufferAttribute(buffers.uvs[i], 2));\n      });\n\n      if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n        // Convert the material indices of each vertex into rendering groups on the geometry.\n        var prevMaterialIndex = buffers.materialIndex[0];\n        var startIndex = 0;\n        buffers.materialIndex.forEach(function (currentIndex, i) {\n          if (currentIndex !== prevMaterialIndex) {\n            geo.addGroup(startIndex, i - startIndex, prevMaterialIndex);\n            prevMaterialIndex = currentIndex;\n            startIndex = i;\n          }\n        }); // the loop above doesn't add the last group, do that here.\n\n        if (geo.groups.length > 0) {\n          var lastGroup = geo.groups[geo.groups.length - 1];\n          var lastIndex = lastGroup.start + lastGroup.count;\n\n          if (lastIndex !== buffers.materialIndex.length) {\n            geo.addGroup(lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex);\n          }\n        } // case where there are multiple materials but the whole geometry is only\n        // using one of them\n\n\n        if (geo.groups.length === 0) {\n          geo.addGroup(0, buffers.materialIndex.length, buffers.materialIndex[0]);\n        }\n      }\n\n      this.addMorphTargets(geo, geoNode, morphTarget, preTransform);\n      return geo;\n    },\n    parseGeoNode: function (geoNode, skeleton) {\n      var geoInfo = {};\n      geoInfo.vertexPositions = geoNode.Vertices !== undefined ? geoNode.Vertices.a : [];\n      geoInfo.vertexIndices = geoNode.PolygonVertexIndex !== undefined ? geoNode.PolygonVertexIndex.a : [];\n\n      if (geoNode.LayerElementColor) {\n        geoInfo.color = this.parseVertexColors(geoNode.LayerElementColor[0]);\n      }\n\n      if (geoNode.LayerElementMaterial) {\n        geoInfo.material = this.parseMaterialIndices(geoNode.LayerElementMaterial[0]);\n      }\n\n      if (geoNode.LayerElementNormal) {\n        geoInfo.normal = this.parseNormals(geoNode.LayerElementNormal[0]);\n      }\n\n      if (geoNode.LayerElementUV) {\n        geoInfo.uv = [];\n        var i = 0;\n\n        while (geoNode.LayerElementUV[i]) {\n          geoInfo.uv.push(this.parseUVs(geoNode.LayerElementUV[i]));\n          i++;\n        }\n      }\n\n      geoInfo.weightTable = {};\n\n      if (skeleton !== null) {\n        geoInfo.skeleton = skeleton;\n        skeleton.rawBones.forEach(function (rawBone, i) {\n          // loop over the bone's vertex indices and weights\n          rawBone.indices.forEach(function (index, j) {\n            if (geoInfo.weightTable[index] === undefined) geoInfo.weightTable[index] = [];\n            geoInfo.weightTable[index].push({\n              id: i,\n              weight: rawBone.weights[j]\n            });\n          });\n        });\n      }\n\n      return geoInfo;\n    },\n    genBuffers: function (geoInfo) {\n      var buffers = {\n        vertex: [],\n        normal: [],\n        colors: [],\n        uvs: [],\n        materialIndex: [],\n        vertexWeights: [],\n        weightsIndices: []\n      };\n      var polygonIndex = 0;\n      var faceLength = 0;\n      var displayedWeightsWarning = false; // these will hold data for a single face\n\n      var facePositionIndexes = [];\n      var faceNormals = [];\n      var faceColors = [];\n      var faceUVs = [];\n      var faceWeights = [];\n      var faceWeightIndices = [];\n      var self = this;\n      geoInfo.vertexIndices.forEach(function (vertexIndex, polygonVertexIndex) {\n        var endOfFace = false; // Face index and vertex index arrays are combined in a single array\n        // A cube with quad faces looks like this:\n        // PolygonVertexIndex: *24 {\n        //  a: 0, 1, 3, -3, 2, 3, 5, -5, 4, 5, 7, -7, 6, 7, 1, -1, 1, 7, 5, -4, 6, 0, 2, -5\n        //  }\n        // Negative numbers mark the end of a face - first face here is 0, 1, 3, -3\n        // to find index of last vertex bit shift the index: ^ - 1\n\n        if (vertexIndex < 0) {\n          vertexIndex = vertexIndex ^ -1; // equivalent to ( x * -1 ) - 1\n\n          endOfFace = true;\n        }\n\n        var weightIndices = [];\n        var weights = [];\n        facePositionIndexes.push(vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2);\n\n        if (geoInfo.color) {\n          var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color);\n          faceColors.push(data[0], data[1], data[2]);\n        }\n\n        if (geoInfo.skeleton) {\n          if (geoInfo.weightTable[vertexIndex] !== undefined) {\n            geoInfo.weightTable[vertexIndex].forEach(function (wt) {\n              weights.push(wt.weight);\n              weightIndices.push(wt.id);\n            });\n          }\n\n          if (weights.length > 4) {\n            if (!displayedWeightsWarning) {\n              console.warn('THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.');\n              displayedWeightsWarning = true;\n            }\n\n            var wIndex = [0, 0, 0, 0];\n            var Weight = [0, 0, 0, 0];\n            weights.forEach(function (weight, weightIndex) {\n              var currentWeight = weight;\n              var currentIndex = weightIndices[weightIndex];\n              Weight.forEach(function (comparedWeight, comparedWeightIndex, comparedWeightArray) {\n                if (currentWeight > comparedWeight) {\n                  comparedWeightArray[comparedWeightIndex] = currentWeight;\n                  currentWeight = comparedWeight;\n                  var tmp = wIndex[comparedWeightIndex];\n                  wIndex[comparedWeightIndex] = currentIndex;\n                  currentIndex = tmp;\n                }\n              });\n            });\n            weightIndices = wIndex;\n            weights = Weight;\n          } // if the weight array is shorter than 4 pad with 0s\n\n\n          while (weights.length < 4) {\n            weights.push(0);\n            weightIndices.push(0);\n          }\n\n          for (var i = 0; i < 4; ++i) {\n            faceWeights.push(weights[i]);\n            faceWeightIndices.push(weightIndices[i]);\n          }\n        }\n\n        if (geoInfo.normal) {\n          var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal);\n          faceNormals.push(data[0], data[1], data[2]);\n        }\n\n        if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n          var materialIndex = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material)[0];\n        }\n\n        if (geoInfo.uv) {\n          geoInfo.uv.forEach(function (uv, i) {\n            var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, uv);\n\n            if (faceUVs[i] === undefined) {\n              faceUVs[i] = [];\n            }\n\n            faceUVs[i].push(data[0]);\n            faceUVs[i].push(data[1]);\n          });\n        }\n\n        faceLength++;\n\n        if (endOfFace) {\n          self.genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength);\n          polygonIndex++;\n          faceLength = 0; // reset arrays for the next face\n\n          facePositionIndexes = [];\n          faceNormals = [];\n          faceColors = [];\n          faceUVs = [];\n          faceWeights = [];\n          faceWeightIndices = [];\n        }\n      });\n      return buffers;\n    },\n    // Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\n    genFace: function (buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength) {\n      for (var i = 2; i < faceLength; i++) {\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[0]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[2]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 2]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 2]]);\n\n        if (geoInfo.skeleton) {\n          buffers.vertexWeights.push(faceWeights[0]);\n          buffers.vertexWeights.push(faceWeights[1]);\n          buffers.vertexWeights.push(faceWeights[2]);\n          buffers.vertexWeights.push(faceWeights[3]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 1]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 2]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 3]);\n          buffers.vertexWeights.push(faceWeights[i * 4]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 1]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 2]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 3]);\n          buffers.weightsIndices.push(faceWeightIndices[0]);\n          buffers.weightsIndices.push(faceWeightIndices[1]);\n          buffers.weightsIndices.push(faceWeightIndices[2]);\n          buffers.weightsIndices.push(faceWeightIndices[3]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 1]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 2]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 3]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 1]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 2]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 3]);\n        }\n\n        if (geoInfo.color) {\n          buffers.colors.push(faceColors[0]);\n          buffers.colors.push(faceColors[1]);\n          buffers.colors.push(faceColors[2]);\n          buffers.colors.push(faceColors[(i - 1) * 3]);\n          buffers.colors.push(faceColors[(i - 1) * 3 + 1]);\n          buffers.colors.push(faceColors[(i - 1) * 3 + 2]);\n          buffers.colors.push(faceColors[i * 3]);\n          buffers.colors.push(faceColors[i * 3 + 1]);\n          buffers.colors.push(faceColors[i * 3 + 2]);\n        }\n\n        if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n          buffers.materialIndex.push(materialIndex);\n          buffers.materialIndex.push(materialIndex);\n          buffers.materialIndex.push(materialIndex);\n        }\n\n        if (geoInfo.normal) {\n          buffers.normal.push(faceNormals[0]);\n          buffers.normal.push(faceNormals[1]);\n          buffers.normal.push(faceNormals[2]);\n          buffers.normal.push(faceNormals[(i - 1) * 3]);\n          buffers.normal.push(faceNormals[(i - 1) * 3 + 1]);\n          buffers.normal.push(faceNormals[(i - 1) * 3 + 2]);\n          buffers.normal.push(faceNormals[i * 3]);\n          buffers.normal.push(faceNormals[i * 3 + 1]);\n          buffers.normal.push(faceNormals[i * 3 + 2]);\n        }\n\n        if (geoInfo.uv) {\n          geoInfo.uv.forEach(function (uv, j) {\n            if (buffers.uvs[j] === undefined) buffers.uvs[j] = [];\n            buffers.uvs[j].push(faceUVs[j][0]);\n            buffers.uvs[j].push(faceUVs[j][1]);\n            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2]);\n            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2 + 1]);\n            buffers.uvs[j].push(faceUVs[j][i * 2]);\n            buffers.uvs[j].push(faceUVs[j][i * 2 + 1]);\n          });\n        }\n      }\n    },\n    addMorphTargets: function (parentGeo, parentGeoNode, morphTarget, preTransform) {\n      if (morphTarget === null) return;\n      parentGeo.morphAttributes.position = [];\n      parentGeo.morphAttributes.normal = [];\n      var self = this;\n      morphTarget.rawTargets.forEach(function (rawTarget) {\n        var morphGeoNode = fbxTree.Objects.Geometry[rawTarget.geoID];\n\n        if (morphGeoNode !== undefined) {\n          self.genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform);\n        }\n      });\n    },\n    // a morph geometry node is similar to a standard  node, and the node is also contained\n    // in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\n    // and a special attribute Index defining which vertices of the original geometry are affected\n    // Normal and position attributes only have data for the vertices that are affected by the morph\n    genMorphGeometry: function (parentGeo, parentGeoNode, morphGeoNode, preTransform) {\n      var morphGeo = new THREE.BufferGeometry();\n      if (morphGeoNode.attrName) morphGeo.name = morphGeoNode.attrName;\n      var vertexIndices = parentGeoNode.PolygonVertexIndex !== undefined ? parentGeoNode.PolygonVertexIndex.a : []; // make a copy of the parent's vertex positions\n\n      var vertexPositions = parentGeoNode.Vertices !== undefined ? parentGeoNode.Vertices.a.slice() : [];\n      var morphPositions = morphGeoNode.Vertices !== undefined ? morphGeoNode.Vertices.a : [];\n      var indices = morphGeoNode.Indexes !== undefined ? morphGeoNode.Indexes.a : [];\n\n      for (var i = 0; i < indices.length; i++) {\n        var morphIndex = indices[i] * 3; // FBX format uses blend shapes rather than morph targets. This can be converted\n        // by additively combining the blend shape positions with the original geometry's positions\n\n        vertexPositions[morphIndex] += morphPositions[i * 3];\n        vertexPositions[morphIndex + 1] += morphPositions[i * 3 + 1];\n        vertexPositions[morphIndex + 2] += morphPositions[i * 3 + 2];\n      } // TODO: add morph normal support\n\n\n      var morphGeoInfo = {\n        vertexIndices: vertexIndices,\n        vertexPositions: vertexPositions\n      };\n      var morphBuffers = this.genBuffers(morphGeoInfo);\n      var positionAttribute = new THREE.Float32BufferAttribute(morphBuffers.vertex, 3);\n      positionAttribute.name = morphGeoNode.attrName;\n      preTransform.applyToBufferAttribute(positionAttribute);\n      parentGeo.morphAttributes.position.push(positionAttribute);\n    },\n    // Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\n    parseNormals: function (NormalNode) {\n      var mappingType = NormalNode.MappingInformationType;\n      var referenceType = NormalNode.ReferenceInformationType;\n      var buffer = NormalNode.Normals.a;\n      var indexBuffer = [];\n\n      if (referenceType === 'IndexToDirect') {\n        if ('NormalIndex' in NormalNode) {\n          indexBuffer = NormalNode.NormalIndex.a;\n        } else if ('NormalsIndex' in NormalNode) {\n          indexBuffer = NormalNode.NormalsIndex.a;\n        }\n      }\n\n      return {\n        dataSize: 3,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    },\n    // Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\n    parseUVs: function (UVNode) {\n      var mappingType = UVNode.MappingInformationType;\n      var referenceType = UVNode.ReferenceInformationType;\n      var buffer = UVNode.UV.a;\n      var indexBuffer = [];\n\n      if (referenceType === 'IndexToDirect') {\n        indexBuffer = UVNode.UVIndex.a;\n      }\n\n      return {\n        dataSize: 2,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    },\n    // Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\n    parseVertexColors: function (ColorNode) {\n      var mappingType = ColorNode.MappingInformationType;\n      var referenceType = ColorNode.ReferenceInformationType;\n      var buffer = ColorNode.Colors.a;\n      var indexBuffer = [];\n\n      if (referenceType === 'IndexToDirect') {\n        indexBuffer = ColorNode.ColorIndex.a;\n      }\n\n      return {\n        dataSize: 4,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    },\n    // Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\n    parseMaterialIndices: function (MaterialNode) {\n      var mappingType = MaterialNode.MappingInformationType;\n      var referenceType = MaterialNode.ReferenceInformationType;\n\n      if (mappingType === 'NoMappingInformation') {\n        return {\n          dataSize: 1,\n          buffer: [0],\n          indices: [0],\n          mappingType: 'AllSame',\n          referenceType: referenceType\n        };\n      }\n\n      var materialIndexBuffer = MaterialNode.Materials.a; // Since materials are stored as indices, there's a bit of a mismatch between FBX and what\n      // we expect.So we create an intermediate buffer that points to the index in the buffer,\n      // for conforming with the other functions we've written for other data.\n\n      var materialIndices = [];\n\n      for (var i = 0; i < materialIndexBuffer.length; ++i) {\n        materialIndices.push(i);\n      }\n\n      return {\n        dataSize: 1,\n        buffer: materialIndexBuffer,\n        indices: materialIndices,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    },\n    // Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\n    parseNurbsGeometry: function (geoNode) {\n      if (THREE.NURBSCurve === undefined) {\n        console.error('THREE.FBXLoader: The loader relies on THREE.NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.');\n        return new THREE.BufferGeometry();\n      }\n\n      var order = parseInt(geoNode.Order);\n\n      if (isNaN(order)) {\n        console.error('THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id);\n        return new THREE.BufferGeometry();\n      }\n\n      var degree = order - 1;\n      var knots = geoNode.KnotVector.a;\n      var controlPoints = [];\n      var pointsValues = geoNode.Points.a;\n\n      for (var i = 0, l = pointsValues.length; i < l; i += 4) {\n        controlPoints.push(new THREE.Vector4().fromArray(pointsValues, i));\n      }\n\n      var startKnot, endKnot;\n\n      if (geoNode.Form === 'Closed') {\n        controlPoints.push(controlPoints[0]);\n      } else if (geoNode.Form === 'Periodic') {\n        startKnot = degree;\n        endKnot = knots.length - 1 - startKnot;\n\n        for (var i = 0; i < degree; ++i) {\n          controlPoints.push(controlPoints[i]);\n        }\n      }\n\n      var curve = new THREE.NURBSCurve(degree, knots, controlPoints, startKnot, endKnot);\n      var vertices = curve.getPoints(controlPoints.length * 7);\n      var positions = new Float32Array(vertices.length * 3);\n      vertices.forEach(function (vertex, i) {\n        vertex.toArray(positions, i * 3);\n      });\n      var geometry = new THREE.BufferGeometry();\n      geometry.addAttribute('position', new THREE.BufferAttribute(positions, 3));\n      return geometry;\n    }\n  }; // parse animation data from FBXTree\n\n  function AnimationParser() {}\n\n  AnimationParser.prototype = {\n    constructor: AnimationParser,\n    // take raw animation clips and turn them into three.js animation clips\n    parse: function () {\n      var animationClips = [];\n      var rawClips = this.parseClips();\n      if (rawClips === undefined) return animationClips;\n\n      for (var key in rawClips) {\n        var rawClip = rawClips[key];\n        var clip = this.addClip(rawClip);\n        animationClips.push(clip);\n      }\n\n      return animationClips;\n    },\n    parseClips: function () {\n      // since the actual transformation data is stored in FBXTree.Objects.AnimationCurve,\n      // if this is undefined we can safely assume there are no animations\n      if (fbxTree.Objects.AnimationCurve === undefined) return undefined;\n      var curveNodesMap = this.parseAnimationCurveNodes();\n      this.parseAnimationCurves(curveNodesMap);\n      var layersMap = this.parseAnimationLayers(curveNodesMap);\n      var rawClips = this.parseAnimStacks(layersMap);\n      return rawClips;\n    },\n    // parse nodes in FBXTree.Objects.AnimationCurveNode\n    // each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\n    // and is referenced by an AnimationLayer\n    parseAnimationCurveNodes: function () {\n      var rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n      var curveNodesMap = new Map();\n\n      for (var nodeID in rawCurveNodes) {\n        var rawCurveNode = rawCurveNodes[nodeID];\n\n        if (rawCurveNode.attrName.match(/S|R|T|DeformPercent/) !== null) {\n          var curveNode = {\n            id: rawCurveNode.id,\n            attr: rawCurveNode.attrName,\n            curves: {}\n          };\n          curveNodesMap.set(curveNode.id, curveNode);\n        }\n      }\n\n      return curveNodesMap;\n    },\n    // parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\n    // previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\n    // axis ( e.g. times and values of x rotation)\n    parseAnimationCurves: function (curveNodesMap) {\n      var rawCurves = fbxTree.Objects.AnimationCurve; // TODO: Many values are identical up to roundoff error, but won't be optimised\n      // e.g. position times: [0, 0.4, 0. 8]\n      // position values: [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.235384487103147e-7, 93.67520904541016, -0.9982695579528809]\n      // clearly, this should be optimised to\n      // times: [0], positions [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809]\n      // this shows up in nearly every FBX file, and generally time array is length > 100\n\n      for (var nodeID in rawCurves) {\n        var animationCurve = {\n          id: rawCurves[nodeID].id,\n          times: rawCurves[nodeID].KeyTime.a.map(convertFBXTimeToSeconds),\n          values: rawCurves[nodeID].KeyValueFloat.a\n        };\n        var relationships = connections.get(animationCurve.id);\n\n        if (relationships !== undefined) {\n          var animationCurveID = relationships.parents[0].ID;\n          var animationCurveRelationship = relationships.parents[0].relationship;\n\n          if (animationCurveRelationship.match(/X/)) {\n            curveNodesMap.get(animationCurveID).curves['x'] = animationCurve;\n          } else if (animationCurveRelationship.match(/Y/)) {\n            curveNodesMap.get(animationCurveID).curves['y'] = animationCurve;\n          } else if (animationCurveRelationship.match(/Z/)) {\n            curveNodesMap.get(animationCurveID).curves['z'] = animationCurve;\n          } else if (animationCurveRelationship.match(/d|DeformPercent/) && curveNodesMap.has(animationCurveID)) {\n            curveNodesMap.get(animationCurveID).curves['morph'] = animationCurve;\n          }\n        }\n      }\n    },\n    // parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\n    // to various AnimationCurveNodes and is referenced by an AnimationStack node\n    // note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\n    parseAnimationLayers: function (curveNodesMap) {\n      var rawLayers = fbxTree.Objects.AnimationLayer;\n      var layersMap = new Map();\n\n      for (var nodeID in rawLayers) {\n        var layerCurveNodes = [];\n        var connection = connections.get(parseInt(nodeID));\n\n        if (connection !== undefined) {\n          // all the animationCurveNodes used in the layer\n          var children = connection.children;\n          var self = this;\n          children.forEach(function (child, i) {\n            if (curveNodesMap.has(child.ID)) {\n              var curveNode = curveNodesMap.get(child.ID); // check that the curves are defined for at least one axis, otherwise ignore the curveNode\n\n              if (curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined) {\n                if (layerCurveNodes[i] === undefined) {\n                  var modelID;\n                  connections.get(child.ID).parents.forEach(function (parent) {\n                    if (parent.relationship !== undefined) modelID = parent.ID;\n                  });\n                  var rawModel = fbxTree.Objects.Model[modelID.toString()];\n                  var node = {\n                    modelName: THREE.PropertyBinding.sanitizeNodeName(rawModel.attrName),\n                    initialPosition: [0, 0, 0],\n                    initialRotation: [0, 0, 0],\n                    initialScale: [1, 1, 1],\n                    transform: self.getModelAnimTransform(rawModel)\n                  }; // if the animated model is pre rotated, we'll have to apply the pre rotations to every\n                  // animation value as well\n\n                  if ('PreRotation' in rawModel) node.preRotations = rawModel.PreRotation.value;\n                  if ('PostRotation' in rawModel) node.postRotations = rawModel.PostRotation.value;\n                  layerCurveNodes[i] = node;\n                }\n\n                layerCurveNodes[i][curveNode.attr] = curveNode;\n              } else if (curveNode.curves.morph !== undefined) {\n                if (layerCurveNodes[i] === undefined) {\n                  var deformerID;\n                  connections.get(child.ID).parents.forEach(function (parent) {\n                    if (parent.relationship !== undefined) deformerID = parent.ID;\n                  });\n                  var morpherID = connections.get(deformerID).parents[0].ID;\n                  var geoID = connections.get(morpherID).parents[0].ID; // assuming geometry is not used in more than one model\n\n                  var modelID = connections.get(geoID).parents[0].ID;\n                  var rawModel = fbxTree.Objects.Model[modelID];\n                  var node = {\n                    modelName: THREE.PropertyBinding.sanitizeNodeName(rawModel.attrName),\n                    morphName: fbxTree.Objects.Deformer[deformerID].attrName\n                  };\n                  layerCurveNodes[i] = node;\n                }\n\n                layerCurveNodes[i][curveNode.attr] = curveNode;\n              }\n            }\n          });\n          layersMap.set(parseInt(nodeID), layerCurveNodes);\n        }\n      }\n\n      return layersMap;\n    },\n    getModelAnimTransform: function (modelNode) {\n      var transformData = {};\n      if ('RotationOrder' in modelNode) transformData.eulerOrder = parseInt(modelNode.RotationOrder.value);\n      if ('Lcl_Translation' in modelNode) transformData.translation = modelNode.Lcl_Translation.value;\n      if ('RotationOffset' in modelNode) transformData.rotationOffset = modelNode.RotationOffset.value;\n      if ('Lcl_Rotation' in modelNode) transformData.rotation = modelNode.Lcl_Rotation.value;\n      if ('PreRotation' in modelNode) transformData.preRotation = modelNode.PreRotation.value;\n      if ('PostRotation' in modelNode) transformData.postRotation = modelNode.PostRotation.value;\n      if ('Lcl_Scaling' in modelNode) transformData.scale = modelNode.Lcl_Scaling.value;\n      return generateTransform(transformData);\n    },\n    // parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\n    // hierarchy. Each Stack node will be used to create a THREE.AnimationClip\n    parseAnimStacks: function (layersMap) {\n      var rawStacks = fbxTree.Objects.AnimationStack; // connect the stacks (clips) up to the layers\n\n      var rawClips = {};\n\n      for (var nodeID in rawStacks) {\n        var children = connections.get(parseInt(nodeID)).children;\n\n        if (children.length > 1) {\n          // it seems like stacks will always be associated with a single layer. But just in case there are files\n          // where there are multiple layers per stack, we'll display a warning\n          console.warn('THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.');\n        }\n\n        var layer = layersMap.get(children[0].ID);\n        rawClips[nodeID] = {\n          name: rawStacks[nodeID].attrName,\n          layer: layer\n        };\n      }\n\n      return rawClips;\n    },\n    addClip: function (rawClip) {\n      var tracks = [];\n      var self = this;\n      rawClip.layer.forEach(function (rawTracks) {\n        tracks = tracks.concat(self.generateTracks(rawTracks));\n      });\n      return new THREE.AnimationClip(rawClip.name, -1, tracks);\n    },\n    generateTracks: function (rawTracks) {\n      var tracks = [];\n      var initialPosition = new THREE.Vector3();\n      var initialRotation = new THREE.Quaternion();\n      var initialScale = new THREE.Vector3();\n      if (rawTracks.transform) rawTracks.transform.decompose(initialPosition, initialRotation, initialScale);\n      initialPosition = initialPosition.toArray();\n      initialRotation = new THREE.Euler().setFromQuaternion(initialRotation).toArray(); // todo: euler order\n\n      initialScale = initialScale.toArray();\n\n      if (rawTracks.T !== undefined && Object.keys(rawTracks.T.curves).length > 0) {\n        var positionTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.T.curves, initialPosition, 'position');\n        if (positionTrack !== undefined) tracks.push(positionTrack);\n      }\n\n      if (rawTracks.R !== undefined && Object.keys(rawTracks.R.curves).length > 0) {\n        var rotationTrack = this.generateRotationTrack(rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotations, rawTracks.postRotations);\n        if (rotationTrack !== undefined) tracks.push(rotationTrack);\n      }\n\n      if (rawTracks.S !== undefined && Object.keys(rawTracks.S.curves).length > 0) {\n        var scaleTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale');\n        if (scaleTrack !== undefined) tracks.push(scaleTrack);\n      }\n\n      if (rawTracks.DeformPercent !== undefined) {\n        var morphTrack = this.generateMorphTrack(rawTracks);\n        if (morphTrack !== undefined) tracks.push(morphTrack);\n      }\n\n      return tracks;\n    },\n    generateVectorTrack: function (modelName, curves, initialValue, type) {\n      var times = this.getTimesForAllAxes(curves);\n      var values = this.getKeyframeTrackValues(times, curves, initialValue);\n      return new THREE.VectorKeyframeTrack(modelName + '.' + type, times, values);\n    },\n    generateRotationTrack: function (modelName, curves, initialValue, preRotations, postRotations) {\n      if (curves.x !== undefined) {\n        this.interpolateRotations(curves.x);\n        curves.x.values = curves.x.values.map(THREE.Math.degToRad);\n      }\n\n      if (curves.y !== undefined) {\n        this.interpolateRotations(curves.y);\n        curves.y.values = curves.y.values.map(THREE.Math.degToRad);\n      }\n\n      if (curves.z !== undefined) {\n        this.interpolateRotations(curves.z);\n        curves.z.values = curves.z.values.map(THREE.Math.degToRad);\n      }\n\n      var times = this.getTimesForAllAxes(curves);\n      var values = this.getKeyframeTrackValues(times, curves, initialValue);\n\n      if (preRotations !== undefined) {\n        preRotations = preRotations.map(THREE.Math.degToRad);\n        preRotations.push('ZYX');\n        preRotations = new THREE.Euler().fromArray(preRotations);\n        preRotations = new THREE.Quaternion().setFromEuler(preRotations);\n      }\n\n      if (postRotations !== undefined) {\n        postRotations = postRotations.map(THREE.Math.degToRad);\n        postRotations.push('ZYX');\n        postRotations = new THREE.Euler().fromArray(postRotations);\n        postRotations = new THREE.Quaternion().setFromEuler(postRotations).inverse();\n      }\n\n      var quaternion = new THREE.Quaternion();\n      var euler = new THREE.Euler();\n      var quaternionValues = [];\n\n      for (var i = 0; i < values.length; i += 3) {\n        euler.set(values[i], values[i + 1], values[i + 2], 'ZYX');\n        quaternion.setFromEuler(euler);\n        if (preRotations !== undefined) quaternion.premultiply(preRotations);\n        if (postRotations !== undefined) quaternion.multiply(postRotations);\n        quaternion.toArray(quaternionValues, i / 3 * 4);\n      }\n\n      return new THREE.QuaternionKeyframeTrack(modelName + '.quaternion', times, quaternionValues);\n    },\n    generateMorphTrack: function (rawTracks) {\n      var curves = rawTracks.DeformPercent.curves.morph;\n      var values = curves.values.map(function (val) {\n        return val / 100;\n      });\n      var morphNum = sceneGraph.getObjectByName(rawTracks.modelName).morphTargetDictionary[rawTracks.morphName];\n      return new THREE.NumberKeyframeTrack(rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']', curves.times, values);\n    },\n    // For all animated objects, times are defined separately for each axis\n    // Here we'll combine the times into one sorted array without duplicates\n    getTimesForAllAxes: function (curves) {\n      var times = []; // first join together the times for each axis, if defined\n\n      if (curves.x !== undefined) times = times.concat(curves.x.times);\n      if (curves.y !== undefined) times = times.concat(curves.y.times);\n      if (curves.z !== undefined) times = times.concat(curves.z.times); // then sort them and remove duplicates\n\n      times = times.sort(function (a, b) {\n        return a - b;\n      }).filter(function (elem, index, array) {\n        return array.indexOf(elem) == index;\n      });\n      return times;\n    },\n    getKeyframeTrackValues: function (times, curves, initialValue) {\n      var prevValue = initialValue;\n      var values = [];\n      var xIndex = -1;\n      var yIndex = -1;\n      var zIndex = -1;\n      times.forEach(function (time) {\n        if (curves.x) xIndex = curves.x.times.indexOf(time);\n        if (curves.y) yIndex = curves.y.times.indexOf(time);\n        if (curves.z) zIndex = curves.z.times.indexOf(time); // if there is an x value defined for this frame, use that\n\n        if (xIndex !== -1) {\n          var xValue = curves.x.values[xIndex];\n          values.push(xValue);\n          prevValue[0] = xValue;\n        } else {\n          // otherwise use the x value from the previous frame\n          values.push(prevValue[0]);\n        }\n\n        if (yIndex !== -1) {\n          var yValue = curves.y.values[yIndex];\n          values.push(yValue);\n          prevValue[1] = yValue;\n        } else {\n          values.push(prevValue[1]);\n        }\n\n        if (zIndex !== -1) {\n          var zValue = curves.z.values[zIndex];\n          values.push(zValue);\n          prevValue[2] = zValue;\n        } else {\n          values.push(prevValue[2]);\n        }\n      });\n      return values;\n    },\n    // Rotations are defined as Euler angles which can have values  of any size\n    // These will be converted to quaternions which don't support values greater than\n    // PI, so we'll interpolate large rotations\n    interpolateRotations: function (curve) {\n      for (var i = 1; i < curve.values.length; i++) {\n        var initialValue = curve.values[i - 1];\n        var valuesSpan = curve.values[i] - initialValue;\n        var absoluteSpan = Math.abs(valuesSpan);\n\n        if (absoluteSpan >= 180) {\n          var numSubIntervals = absoluteSpan / 180;\n          var step = valuesSpan / numSubIntervals;\n          var nextValue = initialValue + step;\n          var initialTime = curve.times[i - 1];\n          var timeSpan = curve.times[i] - initialTime;\n          var interval = timeSpan / numSubIntervals;\n          var nextTime = initialTime + interval;\n          var interpolatedTimes = [];\n          var interpolatedValues = [];\n\n          while (nextTime < curve.times[i]) {\n            interpolatedTimes.push(nextTime);\n            nextTime += interval;\n            interpolatedValues.push(nextValue);\n            nextValue += step;\n          }\n\n          curve.times = inject(curve.times, i, interpolatedTimes);\n          curve.values = inject(curve.values, i, interpolatedValues);\n        }\n      }\n    }\n  }; // parse an FBX file in ASCII format\n\n  function TextParser() {}\n\n  TextParser.prototype = {\n    constructor: TextParser,\n    getPrevNode: function () {\n      return this.nodeStack[this.currentIndent - 2];\n    },\n    getCurrentNode: function () {\n      return this.nodeStack[this.currentIndent - 1];\n    },\n    getCurrentProp: function () {\n      return this.currentProp;\n    },\n    pushStack: function (node) {\n      this.nodeStack.push(node);\n      this.currentIndent += 1;\n    },\n    popStack: function () {\n      this.nodeStack.pop();\n      this.currentIndent -= 1;\n    },\n    setCurrentProp: function (val, name) {\n      this.currentProp = val;\n      this.currentPropName = name;\n    },\n    parse: function (text) {\n      this.currentIndent = 0;\n      console.log(\"FBXTree: \", FBXTree);\n      this.allNodes = new FBXTree();\n      this.nodeStack = [];\n      this.currentProp = [];\n      this.currentPropName = '';\n      var self = this;\n      var split = text.split(/[\\r\\n]+/);\n      split.forEach(function (line, i) {\n        var matchComment = line.match(/^[\\s\\t]*;/);\n        var matchEmpty = line.match(/^[\\s\\t]*$/);\n        if (matchComment || matchEmpty) return;\n        var matchBeginning = line.match('^\\\\t{' + self.currentIndent + '}(\\\\w+):(.*){', '');\n        var matchProperty = line.match('^\\\\t{' + self.currentIndent + '}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)');\n        var matchEnd = line.match('^\\\\t{' + (self.currentIndent - 1) + '}}');\n\n        if (matchBeginning) {\n          self.parseNodeBegin(line, matchBeginning);\n        } else if (matchProperty) {\n          self.parseNodeProperty(line, matchProperty, split[++i]);\n        } else if (matchEnd) {\n          self.popStack();\n        } else if (line.match(/^[^\\s\\t}]/)) {\n          // large arrays are split over multiple lines terminated with a ',' character\n          // if this is encountered the line needs to be joined to the previous line\n          self.parseNodePropertyContinued(line);\n        }\n      });\n      return this.allNodes;\n    },\n    parseNodeBegin: function (line, property) {\n      var nodeName = property[1].trim().replace(/^\"/, '').replace(/\"$/, '');\n      var nodeAttrs = property[2].split(',').map(function (attr) {\n        return attr.trim().replace(/^\"/, '').replace(/\"$/, '');\n      });\n      var node = {\n        name: nodeName\n      };\n      var attrs = this.parseNodeAttr(nodeAttrs);\n      var currentNode = this.getCurrentNode(); // a top node\n\n      if (this.currentIndent === 0) {\n        this.allNodes.add(nodeName, node);\n      } else {\n        // a subnode\n        // if the subnode already exists, append it\n        if (nodeName in currentNode) {\n          // special case Pose needs PoseNodes as an array\n          if (nodeName === 'PoseNode') {\n            currentNode.PoseNode.push(node);\n          } else if (currentNode[nodeName].id !== undefined) {\n            currentNode[nodeName] = {};\n            currentNode[nodeName][currentNode[nodeName].id] = currentNode[nodeName];\n          }\n\n          if (attrs.id !== '') currentNode[nodeName][attrs.id] = node;\n        } else if (typeof attrs.id === 'number') {\n          currentNode[nodeName] = {};\n          currentNode[nodeName][attrs.id] = node;\n        } else if (nodeName !== 'Properties70') {\n          if (nodeName === 'PoseNode') currentNode[nodeName] = [node];else currentNode[nodeName] = node;\n        }\n      }\n\n      if (typeof attrs.id === 'number') node.id = attrs.id;\n      if (attrs.name !== '') node.attrName = attrs.name;\n      if (attrs.type !== '') node.attrType = attrs.type;\n      this.pushStack(node);\n    },\n    parseNodeAttr: function (attrs) {\n      var id = attrs[0];\n\n      if (attrs[0] !== '') {\n        id = parseInt(attrs[0]);\n\n        if (isNaN(id)) {\n          id = attrs[0];\n        }\n      }\n\n      var name = '',\n          type = '';\n\n      if (attrs.length > 1) {\n        name = attrs[1].replace(/^(\\w+)::/, '');\n        type = attrs[2];\n      }\n\n      return {\n        id: id,\n        name: name,\n        type: type\n      };\n    },\n    parseNodeProperty: function (line, property, contentLine) {\n      var propName = property[1].replace(/^\"/, '').replace(/\"$/, '').trim();\n      var propValue = property[2].replace(/^\"/, '').replace(/\"$/, '').trim(); // for special case: base64 image data follows \"Content: ,\" line\n      //\tContent: ,\n      //\t \"/9j/4RDaRXhpZgAATU0A...\"\n\n      if (propName === 'Content' && propValue === ',') {\n        propValue = contentLine.replace(/\"/g, '').replace(/,$/, '').trim();\n      }\n\n      var currentNode = this.getCurrentNode();\n      var parentName = currentNode.name;\n\n      if (parentName === 'Properties70') {\n        this.parseNodeSpecialProperty(line, propName, propValue);\n        return;\n      } // Connections\n\n\n      if (propName === 'C') {\n        var connProps = propValue.split(',').slice(1);\n        var from = parseInt(connProps[0]);\n        var to = parseInt(connProps[1]);\n        var rest = propValue.split(',').slice(3);\n        rest = rest.map(function (elem) {\n          return elem.trim().replace(/^\"/, '');\n        });\n        propName = 'connections';\n        propValue = [from, to];\n        append(propValue, rest);\n\n        if (currentNode[propName] === undefined) {\n          currentNode[propName] = [];\n        }\n      } // Node\n\n\n      if (propName === 'Node') currentNode.id = propValue; // connections\n\n      if (propName in currentNode && Array.isArray(currentNode[propName])) {\n        currentNode[propName].push(propValue);\n      } else {\n        if (propName !== 'a') currentNode[propName] = propValue;else currentNode.a = propValue;\n      }\n\n      this.setCurrentProp(currentNode, propName); // convert string to array, unless it ends in ',' in which case more will be added to it\n\n      if (propName === 'a' && propValue.slice(-1) !== ',') {\n        currentNode.a = parseNumberArray(propValue);\n      }\n    },\n    parseNodePropertyContinued: function (line) {\n      var currentNode = this.getCurrentNode();\n      currentNode.a += line; // if the line doesn't end in ',' we have reached the end of the property value\n      // so convert the string to an array\n\n      if (line.slice(-1) !== ',') {\n        currentNode.a = parseNumberArray(currentNode.a);\n      }\n    },\n    // parse \"Property70\"\n    parseNodeSpecialProperty: function (line, propName, propValue) {\n      // split this\n      // P: \"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\",1,1,1\n      // into array like below\n      // [\"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\", \"1,1,1\" ]\n      var props = propValue.split('\",').map(function (prop) {\n        return prop.trim().replace(/^\\\"/, '').replace(/\\s/, '_');\n      });\n      var innerPropName = props[0];\n      var innerPropType1 = props[1];\n      var innerPropType2 = props[2];\n      var innerPropFlag = props[3];\n      var innerPropValue = props[4]; // cast values where needed, otherwise leave as strings\n\n      switch (innerPropType1) {\n        case 'int':\n        case 'enum':\n        case 'bool':\n        case 'ULongLong':\n        case 'double':\n        case 'Number':\n        case 'FieldOfView':\n          innerPropValue = parseFloat(innerPropValue);\n          break;\n\n        case 'Color':\n        case 'ColorRGB':\n        case 'Vector3D':\n        case 'Lcl_Translation':\n        case 'Lcl_Rotation':\n        case 'Lcl_Scaling':\n          innerPropValue = parseNumberArray(innerPropValue);\n          break;\n      } // CAUTION: these props must append to parent's parent\n\n\n      this.getPrevNode()[innerPropName] = {\n        'type': innerPropType1,\n        'type2': innerPropType2,\n        'flag': innerPropFlag,\n        'value': innerPropValue\n      };\n      this.setCurrentProp(this.getPrevNode(), innerPropName);\n    }\n  }; // Parse an FBX file in Binary format\n\n  function BinaryParser() {}\n\n  BinaryParser.prototype = {\n    constructor: BinaryParser,\n    parse: function (buffer) {\n      var reader = new BinaryReader(buffer);\n      reader.skip(23); // skip magic 23 bytes\n\n      var version = reader.getUint32();\n      console.log('THREE.FBXLoader: FBX binary version: ' + version);\n      var allNodes = new FBXTree();\n\n      while (!this.endOfContent(reader)) {\n        var node = this.parseNode(reader, version);\n        if (node !== null) allNodes.add(node.name, node);\n      }\n\n      return allNodes;\n    },\n    // Check if reader has reached the end of content.\n    endOfContent: function (reader) {\n      // footer size: 160bytes + 16-byte alignment padding\n      // - 16bytes: magic\n      // - padding til 16-byte alignment (at least 1byte?)\n      //\t(seems like some exporters embed fixed 15 or 16bytes?)\n      // - 4bytes: magic\n      // - 4bytes: version\n      // - 120bytes: zero\n      // - 16bytes: magic\n      if (reader.size() % 16 === 0) {\n        return (reader.getOffset() + 160 + 16 & ~0xf) >= reader.size();\n      } else {\n        return reader.getOffset() + 160 + 16 >= reader.size();\n      }\n    },\n    // recursively parse nodes until the end of the file is reached\n    parseNode: function (reader, version) {\n      var node = {}; // The first three data sizes depends on version.\n\n      var endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32();\n      var numProperties = version >= 7500 ? reader.getUint64() : reader.getUint32(); // note: do not remove this even if you get a linter warning as it moves the buffer forward\n\n      var propertyListLen = version >= 7500 ? reader.getUint64() : reader.getUint32();\n      var nameLen = reader.getUint8();\n      var name = reader.getString(nameLen); // Regards this node as NULL-record if endOffset is zero\n\n      if (endOffset === 0) return null;\n      var propertyList = [];\n\n      for (var i = 0; i < numProperties; i++) {\n        propertyList.push(this.parseProperty(reader));\n      } // Regards the first three elements in propertyList as id, attrName, and attrType\n\n\n      var id = propertyList.length > 0 ? propertyList[0] : '';\n      var attrName = propertyList.length > 1 ? propertyList[1] : '';\n      var attrType = propertyList.length > 2 ? propertyList[2] : ''; // check if this node represents just a single property\n      // like (name, 0) set or (name2, [0, 1, 2]) set of {name: 0, name2: [0, 1, 2]}\n\n      node.singleProperty = numProperties === 1 && reader.getOffset() === endOffset ? true : false;\n\n      while (endOffset > reader.getOffset()) {\n        var subNode = this.parseNode(reader, version);\n        if (subNode !== null) this.parseSubNode(name, node, subNode);\n      }\n\n      node.propertyList = propertyList; // raw property list used by parent\n\n      if (typeof id === 'number') node.id = id;\n      if (attrName !== '') node.attrName = attrName;\n      if (attrType !== '') node.attrType = attrType;\n      if (name !== '') node.name = name;\n      return node;\n    },\n    parseSubNode: function (name, node, subNode) {\n      // special case: child node is single property\n      if (subNode.singleProperty === true) {\n        var value = subNode.propertyList[0];\n\n        if (Array.isArray(value)) {\n          node[subNode.name] = subNode;\n          subNode.a = value;\n        } else {\n          node[subNode.name] = value;\n        }\n      } else if (name === 'Connections' && subNode.name === 'C') {\n        var array = [];\n        subNode.propertyList.forEach(function (property, i) {\n          // first Connection is FBX type (OO, OP, etc.). We'll discard these\n          if (i !== 0) array.push(property);\n        });\n\n        if (node.connections === undefined) {\n          node.connections = [];\n        }\n\n        node.connections.push(array);\n      } else if (subNode.name === 'Properties70') {\n        var keys = Object.keys(subNode);\n        keys.forEach(function (key) {\n          node[key] = subNode[key];\n        });\n      } else if (name === 'Properties70' && subNode.name === 'P') {\n        var innerPropName = subNode.propertyList[0];\n        var innerPropType1 = subNode.propertyList[1];\n        var innerPropType2 = subNode.propertyList[2];\n        var innerPropFlag = subNode.propertyList[3];\n        var innerPropValue;\n        if (innerPropName.indexOf('Lcl ') === 0) innerPropName = innerPropName.replace('Lcl ', 'Lcl_');\n        if (innerPropType1.indexOf('Lcl ') === 0) innerPropType1 = innerPropType1.replace('Lcl ', 'Lcl_');\n\n        if (innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf('Lcl_') === 0) {\n          innerPropValue = [subNode.propertyList[4], subNode.propertyList[5], subNode.propertyList[6]];\n        } else {\n          innerPropValue = subNode.propertyList[4];\n        } // this will be copied to parent, see above\n\n\n        node[innerPropName] = {\n          'type': innerPropType1,\n          'type2': innerPropType2,\n          'flag': innerPropFlag,\n          'value': innerPropValue\n        };\n      } else if (node[subNode.name] === undefined) {\n        if (typeof subNode.id === 'number') {\n          node[subNode.name] = {};\n          node[subNode.name][subNode.id] = subNode;\n        } else {\n          node[subNode.name] = subNode;\n        }\n      } else {\n        if (subNode.name === 'PoseNode') {\n          if (!Array.isArray(node[subNode.name])) {\n            node[subNode.name] = [node[subNode.name]];\n          }\n\n          node[subNode.name].push(subNode);\n        } else if (node[subNode.name][subNode.id] === undefined) {\n          node[subNode.name][subNode.id] = subNode;\n        }\n      }\n    },\n    parseProperty: function (reader) {\n      var type = reader.getString(1);\n\n      switch (type) {\n        case 'C':\n          return reader.getBoolean();\n\n        case 'D':\n          return reader.getFloat64();\n\n        case 'F':\n          return reader.getFloat32();\n\n        case 'I':\n          return reader.getInt32();\n\n        case 'L':\n          return reader.getInt64();\n\n        case 'R':\n          var length = reader.getUint32();\n          return reader.getArrayBuffer(length);\n\n        case 'S':\n          var length = reader.getUint32();\n          return reader.getString(length);\n\n        case 'Y':\n          return reader.getInt16();\n\n        case 'b':\n        case 'c':\n        case 'd':\n        case 'f':\n        case 'i':\n        case 'l':\n          var arrayLength = reader.getUint32();\n          var encoding = reader.getUint32(); // 0: non-compressed, 1: compressed\n\n          var compressedLength = reader.getUint32();\n\n          if (encoding === 0) {\n            switch (type) {\n              case 'b':\n              case 'c':\n                return reader.getBooleanArray(arrayLength);\n\n              case 'd':\n                return reader.getFloat64Array(arrayLength);\n\n              case 'f':\n                return reader.getFloat32Array(arrayLength);\n\n              case 'i':\n                return reader.getInt32Array(arrayLength);\n\n              case 'l':\n                return reader.getInt64Array(arrayLength);\n            }\n          }\n\n          if (typeof Zlib === 'undefined') {\n            console.error('THREE.FBXLoader: External library Inflate.min.js required, obtain or import from https://github.com/imaya/zlib.js');\n          }\n\n          var inflate = new Zlib.Inflate(new Uint8Array(reader.getArrayBuffer(compressedLength))); // eslint-disable-line no-undef\n\n          var reader2 = new BinaryReader(inflate.decompress().buffer);\n\n          switch (type) {\n            case 'b':\n            case 'c':\n              return reader2.getBooleanArray(arrayLength);\n\n            case 'd':\n              return reader2.getFloat64Array(arrayLength);\n\n            case 'f':\n              return reader2.getFloat32Array(arrayLength);\n\n            case 'i':\n              return reader2.getInt32Array(arrayLength);\n\n            case 'l':\n              return reader2.getInt64Array(arrayLength);\n          }\n\n        default:\n          throw new Error('THREE.FBXLoader: Unknown property type ' + type);\n      }\n    }\n  };\n\n  function BinaryReader(buffer, littleEndian) {\n    this.dv = new DataView(buffer);\n    this.offset = 0;\n    this.littleEndian = littleEndian !== undefined ? littleEndian : true;\n  }\n\n  BinaryReader.prototype = {\n    constructor: BinaryReader,\n    getOffset: function () {\n      return this.offset;\n    },\n    size: function () {\n      return this.dv.buffer.byteLength;\n    },\n    skip: function (length) {\n      this.offset += length;\n    },\n    // seems like true/false representation depends on exporter.\n    // true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n    // then sees LSB.\n    getBoolean: function () {\n      return (this.getUint8() & 1) === 1;\n    },\n    getBooleanArray: function (size) {\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a.push(this.getBoolean());\n      }\n\n      return a;\n    },\n    getUint8: function () {\n      var value = this.dv.getUint8(this.offset);\n      this.offset += 1;\n      return value;\n    },\n    getInt16: function () {\n      var value = this.dv.getInt16(this.offset, this.littleEndian);\n      this.offset += 2;\n      return value;\n    },\n    getInt32: function () {\n      var value = this.dv.getInt32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    },\n    getInt32Array: function (size) {\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a.push(this.getInt32());\n      }\n\n      return a;\n    },\n    getUint32: function () {\n      var value = this.dv.getUint32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    },\n    // JavaScript doesn't support 64-bit integer so calculate this here\n    // 1 << 32 will return 1 so using multiply operation instead here.\n    // There's a possibility that this method returns wrong value if the value\n    // is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n    // TODO: safely handle 64-bit integer\n    getInt64: function () {\n      var low, high;\n\n      if (this.littleEndian) {\n        low = this.getUint32();\n        high = this.getUint32();\n      } else {\n        high = this.getUint32();\n        low = this.getUint32();\n      } // calculate negative value\n\n\n      if (high & 0x80000000) {\n        high = ~high & 0xFFFFFFFF;\n        low = ~low & 0xFFFFFFFF;\n        if (low === 0xFFFFFFFF) high = high + 1 & 0xFFFFFFFF;\n        low = low + 1 & 0xFFFFFFFF;\n        return -(high * 0x100000000 + low);\n      }\n\n      return high * 0x100000000 + low;\n    },\n    getInt64Array: function (size) {\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a.push(this.getInt64());\n      }\n\n      return a;\n    },\n    // Note: see getInt64() comment\n    getUint64: function () {\n      var low, high;\n\n      if (this.littleEndian) {\n        low = this.getUint32();\n        high = this.getUint32();\n      } else {\n        high = this.getUint32();\n        low = this.getUint32();\n      }\n\n      return high * 0x100000000 + low;\n    },\n    getFloat32: function () {\n      var value = this.dv.getFloat32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    },\n    getFloat32Array: function (size) {\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a.push(this.getFloat32());\n      }\n\n      return a;\n    },\n    getFloat64: function () {\n      var value = this.dv.getFloat64(this.offset, this.littleEndian);\n      this.offset += 8;\n      return value;\n    },\n    getFloat64Array: function (size) {\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a.push(this.getFloat64());\n      }\n\n      return a;\n    },\n    getArrayBuffer: function (size) {\n      var value = this.dv.buffer.slice(this.offset, this.offset + size);\n      this.offset += size;\n      return value;\n    },\n    getString: function (size) {\n      // note: safari 9 doesn't support Uint8Array.indexOf; create intermediate array instead\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a[i] = this.getUint8();\n      }\n\n      var nullByte = a.indexOf(0);\n      if (nullByte >= 0) a = a.slice(0, nullByte);\n      return THREE.LoaderUtils.decodeText(new Uint8Array(a));\n    }\n  }; // FBXTree holds a representation of the FBX data, returned by the TextParser ( FBX ASCII format)\n  // and BinaryParser( FBX Binary format)\n\n  function FBXTree() {}\n\n  FBXTree.prototype = {\n    constructor: FBXTree,\n    add: function (key, val) {\n      this[key] = val;\n    }\n  }; // ************** UTILITY FUNCTIONS **************\n\n  function isFbxFormatBinary(buffer) {\n    var CORRECT = 'Kaydara FBX Binary  \\0';\n    return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length);\n  }\n\n  function isFbxFormatASCII(text) {\n    var CORRECT = ['K', 'a', 'y', 'd', 'a', 'r', 'a', '\\\\', 'F', 'B', 'X', '\\\\', 'B', 'i', 'n', 'a', 'r', 'y', '\\\\', '\\\\'];\n    var cursor = 0;\n\n    function read(offset) {\n      var result = text[offset - 1];\n      text = text.slice(cursor + offset);\n      cursor++;\n      return result;\n    }\n\n    for (var i = 0; i < CORRECT.length; ++i) {\n      var num = read(1);\n\n      if (num === CORRECT[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function getFbxVersion(text) {\n    var versionRegExp = /FBXVersion: (\\d+)/;\n    var match = text.match(versionRegExp);\n\n    if (match) {\n      var version = parseInt(match[1]);\n      return version;\n    }\n\n    throw new Error('THREE.FBXLoader: Cannot find the version number for the file given.');\n  } // Converts FBX ticks into real time seconds.\n\n\n  function convertFBXTimeToSeconds(time) {\n    return time / 46186158000;\n  }\n\n  var dataArray = []; // extracts the data from the correct position in the FBX array based on indexing type\n\n  function getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\n    var index;\n\n    switch (infoObject.mappingType) {\n      case 'ByPolygonVertex':\n        index = polygonVertexIndex;\n        break;\n\n      case 'ByPolygon':\n        index = polygonIndex;\n        break;\n\n      case 'ByVertice':\n        index = vertexIndex;\n        break;\n\n      case 'AllSame':\n        index = infoObject.indices[0];\n        break;\n\n      default:\n        console.warn('THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType);\n    }\n\n    if (infoObject.referenceType === 'IndexToDirect') index = infoObject.indices[index];\n    var from = index * infoObject.dataSize;\n    var to = from + infoObject.dataSize;\n    return slice(dataArray, infoObject.buffer, from, to);\n  }\n\n  var tempMat = new THREE.Matrix4();\n  var tempEuler = new THREE.Euler();\n  var tempVec = new THREE.Vector3();\n  var translation = new THREE.Vector3();\n  var rotation = new THREE.Matrix4(); // generate transformation from FBX transform data\n  // ref: https://help.autodesk.com/view/FBX/2017/ENU/?guid=__files_GUID_10CDD63C_79C1_4F2D_BB28_AD2BE65A02ED_htm\n  // transformData = {\n  //\t eulerOrder: int,\n  //\t translation: [],\n  //   rotationOffset: [],\n  //\t preRotation\n  //\t rotation\n  //\t postRotation\n  //   scale\n  // }\n  // all entries are optional\n\n  function generateTransform(transformData) {\n    var transform = new THREE.Matrix4();\n    translation.set(0, 0, 0);\n    rotation.identity();\n    var order = transformData.eulerOrder ? getEulerOrder(transformData.eulerOrder) : getEulerOrder(0);\n    if (transformData.translation) translation.fromArray(transformData.translation);\n    if (transformData.rotationOffset) translation.add(tempVec.fromArray(transformData.rotationOffset));\n\n    if (transformData.rotation) {\n      var array = transformData.rotation.map(THREE.Math.degToRad);\n      array.push(order);\n      rotation.makeRotationFromEuler(tempEuler.fromArray(array));\n    }\n\n    if (transformData.preRotation) {\n      var array = transformData.preRotation.map(THREE.Math.degToRad);\n      array.push(order);\n      tempMat.makeRotationFromEuler(tempEuler.fromArray(array));\n      rotation.premultiply(tempMat);\n    }\n\n    if (transformData.postRotation) {\n      var array = transformData.postRotation.map(THREE.Math.degToRad);\n      array.push(order);\n      tempMat.makeRotationFromEuler(tempEuler.fromArray(array));\n      tempMat.getInverse(tempMat);\n      rotation.multiply(tempMat);\n    }\n\n    if (transformData.scale) transform.scale(tempVec.fromArray(transformData.scale));\n    transform.setPosition(translation);\n    transform.multiply(rotation);\n    return transform;\n  } // Returns the three.js intrinsic Euler order corresponding to FBX extrinsic Euler order\n  // ref: http://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_class_fbx_euler_html\n\n\n  function getEulerOrder(order) {\n    var enums = ['ZYX', // -> XYZ extrinsic\n    'YZX', // -> XZY extrinsic\n    'XZY', // -> YZX extrinsic\n    'ZXY', // -> YXZ extrinsic\n    'YXZ', // -> ZXY extrinsic\n    'XYZ' // -> ZYX extrinsic\n    //'SphericXYZ', // not possible to support\n    ];\n\n    if (order === 6) {\n      console.warn('THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.');\n      return enums[0];\n    }\n\n    return enums[order];\n  } // Parses comma separated list of numbers and returns them an array.\n  // Used internally by the TextParser\n\n\n  function parseNumberArray(value) {\n    var array = value.split(',').map(function (val) {\n      return parseFloat(val);\n    });\n    return array;\n  }\n\n  function convertArrayBufferToString(buffer, from, to) {\n    if (from === undefined) from = 0;\n    if (to === undefined) to = buffer.byteLength;\n    return THREE.LoaderUtils.decodeText(new Uint8Array(buffer, from, to));\n  }\n\n  function append(a, b) {\n    for (var i = 0, j = a.length, l = b.length; i < l; i++, j++) {\n      a[j] = b[i];\n    }\n  }\n\n  function slice(a, b, from, to) {\n    for (var i = from, j = 0; i < to; i++, j++) {\n      a[j] = b[i];\n    }\n\n    return a;\n  } // inject array a2 into array a1 at index\n\n\n  function inject(a1, index, a2) {\n    return a1.slice(0, index).concat(a2).concat(a1.slice(index));\n  }\n\n  return FBXLoader;\n}();","map":{"version":3,"sources":["E:/Universitat Paderborn/NEW/src/node_modules/aframe-extras/lib/FBXLoader.js"],"names":["module","exports","THREE","FBXLoader","fbxTree","connections","sceneGraph","manager","undefined","DefaultLoadingManager","prototype","constructor","crossOrigin","load","url","onLoad","onProgress","onError","self","resourceDirectory","LoaderUtils","extractUrlBase","loader","FileLoader","setResponseType","buffer","scene","parse","error","setTimeout","itemError","setCrossOrigin","value","FBXBuffer","isFbxFormatBinary","BinaryParser","FBXText","convertArrayBufferToString","isFbxFormatASCII","Error","getFbxVersion","TextParser","textureLoader","TextureLoader","setPath","FBXTreeParser","parseConnections","images","parseImages","textures","parseTextures","materials","parseMaterials","deformers","parseDeformers","geometryMap","GeometryParser","parseScene","connectionMap","Map","rawConnections","Connections","forEach","rawConnection","fromID","toID","relationship","has","set","parents","children","parentRelationship","ID","get","push","childRelationship","blobs","Objects","videoNodes","Video","nodeID","videoNode","id","parseInt","RelativeFilename","Filename","arrayBufferContent","Content","ArrayBuffer","byteLength","base64Content","image","parseImage","filename","split","pop","content","fileName","extension","slice","lastIndexOf","toLowerCase","type","TGALoader","console","warn","Loader","Handlers","add","array","Uint8Array","window","URL","createObjectURL","Blob","textureMap","textureNodes","Texture","texture","parseTexture","textureNode","loadTexture","name","attrName","wrapModeU","WrapModeU","wrapModeV","WrapModeV","valueU","valueV","wrapS","RepeatWrapping","ClampToEdgeWrapping","wrapT","values","Scaling","repeat","x","y","currentPath","path","length","indexOf","FileName","materialMap","materialNodes","Material","material","parseMaterial","materialNode","ShadingModel","parameters","parseParameters","MeshPhongMaterial","MeshLambertMaterial","color","setValues","BumpFactor","bumpScale","Diffuse","Color","fromArray","DiffuseColor","DisplacementFactor","displacementScale","Emissive","emissive","EmissiveColor","EmissiveFactor","emissiveIntensity","parseFloat","Opacity","opacity","transparent","ReflectionFactor","reflectivity","Shininess","shininess","Specular","specular","SpecularColor","child","bumpMap","getTexture","map","displacementMap","emissiveMap","normalMap","envMap","mapping","EquirectangularReflectionMapping","specularMap","alphaMap","LayeredTexture","skeletons","morphTargets","DeformerNodes","Deformer","deformerNode","relationships","attrType","skeleton","parseSkeleton","geometryID","morphTarget","rawTargets","parseMorphTargets","deformerNodes","rawBones","boneNode","rawBone","indices","weights","transform","Matrix4","Transform","a","transformLink","TransformLink","linkMode","Mode","Indexes","Weights","bones","rawMorphTargets","i","morphTargetNode","rawMorphTarget","initialWeight","DeformPercent","fullWeights","FullWeights","targetRelationships","geoID","Group","modelMap","parseModels","modelNodes","Model","model","modelNode","setLookAtProperties","parentConnections","connection","parent","bindSkeleton","createAmbientLight","setupMorphMaterials","animations","AnimationParser","isGroup","node","buildSkeleton","createCamera","createLight","createMesh","createCurve","PropertyBinding","sanitizeNodeName","setModelTransforms","bone","subBone","Bone","matrixWorld","copy","cameraAttribute","attr","NodeAttribute","Object3D","CameraProjectionType","nearClippingPlane","NearPlane","farClippingPlane","FarPlane","width","innerWidth","height","innerHeight","AspectWidth","AspectHeight","aspect","fov","FieldOfView","focalLength","FocalLength","PerspectiveCamera","setFocalLength","OrthographicCamera","lightAttribute","LightType","intensity","Intensity","CastLightOnObject","distance","FarAttenuationEnd","EnableFarAttenuation","decay","PointLight","DirectionalLight","angle","Math","PI","InnerAngle","degToRad","penumbra","OuterAngle","max","SpotLight","CastShadows","castShadow","geometry","attributes","vertexColors","VertexColors","FBX_Deformer","skinning","SkinnedMesh","Mesh","reduce","geo","LineBasicMaterial","linewidth","Line","transformData","eulerOrder","RotationOrder","translation","Lcl_Translation","rotationOffset","RotationOffset","rotation","Lcl_Rotation","preRotation","PreRotation","postRotation","PostRotation","scale","Lcl_Scaling","generateTransform","applyMatrix","lookAtTarget","pos","target","position","lookAt","Vector3","bindMatrices","parsePoseNodes","geoRelationships","geoConnParent","bind","Skeleton","BindPoseNode","Pose","poseNodes","PoseNode","Array","isArray","poseNode","Node","Matrix","GlobalSettings","ambientColor","AmbientColor","r","g","b","AmbientLight","traverse","isMesh","morphAttributes","normal","uuid","matUuid","sharedMat","clone","geoNodes","Geometry","parseGeometry","geoNode","parseMeshGeometry","parseNurbsGeometry","GeometricTranslation","GeometricRotation","GeometricScaling","genGeometry","preTransform","BufferGeometry","geoInfo","parseGeoNode","buffers","genBuffers","positionAttribute","Float32BufferAttribute","vertex","applyToBufferAttribute","addAttribute","colors","Uint16BufferAttribute","weightsIndices","vertexWeights","normalAttribute","normalMatrix","Matrix3","getNormalMatrix","uvs","uvBuffer","toString","mappingType","prevMaterialIndex","materialIndex","startIndex","currentIndex","addGroup","groups","lastGroup","lastIndex","start","count","addMorphTargets","vertexPositions","Vertices","vertexIndices","PolygonVertexIndex","LayerElementColor","parseVertexColors","LayerElementMaterial","parseMaterialIndices","LayerElementNormal","parseNormals","LayerElementUV","uv","parseUVs","weightTable","index","j","weight","polygonIndex","faceLength","displayedWeightsWarning","facePositionIndexes","faceNormals","faceColors","faceUVs","faceWeights","faceWeightIndices","vertexIndex","polygonVertexIndex","endOfFace","weightIndices","data","getData","wt","wIndex","Weight","weightIndex","currentWeight","comparedWeight","comparedWeightIndex","comparedWeightArray","tmp","genFace","parentGeo","parentGeoNode","rawTarget","morphGeoNode","genMorphGeometry","morphGeo","morphPositions","morphIndex","morphGeoInfo","morphBuffers","NormalNode","MappingInformationType","referenceType","ReferenceInformationType","Normals","indexBuffer","NormalIndex","NormalsIndex","dataSize","UVNode","UV","UVIndex","ColorNode","Colors","ColorIndex","MaterialNode","materialIndexBuffer","Materials","materialIndices","NURBSCurve","order","Order","isNaN","degree","knots","KnotVector","controlPoints","pointsValues","Points","l","Vector4","startKnot","endKnot","Form","curve","vertices","getPoints","positions","Float32Array","toArray","BufferAttribute","animationClips","rawClips","parseClips","key","rawClip","clip","addClip","AnimationCurve","curveNodesMap","parseAnimationCurveNodes","parseAnimationCurves","layersMap","parseAnimationLayers","parseAnimStacks","rawCurveNodes","AnimationCurveNode","rawCurveNode","match","curveNode","curves","rawCurves","animationCurve","times","KeyTime","convertFBXTimeToSeconds","KeyValueFloat","animationCurveID","animationCurveRelationship","rawLayers","AnimationLayer","layerCurveNodes","z","modelID","rawModel","modelName","initialPosition","initialRotation","initialScale","getModelAnimTransform","preRotations","postRotations","morph","deformerID","morpherID","morphName","rawStacks","AnimationStack","layer","tracks","rawTracks","concat","generateTracks","AnimationClip","Quaternion","decompose","Euler","setFromQuaternion","T","Object","keys","positionTrack","generateVectorTrack","R","rotationTrack","generateRotationTrack","S","scaleTrack","morphTrack","generateMorphTrack","initialValue","getTimesForAllAxes","getKeyframeTrackValues","VectorKeyframeTrack","interpolateRotations","setFromEuler","inverse","quaternion","euler","quaternionValues","premultiply","multiply","QuaternionKeyframeTrack","val","morphNum","getObjectByName","morphTargetDictionary","NumberKeyframeTrack","sort","filter","elem","prevValue","xIndex","yIndex","zIndex","time","xValue","yValue","zValue","valuesSpan","absoluteSpan","abs","numSubIntervals","step","nextValue","initialTime","timeSpan","interval","nextTime","interpolatedTimes","interpolatedValues","inject","getPrevNode","nodeStack","currentIndent","getCurrentNode","getCurrentProp","currentProp","pushStack","popStack","setCurrentProp","currentPropName","text","log","FBXTree","allNodes","line","matchComment","matchEmpty","matchBeginning","matchProperty","matchEnd","parseNodeBegin","parseNodeProperty","parseNodePropertyContinued","property","nodeName","trim","replace","nodeAttrs","attrs","parseNodeAttr","currentNode","contentLine","propName","propValue","parentName","parseNodeSpecialProperty","connProps","from","to","rest","append","parseNumberArray","props","prop","innerPropName","innerPropType1","innerPropType2","innerPropFlag","innerPropValue","reader","BinaryReader","skip","version","getUint32","endOfContent","parseNode","size","getOffset","endOffset","getUint64","numProperties","propertyListLen","nameLen","getUint8","getString","propertyList","parseProperty","singleProperty","subNode","parseSubNode","getBoolean","getFloat64","getFloat32","getInt32","getInt64","getArrayBuffer","getInt16","arrayLength","encoding","compressedLength","getBooleanArray","getFloat64Array","getFloat32Array","getInt32Array","getInt64Array","Zlib","inflate","Inflate","reader2","decompress","littleEndian","dv","DataView","offset","low","high","nullByte","decodeText","CORRECT","cursor","read","result","num","versionRegExp","dataArray","infoObject","tempMat","tempEuler","tempVec","identity","getEulerOrder","makeRotationFromEuler","getInverse","setPosition","enums","a1","a2"],"mappings":"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","sourcesContent":["/**\n * @author Kyle-Larson https://github.com/Kyle-Larson\n * @author Takahiro https://github.com/takahirox\n * @author Lewy Blue https://github.com/looeee\n *\n * Loader loads FBX file and generates Group representing FBX scene.\n * Requires FBX file to be >= 7.0 and in ASCII or >= 6400 in Binary format\n * Versions lower than this may load but will probably have errors\n *\n * Needs Support:\n *  Morph normals / blend shape normals\n *\n * FBX format references:\n * \thttps://wiki.blender.org/index.php/User:Mont29/Foundation/FBX_File_Structure\n * \thttp://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_index_html (C++ SDK reference)\n *\n * \tBinary format specification:\n *\t\thttps://code.blender.org/2013/08/fbx-binary-file-format-specification/\n */\n\n\nmodule.exports = THREE.FBXLoader = ( function () {\n\n\tvar fbxTree;\n\tvar connections;\n\tvar sceneGraph;\n\n\tfunction FBXLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n\t}\n\n\tFBXLoader.prototype = {\n\n\t\tconstructor: FBXLoader,\n\n\t\tcrossOrigin: 'anonymous',\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\t\t\tvar self = this;\n\n\t\t\tvar resourceDirectory = THREE.LoaderUtils.extractUrlBase( url );\n\n\t\t\tvar loader = new THREE.FileLoader( this.manager );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\ttry {\n\n\t\t\t\t\tvar scene = self.parse( buffer, resourceDirectory );\n\t\t\t\t\tonLoad( scene );\n\n\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\t\tif ( onError ) onError( error );\n\n\t\t\t\t\t\tself.manager.itemError( url );\n\n\t\t\t\t\t}, 0 );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\t\t},\n\n\t\tsetCrossOrigin: function ( value ) {\n\n\t\t\tthis.crossOrigin = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tparse: function ( FBXBuffer, resourceDirectory ) {\n\n\t\t\tif ( isFbxFormatBinary( FBXBuffer ) ) {\n\n\t\t\t\tfbxTree = new BinaryParser().parse( FBXBuffer );\n\n\t\t\t} else {\n\n\t\t\t\tvar FBXText = convertArrayBufferToString( FBXBuffer );\n\n\t\t\t\tif ( ! isFbxFormatASCII( FBXText ) ) {\n\n\t\t\t\t\tthrow new Error( 'THREE.FBXLoader: Unknown format.' );\n\n\t\t\t\t}\n\n\t\t\t\tif ( getFbxVersion( FBXText ) < 7000 ) {\n\n\t\t\t\t\tthrow new Error( 'THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion( FBXText ) );\n\n\t\t\t\t}\n\n\t\t\t\tfbxTree = new TextParser().parse( FBXText );\n\n\t\t\t}\n\n\t\t\t//console.log( FBXTree );\n\n\t\t\tvar textureLoader = new THREE.TextureLoader( this.manager ).setPath( resourceDirectory ).setCrossOrigin( this.crossOrigin );\n\n\t\t\treturn new FBXTreeParser( textureLoader ).parse( fbxTree );\n\n\t\t}\n\n\t};\n\n\t// Parse the FBXTree object returned by the BinaryParser or TextParser and return a THREE.Group\n\tfunction FBXTreeParser( textureLoader ) {\n\n\t\tthis.textureLoader = textureLoader;\n\n\t}\n\n\tFBXTreeParser.prototype = {\n\n\t\tconstructor: FBXTreeParser,\n\n\t\tparse: function () {\n\n\t\t\tconnections = this.parseConnections();\n\n\t\t\tvar images = this.parseImages();\n\t\t\tvar textures = this.parseTextures( images );\n\t\t\tvar materials = this.parseMaterials( textures );\n\t\t\tvar deformers = this.parseDeformers();\n\t\t\tvar geometryMap = new GeometryParser().parse( deformers );\n\n\t\t\tthis.parseScene( deformers, geometryMap, materials );\n\n\t\t\treturn sceneGraph;\n\n\t\t},\n\n\t\t// Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n\t\t// and details the connection type\n\t\tparseConnections: function () {\n\n\t\t\tvar connectionMap = new Map();\n\n\t\t\tif ( 'Connections' in fbxTree ) {\n\n\t\t\t\tvar rawConnections = fbxTree.Connections.connections;\n\n\t\t\t\trawConnections.forEach( function ( rawConnection ) {\n\n\t\t\t\t\tvar fromID = rawConnection[ 0 ];\n\t\t\t\t\tvar toID = rawConnection[ 1 ];\n\t\t\t\t\tvar relationship = rawConnection[ 2 ];\n\n\t\t\t\t\tif ( ! connectionMap.has( fromID ) ) {\n\n\t\t\t\t\t\tconnectionMap.set( fromID, {\n\t\t\t\t\t\t\tparents: [],\n\t\t\t\t\t\t\tchildren: []\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar parentRelationship = { ID: toID, relationship: relationship };\n\t\t\t\t\tconnectionMap.get( fromID ).parents.push( parentRelationship );\n\n\t\t\t\t\tif ( ! connectionMap.has( toID ) ) {\n\n\t\t\t\t\t\tconnectionMap.set( toID, {\n\t\t\t\t\t\t\tparents: [],\n\t\t\t\t\t\t\tchildren: []\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar childRelationship = { ID: fromID, relationship: relationship };\n\t\t\t\t\tconnectionMap.get( toID ).children.push( childRelationship );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\treturn connectionMap;\n\n\t\t},\n\n\t\t// Parse FBXTree.Objects.Video for embedded image data\n\t\t// These images are connected to textures in FBXTree.Objects.Textures\n\t\t// via FBXTree.Connections.\n\t\tparseImages: function () {\n\n\t\t\tvar images = {};\n\t\t\tvar blobs = {};\n\n\t\t\tif ( 'Video' in fbxTree.Objects ) {\n\n\t\t\t\tvar videoNodes = fbxTree.Objects.Video;\n\n\t\t\t\tfor ( var nodeID in videoNodes ) {\n\n\t\t\t\t\tvar videoNode = videoNodes[ nodeID ];\n\n\t\t\t\t\tvar id = parseInt( nodeID );\n\n\t\t\t\t\timages[ id ] = videoNode.RelativeFilename || videoNode.Filename;\n\n\t\t\t\t\t// raw image data is in videoNode.Content\n\t\t\t\t\tif ( 'Content' in videoNode ) {\n\n\t\t\t\t\t\tvar arrayBufferContent = ( videoNode.Content instanceof ArrayBuffer ) && ( videoNode.Content.byteLength > 0 );\n\t\t\t\t\t\tvar base64Content = ( typeof videoNode.Content === 'string' ) && ( videoNode.Content !== '' );\n\n\t\t\t\t\t\tif ( arrayBufferContent || base64Content ) {\n\n\t\t\t\t\t\t\tvar image = this.parseImage( videoNodes[ nodeID ] );\n\n\t\t\t\t\t\t\tblobs[ videoNode.RelativeFilename || videoNode.Filename ] = image;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( var id in images ) {\n\n\t\t\t\tvar filename = images[ id ];\n\n\t\t\t\tif ( blobs[ filename ] !== undefined ) images[ id ] = blobs[ filename ];\n\t\t\t\telse images[ id ] = images[ id ].split( '\\\\' ).pop();\n\n\t\t\t}\n\n\t\t\treturn images;\n\n\t\t},\n\n\t\t// Parse embedded image data in FBXTree.Video.Content\n\t\tparseImage: function ( videoNode ) {\n\n\t\t\tvar content = videoNode.Content;\n\t\t\tvar fileName = videoNode.RelativeFilename || videoNode.Filename;\n\t\t\tvar extension = fileName.slice( fileName.lastIndexOf( '.' ) + 1 ).toLowerCase();\n\n\t\t\tvar type;\n\n\t\t\tswitch ( extension ) {\n\n\t\t\t\tcase 'bmp':\n\n\t\t\t\t\ttype = 'image/bmp';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'jpg':\n\t\t\t\tcase 'jpeg':\n\n\t\t\t\t\ttype = 'image/jpeg';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'png':\n\n\t\t\t\t\ttype = 'image/png';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'tif':\n\n\t\t\t\t\ttype = 'image/tiff';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'tga':\n\n\t\t\t\t\tif ( typeof THREE.TGALoader !== 'function' ) {\n\n\t\t\t\t\t\tconsole.warn( 'FBXLoader: THREE.TGALoader is required to load TGA textures' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( THREE.Loader.Handlers.get( '.tga' ) === null ) {\n\n\t\t\t\t\t\t\tTHREE.Loader.Handlers.add( /\\.tga$/i, new THREE.TGALoader() );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttype = 'image/tga';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tconsole.warn( 'FBXLoader: Image type \"' + extension + '\" is not supported.' );\n\t\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( typeof content === 'string' ) { // ASCII format\n\n\t\t\t\treturn 'data:' + type + ';base64,' + content;\n\n\t\t\t} else { // Binary Format\n\n\t\t\t\tvar array = new Uint8Array( content );\n\t\t\t\treturn window.URL.createObjectURL( new Blob( [ array ], { type: type } ) );\n\n\t\t\t}\n\n\t\t},\n\n\t\t// Parse nodes in FBXTree.Objects.Texture\n\t\t// These contain details such as UV scaling, cropping, rotation etc and are connected\n\t\t// to images in FBXTree.Objects.Video\n\t\tparseTextures: function ( images ) {\n\n\t\t\tvar textureMap = new Map();\n\n\t\t\tif ( 'Texture' in fbxTree.Objects ) {\n\n\t\t\t\tvar textureNodes = fbxTree.Objects.Texture;\n\t\t\t\tfor ( var nodeID in textureNodes ) {\n\n\t\t\t\t\tvar texture = this.parseTexture( textureNodes[ nodeID ], images );\n\t\t\t\t\ttextureMap.set( parseInt( nodeID ), texture );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn textureMap;\n\n\t\t},\n\n\t\t// Parse individual node in FBXTree.Objects.Texture\n\t\tparseTexture: function ( textureNode, images ) {\n\n\t\t\tvar texture = this.loadTexture( textureNode, images );\n\n\t\t\ttexture.ID = textureNode.id;\n\n\t\t\ttexture.name = textureNode.attrName;\n\n\t\t\tvar wrapModeU = textureNode.WrapModeU;\n\t\t\tvar wrapModeV = textureNode.WrapModeV;\n\n\t\t\tvar valueU = wrapModeU !== undefined ? wrapModeU.value : 0;\n\t\t\tvar valueV = wrapModeV !== undefined ? wrapModeV.value : 0;\n\n\t\t\t// http://download.autodesk.com/us/fbx/SDKdocs/FBX_SDK_Help/files/fbxsdkref/class_k_fbx_texture.html#889640e63e2e681259ea81061b85143a\n\t\t\t// 0: repeat(default), 1: clamp\n\n\t\t\ttexture.wrapS = valueU === 0 ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n\t\t\ttexture.wrapT = valueV === 0 ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n\n\t\t\tif ( 'Scaling' in textureNode ) {\n\n\t\t\t\tvar values = textureNode.Scaling.value;\n\n\t\t\t\ttexture.repeat.x = values[ 0 ];\n\t\t\t\ttexture.repeat.y = values[ 1 ];\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t},\n\n\t\t// load a texture specified as a blob or data URI, or via an external URL using THREE.TextureLoader\n\t\tloadTexture: function ( textureNode, images ) {\n\n\t\t\tvar fileName;\n\n\t\t\tvar currentPath = this.textureLoader.path;\n\n\t\t\tvar children = connections.get( textureNode.id ).children;\n\n\t\t\tif ( children !== undefined && children.length > 0 && images[ children[ 0 ].ID ] !== undefined ) {\n\n\t\t\t\tfileName = images[ children[ 0 ].ID ];\n\n\t\t\t\tif ( fileName.indexOf( 'blob:' ) === 0 || fileName.indexOf( 'data:' ) === 0 ) {\n\n\t\t\t\t\tthis.textureLoader.setPath( undefined );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar texture;\n\n\t\t\tvar extension = textureNode.FileName.slice( - 3 ).toLowerCase();\n\n\t\t\tif ( extension === 'tga' ) {\n\n\t\t\t\tvar loader = THREE.Loader.Handlers.get( '.tga' );\n\n\t\t\t\tif ( loader === null ) {\n\n\t\t\t\t\tconsole.warn( 'FBXLoader: TGALoader not found, creating empty placeholder texture for', fileName );\n\t\t\t\t\ttexture = new THREE.Texture();\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttexture = loader.load( fileName );\n\n\t\t\t\t}\n\n\t\t\t} else if ( extension === 'psd' ) {\n\n\t\t\t\tconsole.warn( 'FBXLoader: PSD textures are not supported, creating empty placeholder texture for', fileName );\n\t\t\t\ttexture = new THREE.Texture();\n\n\t\t\t} else {\n\n\t\t\t\ttexture = this.textureLoader.load( fileName );\n\n\t\t\t}\n\n\t\t\tthis.textureLoader.setPath( currentPath );\n\n\t\t\treturn texture;\n\n\t\t},\n\n\t\t// Parse nodes in FBXTree.Objects.Material\n\t\tparseMaterials: function ( textureMap ) {\n\n\t\t\tvar materialMap = new Map();\n\n\t\t\tif ( 'Material' in fbxTree.Objects ) {\n\n\t\t\t\tvar materialNodes = fbxTree.Objects.Material;\n\n\t\t\t\tfor ( var nodeID in materialNodes ) {\n\n\t\t\t\t\tvar material = this.parseMaterial( materialNodes[ nodeID ], textureMap );\n\n\t\t\t\t\tif ( material !== null ) materialMap.set( parseInt( nodeID ), material );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn materialMap;\n\n\t\t},\n\n\t\t// Parse single node in FBXTree.Objects.Material\n\t\t// Materials are connected to texture maps in FBXTree.Objects.Textures\n\t\t// FBX format currently only supports Lambert and Phong shading models\n\t\tparseMaterial: function ( materialNode, textureMap ) {\n\n\t\t\tvar ID = materialNode.id;\n\t\t\tvar name = materialNode.attrName;\n\t\t\tvar type = materialNode.ShadingModel;\n\n\t\t\t// Case where FBX wraps shading model in property object.\n\t\t\tif ( typeof type === 'object' ) {\n\n\t\t\t\ttype = type.value;\n\n\t\t\t}\n\n\t\t\t// Ignore unused materials which don't have any connections.\n\t\t\tif ( ! connections.has( ID ) ) return null;\n\n\t\t\tvar parameters = this.parseParameters( materialNode, textureMap, ID );\n\n\t\t\tvar material;\n\n\t\t\tswitch ( type.toLowerCase() ) {\n\n\t\t\t\tcase 'phong':\n\t\t\t\t\tmaterial = new THREE.MeshPhongMaterial();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'lambert':\n\t\t\t\t\tmaterial = new THREE.MeshLambertMaterial();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type );\n\t\t\t\t\tmaterial = new THREE.MeshPhongMaterial( { color: 0x3300ff } );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tmaterial.setValues( parameters );\n\t\t\tmaterial.name = name;\n\n\t\t\treturn material;\n\n\t\t},\n\n\t\t// Parse FBX material and return parameters suitable for a three.js material\n\t\t// Also parse the texture map and return any textures associated with the material\n\t\tparseParameters: function ( materialNode, textureMap, ID ) {\n\n\t\t\tvar parameters = {};\n\n\t\t\tif ( materialNode.BumpFactor ) {\n\n\t\t\t\tparameters.bumpScale = materialNode.BumpFactor.value;\n\n\t\t\t}\n\t\t\tif ( materialNode.Diffuse ) {\n\n\t\t\t\tparameters.color = new THREE.Color().fromArray( materialNode.Diffuse.value );\n\n\t\t\t} else if ( materialNode.DiffuseColor && materialNode.DiffuseColor.type === 'Color' ) {\n\n\t\t\t\t// The blender exporter exports diffuse here instead of in materialNode.Diffuse\n\t\t\t\tparameters.color = new THREE.Color().fromArray( materialNode.DiffuseColor.value );\n\n\t\t\t}\n\t\t\tif ( materialNode.DisplacementFactor ) {\n\n\t\t\t\tparameters.displacementScale = materialNode.DisplacementFactor.value;\n\n\t\t\t}\n\t\t\tif ( materialNode.Emissive ) {\n\n\t\t\t\tparameters.emissive = new THREE.Color().fromArray( materialNode.Emissive.value );\n\n\t\t\t} else if ( materialNode.EmissiveColor && materialNode.EmissiveColor.type === 'Color' ) {\n\n\t\t\t\t// The blender exporter exports emissive color here instead of in materialNode.Emissive\n\t\t\t\tparameters.emissive = new THREE.Color().fromArray( materialNode.EmissiveColor.value );\n\n\t\t\t}\n\t\t\tif ( materialNode.EmissiveFactor ) {\n\n\t\t\t\tparameters.emissiveIntensity = parseFloat( materialNode.EmissiveFactor.value );\n\n\t\t\t}\n\t\t\tif ( materialNode.Opacity ) {\n\n\t\t\t\tparameters.opacity = parseFloat( materialNode.Opacity.value );\n\n\t\t\t}\n\t\t\tif ( parameters.opacity < 1.0 ) {\n\n\t\t\t\tparameters.transparent = true;\n\n\t\t\t}\n\t\t\tif ( materialNode.ReflectionFactor ) {\n\n\t\t\t\tparameters.reflectivity = materialNode.ReflectionFactor.value;\n\n\t\t\t}\n\t\t\tif ( materialNode.Shininess ) {\n\n\t\t\t\tparameters.shininess = materialNode.Shininess.value;\n\n\t\t\t}\n\t\t\tif ( materialNode.Specular ) {\n\n\t\t\t\tparameters.specular = new THREE.Color().fromArray( materialNode.Specular.value );\n\n\t\t\t} else if ( materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color' ) {\n\n\t\t\t\t// The blender exporter exports specular color here instead of in materialNode.Specular\n\t\t\t\tparameters.specular = new THREE.Color().fromArray( materialNode.SpecularColor.value );\n\n\t\t\t}\n\n\t\t\tvar self = this;\n\t\t\tconnections.get( ID ).children.forEach( function ( child ) {\n\n\t\t\t\tvar type = child.relationship;\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase 'Bump':\n\t\t\t\t\t\tparameters.bumpMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'DiffuseColor':\n\t\t\t\t\t\tparameters.map = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'DisplacementColor':\n\t\t\t\t\t\tparameters.displacementMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\tbreak;\n\n\n\t\t\t\t\tcase 'EmissiveColor':\n\t\t\t\t\t\tparameters.emissiveMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'NormalMap':\n\t\t\t\t\t\tparameters.normalMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'ReflectionColor':\n\t\t\t\t\t\tparameters.envMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\tparameters.envMap.mapping = THREE.EquirectangularReflectionMapping;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpecularColor':\n\t\t\t\t\t\tparameters.specularMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'TransparentColor':\n\t\t\t\t\t\tparameters.alphaMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\tparameters.transparent = true;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'AmbientColor':\n\t\t\t\t\tcase 'ShininessExponent': // AKA glossiness map\n\t\t\t\t\tcase 'SpecularFactor': // AKA specularLevel\n\t\t\t\t\tcase 'VectorDisplacementColor': // NOTE: Seems to be a copy of DisplacementColor\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\treturn parameters;\n\n\t\t},\n\n\t\t// get a texture from the textureMap for use by a material.\n\t\tgetTexture: function ( textureMap, id ) {\n\n\t\t\t// if the texture is a layered texture, just use the first layer and issue a warning\n\t\t\tif ( 'LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture ) {\n\n\t\t\t\tconsole.warn( 'THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.' );\n\t\t\t\tid = connections.get( id ).children[ 0 ].ID;\n\n\t\t\t}\n\n\t\t\treturn textureMap.get( id );\n\n\t\t},\n\n\t\t// Parse nodes in FBXTree.Objects.Deformer\n\t\t// Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n\t\t// Generates map of Skeleton-like objects for use later when generating and binding skeletons.\n\t\tparseDeformers: function () {\n\n\t\t\tvar skeletons = {};\n\t\t\tvar morphTargets = {};\n\n\t\t\tif ( 'Deformer' in fbxTree.Objects ) {\n\n\t\t\t\tvar DeformerNodes = fbxTree.Objects.Deformer;\n\n\t\t\t\tfor ( var nodeID in DeformerNodes ) {\n\n\t\t\t\t\tvar deformerNode = DeformerNodes[ nodeID ];\n\n\t\t\t\t\tvar relationships = connections.get( parseInt( nodeID ) );\n\n\t\t\t\t\tif ( deformerNode.attrType === 'Skin' ) {\n\n\t\t\t\t\t\tvar skeleton = this.parseSkeleton( relationships, DeformerNodes );\n\t\t\t\t\t\tskeleton.ID = nodeID;\n\n\t\t\t\t\t\tif ( relationships.parents.length > 1 ) console.warn( 'THREE.FBXLoader: skeleton attached to more than one geometry is not supported.' );\n\t\t\t\t\t\tskeleton.geometryID = relationships.parents[ 0 ].ID;\n\n\t\t\t\t\t\tskeletons[ nodeID ] = skeleton;\n\n\t\t\t\t\t} else if ( deformerNode.attrType === 'BlendShape' ) {\n\n\t\t\t\t\t\tvar morphTarget = {\n\t\t\t\t\t\t\tid: nodeID,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tmorphTarget.rawTargets = this.parseMorphTargets( relationships, DeformerNodes );\n\t\t\t\t\t\tmorphTarget.id = nodeID;\n\n\t\t\t\t\t\tif ( relationships.parents.length > 1 ) console.warn( 'THREE.FBXLoader: morph target attached to more than one geometry is not supported.' );\n\n\t\t\t\t\t\tmorphTargets[ nodeID ] = morphTarget;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {\n\n\t\t\t\tskeletons: skeletons,\n\t\t\t\tmorphTargets: morphTargets,\n\n\t\t\t};\n\n\t\t},\n\n\t\t// Parse single nodes in FBXTree.Objects.Deformer\n\t\t// The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\n\t\t// Each skin node represents a skeleton and each cluster node represents a bone\n\t\tparseSkeleton: function ( relationships, deformerNodes ) {\n\n\t\t\tvar rawBones = [];\n\n\t\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\t\tvar boneNode = deformerNodes[ child.ID ];\n\n\t\t\t\tif ( boneNode.attrType !== 'Cluster' ) return;\n\n\t\t\t\tvar rawBone = {\n\n\t\t\t\t\tID: child.ID,\n\t\t\t\t\tindices: [],\n\t\t\t\t\tweights: [],\n\t\t\t\t\ttransform: new THREE.Matrix4().fromArray( boneNode.Transform.a ),\n\t\t\t\t\ttransformLink: new THREE.Matrix4().fromArray( boneNode.TransformLink.a ),\n\t\t\t\t\tlinkMode: boneNode.Mode,\n\n\t\t\t\t};\n\n\t\t\t\tif ( 'Indexes' in boneNode ) {\n\n\t\t\t\t\trawBone.indices = boneNode.Indexes.a;\n\t\t\t\t\trawBone.weights = boneNode.Weights.a;\n\n\t\t\t\t}\n\n\t\t\t\trawBones.push( rawBone );\n\n\t\t\t} );\n\n\t\t\treturn {\n\n\t\t\t\trawBones: rawBones,\n\t\t\t\tbones: []\n\n\t\t\t};\n\n\t\t},\n\n\t\t// The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\n\t\tparseMorphTargets: function ( relationships, deformerNodes ) {\n\n\t\t\tvar rawMorphTargets = [];\n\n\t\t\tfor ( var i = 0; i < relationships.children.length; i ++ ) {\n\n\t\t\t\tif ( i === 8 ) {\n\n\t\t\t\t\tconsole.warn( 'FBXLoader: maximum of 8 morph targets supported. Ignoring additional targets.' );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tvar child = relationships.children[ i ];\n\n\t\t\t\tvar morphTargetNode = deformerNodes[ child.ID ];\n\n\t\t\t\tvar rawMorphTarget = {\n\n\t\t\t\t\tname: morphTargetNode.attrName,\n\t\t\t\t\tinitialWeight: morphTargetNode.DeformPercent,\n\t\t\t\t\tid: morphTargetNode.id,\n\t\t\t\t\tfullWeights: morphTargetNode.FullWeights.a\n\n\t\t\t\t};\n\n\t\t\t\tif ( morphTargetNode.attrType !== 'BlendShapeChannel' ) return;\n\n\t\t\t\tvar targetRelationships = connections.get( parseInt( child.ID ) );\n\n\t\t\t\ttargetRelationships.children.forEach( function ( child ) {\n\n\t\t\t\t\tif ( child.relationship === undefined ) rawMorphTarget.geoID = child.ID;\n\n\t\t\t\t} );\n\n\t\t\t\trawMorphTargets.push( rawMorphTarget );\n\n\t\t\t}\n\n\t\t\treturn rawMorphTargets;\n\n\t\t},\n\n\t\t// create the main THREE.Group() to be returned by the loader\n\t\tparseScene: function ( deformers, geometryMap, materialMap ) {\n\n\t\t\tsceneGraph = new THREE.Group();\n\n\t\t\tvar modelMap = this.parseModels( deformers.skeletons, geometryMap, materialMap );\n\n\t\t\tvar modelNodes = fbxTree.Objects.Model;\n\n\t\t\tvar self = this;\n\t\t\tmodelMap.forEach( function ( model ) {\n\n\t\t\t\tvar modelNode = modelNodes[ model.ID ];\n\t\t\t\tself.setLookAtProperties( model, modelNode );\n\n\t\t\t\tvar parentConnections = connections.get( model.ID ).parents;\n\n\t\t\t\tparentConnections.forEach( function ( connection ) {\n\n\t\t\t\t\tvar parent = modelMap.get( connection.ID );\n\t\t\t\t\tif ( parent !== undefined ) parent.add( model );\n\n\t\t\t\t} );\n\n\t\t\t\tif ( model.parent === null ) {\n\n\t\t\t\t\tsceneGraph.add( model );\n\n\t\t\t\t}\n\n\n\t\t\t} );\n\n\t\t\tthis.bindSkeleton( deformers.skeletons, geometryMap, modelMap );\n\n\t\t\tthis.createAmbientLight();\n\n\t\t\tthis.setupMorphMaterials();\n\n\t\t\tvar animations = new AnimationParser().parse();\n\n\t\t\t// if all the models where already combined in a single group, just return that\n\t\t\tif ( sceneGraph.children.length === 1 && sceneGraph.children[ 0 ].isGroup ) {\n\n\t\t\t\tsceneGraph.children[ 0 ].animations = animations;\n\t\t\t\tsceneGraph = sceneGraph.children[ 0 ];\n\n\t\t\t}\n\n\t\t\tsceneGraph.animations = animations;\n\n\t\t},\n\n\t\t// parse nodes in FBXTree.Objects.Model\n\t\tparseModels: function ( skeletons, geometryMap, materialMap ) {\n\n\t\t\tvar modelMap = new Map();\n\t\t\tvar modelNodes = fbxTree.Objects.Model;\n\n\t\t\tfor ( var nodeID in modelNodes ) {\n\n\t\t\t\tvar id = parseInt( nodeID );\n\t\t\t\tvar node = modelNodes[ nodeID ];\n\t\t\t\tvar relationships = connections.get( id );\n\n\t\t\t\tvar model = this.buildSkeleton( relationships, skeletons, id, node.attrName );\n\n\t\t\t\tif ( ! model ) {\n\n\t\t\t\t\tswitch ( node.attrType ) {\n\n\t\t\t\t\t\tcase 'Camera':\n\t\t\t\t\t\t\tmodel = this.createCamera( relationships );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'Light':\n\t\t\t\t\t\t\tmodel = this.createLight( relationships );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'Mesh':\n\t\t\t\t\t\t\tmodel = this.createMesh( relationships, geometryMap, materialMap );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'NurbsCurve':\n\t\t\t\t\t\t\tmodel = this.createCurve( relationships, geometryMap );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'LimbNode': // usually associated with a Bone, however if a Bone was not created we'll make a Group instead\n\t\t\t\t\t\tcase 'Null':\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tmodel = new THREE.Group();\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmodel.name = THREE.PropertyBinding.sanitizeNodeName( node.attrName );\n\t\t\t\t\tmodel.ID = id;\n\n\t\t\t\t}\n\n\t\t\t\tthis.setModelTransforms( model, node );\n\t\t\t\tmodelMap.set( id, model );\n\n\t\t\t}\n\n\t\t\treturn modelMap;\n\n\t\t},\n\n\t\tbuildSkeleton: function ( relationships, skeletons, id, name ) {\n\n\t\t\tvar bone = null;\n\n\t\t\trelationships.parents.forEach( function ( parent ) {\n\n\t\t\t\tfor ( var ID in skeletons ) {\n\n\t\t\t\t\tvar skeleton = skeletons[ ID ];\n\n\t\t\t\t\tskeleton.rawBones.forEach( function ( rawBone, i ) {\n\n\t\t\t\t\t\tif ( rawBone.ID === parent.ID ) {\n\n\t\t\t\t\t\t\tvar subBone = bone;\n\t\t\t\t\t\t\tbone = new THREE.Bone();\n\t\t\t\t\t\t\tbone.matrixWorld.copy( rawBone.transformLink );\n\n\t\t\t\t\t\t\t// set name and id here - otherwise in cases where \"subBone\" is created it will not have a name / id\n\t\t\t\t\t\t\tbone.name = THREE.PropertyBinding.sanitizeNodeName( name );\n\t\t\t\t\t\t\tbone.ID = id;\n\n\t\t\t\t\t\t\tskeleton.bones[ i ] = bone;\n\n\t\t\t\t\t\t\t// In cases where a bone is shared between multiple meshes\n\t\t\t\t\t\t\t// duplicate the bone here and and it as a child of the first bone\n\t\t\t\t\t\t\tif ( subBone !== null ) {\n\n\t\t\t\t\t\t\t\tbone.add( subBone );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\treturn bone;\n\n\t\t},\n\n\t\t// create a THREE.PerspectiveCamera or THREE.OrthographicCamera\n\t\tcreateCamera: function ( relationships ) {\n\n\t\t\tvar model;\n\t\t\tvar cameraAttribute;\n\n\t\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\t\tvar attr = fbxTree.Objects.NodeAttribute[ child.ID ];\n\n\t\t\t\tif ( attr !== undefined ) {\n\n\t\t\t\t\tcameraAttribute = attr;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tif ( cameraAttribute === undefined ) {\n\n\t\t\t\tmodel = new THREE.Object3D();\n\n\t\t\t} else {\n\n\t\t\t\tvar type = 0;\n\t\t\t\tif ( cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1 ) {\n\n\t\t\t\t\ttype = 1;\n\n\t\t\t\t}\n\n\t\t\t\tvar nearClippingPlane = 1;\n\t\t\t\tif ( cameraAttribute.NearPlane !== undefined ) {\n\n\t\t\t\t\tnearClippingPlane = cameraAttribute.NearPlane.value / 1000;\n\n\t\t\t\t}\n\n\t\t\t\tvar farClippingPlane = 1000;\n\t\t\t\tif ( cameraAttribute.FarPlane !== undefined ) {\n\n\t\t\t\t\tfarClippingPlane = cameraAttribute.FarPlane.value / 1000;\n\n\t\t\t\t}\n\n\n\t\t\t\tvar width = window.innerWidth;\n\t\t\t\tvar height = window.innerHeight;\n\n\t\t\t\tif ( cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined ) {\n\n\t\t\t\t\twidth = cameraAttribute.AspectWidth.value;\n\t\t\t\t\theight = cameraAttribute.AspectHeight.value;\n\n\t\t\t\t}\n\n\t\t\t\tvar aspect = width / height;\n\n\t\t\t\tvar fov = 45;\n\t\t\t\tif ( cameraAttribute.FieldOfView !== undefined ) {\n\n\t\t\t\t\tfov = cameraAttribute.FieldOfView.value;\n\n\t\t\t\t}\n\n\t\t\t\tvar focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase 0: // Perspective\n\t\t\t\t\t\tmodel = new THREE.PerspectiveCamera( fov, aspect, nearClippingPlane, farClippingPlane );\n\t\t\t\t\t\tif ( focalLength !== null ) model.setFocalLength( focalLength );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 1: // Orthographic\n\t\t\t\t\t\tmodel = new THREE.OrthographicCamera( - width / 2, width / 2, height / 2, - height / 2, nearClippingPlane, farClippingPlane );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Unknown camera type ' + type + '.' );\n\t\t\t\t\t\tmodel = new THREE.Object3D();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn model;\n\n\t\t},\n\n\t\t// Create a THREE.DirectionalLight, THREE.PointLight or THREE.SpotLight\n\t\tcreateLight: function ( relationships ) {\n\n\t\t\tvar model;\n\t\t\tvar lightAttribute;\n\n\t\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\t\tvar attr = fbxTree.Objects.NodeAttribute[ child.ID ];\n\n\t\t\t\tif ( attr !== undefined ) {\n\n\t\t\t\t\tlightAttribute = attr;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tif ( lightAttribute === undefined ) {\n\n\t\t\t\tmodel = new THREE.Object3D();\n\n\t\t\t} else {\n\n\t\t\t\tvar type;\n\n\t\t\t\t// LightType can be undefined for Point lights\n\t\t\t\tif ( lightAttribute.LightType === undefined ) {\n\n\t\t\t\t\ttype = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttype = lightAttribute.LightType.value;\n\n\t\t\t\t}\n\n\t\t\t\tvar color = 0xffffff;\n\n\t\t\t\tif ( lightAttribute.Color !== undefined ) {\n\n\t\t\t\t\tcolor = new THREE.Color().fromArray( lightAttribute.Color.value );\n\n\t\t\t\t}\n\n\t\t\t\tvar intensity = ( lightAttribute.Intensity === undefined ) ? 1 : lightAttribute.Intensity.value / 100;\n\n\t\t\t\t// light disabled\n\t\t\t\tif ( lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0 ) {\n\n\t\t\t\t\tintensity = 0;\n\n\t\t\t\t}\n\n\t\t\t\tvar distance = 0;\n\t\t\t\tif ( lightAttribute.FarAttenuationEnd !== undefined ) {\n\n\t\t\t\t\tif ( lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0 ) {\n\n\t\t\t\t\t\tdistance = 0;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tdistance = lightAttribute.FarAttenuationEnd.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// TODO: could this be calculated linearly from FarAttenuationStart to FarAttenuationEnd?\n\t\t\t\tvar decay = 1;\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase 0: // Point\n\t\t\t\t\t\tmodel = new THREE.PointLight( color, intensity, distance, decay );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 1: // Directional\n\t\t\t\t\t\tmodel = new THREE.DirectionalLight( color, intensity );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 2: // Spot\n\t\t\t\t\t\tvar angle = Math.PI / 3;\n\n\t\t\t\t\t\tif ( lightAttribute.InnerAngle !== undefined ) {\n\n\t\t\t\t\t\t\tangle = THREE.Math.degToRad( lightAttribute.InnerAngle.value );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar penumbra = 0;\n\t\t\t\t\t\tif ( lightAttribute.OuterAngle !== undefined ) {\n\n\t\t\t\t\t\t// TODO: this is not correct - FBX calculates outer and inner angle in degrees\n\t\t\t\t\t\t// with OuterAngle > InnerAngle && OuterAngle <= Math.PI\n\t\t\t\t\t\t// while three.js uses a penumbra between (0, 1) to attenuate the inner angle\n\t\t\t\t\t\t\tpenumbra = THREE.Math.degToRad( lightAttribute.OuterAngle.value );\n\t\t\t\t\t\t\tpenumbra = Math.max( penumbra, 1 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmodel = new THREE.SpotLight( color, intensity, distance, angle, penumbra, decay );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a THREE.PointLight.' );\n\t\t\t\t\t\tmodel = new THREE.PointLight( color, intensity );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tif ( lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1 ) {\n\n\t\t\t\t\tmodel.castShadow = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn model;\n\n\t\t},\n\n\t\tcreateMesh: function ( relationships, geometryMap, materialMap ) {\n\n\t\t\tvar model;\n\t\t\tvar geometry = null;\n\t\t\tvar material = null;\n\t\t\tvar materials = [];\n\n\t\t\t// get geometry and materials(s) from connections\n\t\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\t\tif ( geometryMap.has( child.ID ) ) {\n\n\t\t\t\t\tgeometry = geometryMap.get( child.ID );\n\n\t\t\t\t}\n\n\t\t\t\tif ( materialMap.has( child.ID ) ) {\n\n\t\t\t\t\tmaterials.push( materialMap.get( child.ID ) );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tif ( materials.length > 1 ) {\n\n\t\t\t\tmaterial = materials;\n\n\t\t\t} else if ( materials.length > 0 ) {\n\n\t\t\t\tmaterial = materials[ 0 ];\n\n\t\t\t} else {\n\n\t\t\t\tmaterial = new THREE.MeshPhongMaterial( { color: 0xcccccc } );\n\t\t\t\tmaterials.push( material );\n\n\t\t\t}\n\n\t\t\tif ( 'color' in geometry.attributes ) {\n\n\t\t\t\tmaterials.forEach( function ( material ) {\n\n\t\t\t\t\tmaterial.vertexColors = THREE.VertexColors;\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tif ( geometry.FBX_Deformer ) {\n\n\t\t\t\tmaterials.forEach( function ( material ) {\n\n\t\t\t\t\tmaterial.skinning = true;\n\n\t\t\t\t} );\n\n\t\t\t\tmodel = new THREE.SkinnedMesh( geometry, material );\n\n\t\t\t} else {\n\n\t\t\t\tmodel = new THREE.Mesh( geometry, material );\n\n\t\t\t}\n\n\t\t\treturn model;\n\n\t\t},\n\n\t\tcreateCurve: function ( relationships, geometryMap ) {\n\n\t\t\tvar geometry = relationships.children.reduce( function ( geo, child ) {\n\n\t\t\t\tif ( geometryMap.has( child.ID ) ) geo = geometryMap.get( child.ID );\n\n\t\t\t\treturn geo;\n\n\t\t\t}, null );\n\n\t\t\t// FBX does not list materials for Nurbs lines, so we'll just put our own in here.\n\t\t\tvar material = new THREE.LineBasicMaterial( { color: 0x3300ff, linewidth: 1 } );\n\t\t\treturn new THREE.Line( geometry, material );\n\n\t\t},\n\n\t\t// parse the model node for transform details and apply them to the model\n\t\tsetModelTransforms: function ( model, modelNode ) {\n\n\t\t\tvar transformData = {};\n\n\t\t\tif ( 'RotationOrder' in modelNode ) transformData.eulerOrder = parseInt( modelNode.RotationOrder.value );\n\t\t\tif ( 'Lcl_Translation' in modelNode ) transformData.translation = modelNode.Lcl_Translation.value;\n\t\t\tif ( 'RotationOffset' in modelNode ) transformData.rotationOffset = modelNode.RotationOffset.value;\n\t\t\tif ( 'Lcl_Rotation' in modelNode ) transformData.rotation = modelNode.Lcl_Rotation.value;\n\t\t\tif ( 'PreRotation' in modelNode ) transformData.preRotation = modelNode.PreRotation.value;\n\t\t\tif ( 'PostRotation' in modelNode ) transformData.postRotation = modelNode.PostRotation.value;\n\t\t\tif ( 'Lcl_Scaling' in modelNode ) transformData.scale = modelNode.Lcl_Scaling.value;\n\n\t\t\tvar transform = generateTransform( transformData );\n\n\t\t\tmodel.applyMatrix( transform );\n\n\t\t},\n\n\t\tsetLookAtProperties: function ( model, modelNode ) {\n\n\t\t\tif ( 'LookAtProperty' in modelNode ) {\n\n\t\t\t\tvar children = connections.get( model.ID ).children;\n\n\t\t\t\tchildren.forEach( function ( child ) {\n\n\t\t\t\t\tif ( child.relationship === 'LookAtProperty' ) {\n\n\t\t\t\t\t\tvar lookAtTarget = fbxTree.Objects.Model[ child.ID ];\n\n\t\t\t\t\t\tif ( 'Lcl_Translation' in lookAtTarget ) {\n\n\t\t\t\t\t\t\tvar pos = lookAtTarget.Lcl_Translation.value;\n\n\t\t\t\t\t\t\t// DirectionalLight, SpotLight\n\t\t\t\t\t\t\tif ( model.target !== undefined ) {\n\n\t\t\t\t\t\t\t\tmodel.target.position.fromArray( pos );\n\t\t\t\t\t\t\t\tsceneGraph.add( model.target );\n\n\t\t\t\t\t\t\t} else { // Cameras and other Object3Ds\n\n\t\t\t\t\t\t\t\tmodel.lookAt( new THREE.Vector3().fromArray( pos ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t},\n\n\t\tbindSkeleton: function ( skeletons, geometryMap, modelMap ) {\n\n\t\t\tvar bindMatrices = this.parsePoseNodes();\n\n\t\t\tfor ( var ID in skeletons ) {\n\n\t\t\t\tvar skeleton = skeletons[ ID ];\n\n\t\t\t\tvar parents = connections.get( parseInt( skeleton.ID ) ).parents;\n\n\t\t\t\tparents.forEach( function ( parent ) {\n\n\t\t\t\t\tif ( geometryMap.has( parent.ID ) ) {\n\n\t\t\t\t\t\tvar geoID = parent.ID;\n\t\t\t\t\t\tvar geoRelationships = connections.get( geoID );\n\n\t\t\t\t\t\tgeoRelationships.parents.forEach( function ( geoConnParent ) {\n\n\t\t\t\t\t\t\tif ( modelMap.has( geoConnParent.ID ) ) {\n\n\t\t\t\t\t\t\t\tvar model = modelMap.get( geoConnParent.ID );\n\n\t\t\t\t\t\t\t\tmodel.bind( new THREE.Skeleton( skeleton.bones ), bindMatrices[ geoConnParent.ID ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t},\n\n\t\tparsePoseNodes: function () {\n\n\t\t\tvar bindMatrices = {};\n\n\t\t\tif ( 'Pose' in fbxTree.Objects ) {\n\n\t\t\t\tvar BindPoseNode = fbxTree.Objects.Pose;\n\n\t\t\t\tfor ( var nodeID in BindPoseNode ) {\n\n\t\t\t\t\tif ( BindPoseNode[ nodeID ].attrType === 'BindPose' ) {\n\n\t\t\t\t\t\tvar poseNodes = BindPoseNode[ nodeID ].PoseNode;\n\n\t\t\t\t\t\tif ( Array.isArray( poseNodes ) ) {\n\n\t\t\t\t\t\t\tposeNodes.forEach( function ( poseNode ) {\n\n\t\t\t\t\t\t\t\tbindMatrices[ poseNode.Node ] = new THREE.Matrix4().fromArray( poseNode.Matrix.a );\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tbindMatrices[ poseNodes.Node ] = new THREE.Matrix4().fromArray( poseNodes.Matrix.a );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn bindMatrices;\n\n\t\t},\n\n\t\t// Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light\n\t\tcreateAmbientLight: function () {\n\n\t\t\tif ( 'GlobalSettings' in fbxTree && 'AmbientColor' in fbxTree.GlobalSettings ) {\n\n\t\t\t\tvar ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n\t\t\t\tvar r = ambientColor[ 0 ];\n\t\t\t\tvar g = ambientColor[ 1 ];\n\t\t\t\tvar b = ambientColor[ 2 ];\n\n\t\t\t\tif ( r !== 0 || g !== 0 || b !== 0 ) {\n\n\t\t\t\t\tvar color = new THREE.Color( r, g, b );\n\t\t\t\t\tsceneGraph.add( new THREE.AmbientLight( color, 1 ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tsetupMorphMaterials: function () {\n\n\t\t\tsceneGraph.traverse( function ( child ) {\n\n\t\t\t\tif ( child.isMesh ) {\n\n\t\t\t\t\tif ( child.geometry.morphAttributes.position || child.geometry.morphAttributes.normal ) {\n\n\t\t\t\t\t\tvar uuid = child.uuid;\n\t\t\t\t\t\tvar matUuid = child.material.uuid;\n\n\t\t\t\t\t\t// if a geometry has morph targets, it cannot share the material with other geometries\n\t\t\t\t\t\tvar sharedMat = false;\n\n\t\t\t\t\t\tsceneGraph.traverse( function ( child ) {\n\n\t\t\t\t\t\t\tif ( child.isMesh ) {\n\n\t\t\t\t\t\t\t\tif ( child.material.uuid === matUuid && child.uuid !== uuid ) sharedMat = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t\tif ( sharedMat === true ) child.material = child.material.clone();\n\n\t\t\t\t\t\tchild.material.morphTargets = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t},\n\n\t};\n\n\t// parse Geometry data from FBXTree and return map of BufferGeometries\n\tfunction GeometryParser() {}\n\n\tGeometryParser.prototype = {\n\n\t\tconstructor: GeometryParser,\n\n\t\t// Parse nodes in FBXTree.Objects.Geometry\n\t\tparse: function ( deformers ) {\n\n\t\t\tvar geometryMap = new Map();\n\n\t\t\tif ( 'Geometry' in fbxTree.Objects ) {\n\n\t\t\t\tvar geoNodes = fbxTree.Objects.Geometry;\n\n\t\t\t\tfor ( var nodeID in geoNodes ) {\n\n\t\t\t\t\tvar relationships = connections.get( parseInt( nodeID ) );\n\t\t\t\t\tvar geo = this.parseGeometry( relationships, geoNodes[ nodeID ], deformers );\n\n\t\t\t\t\tgeometryMap.set( parseInt( nodeID ), geo );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn geometryMap;\n\n\t\t},\n\n\t\t// Parse single node in FBXTree.Objects.Geometry\n\t\tparseGeometry: function ( relationships, geoNode, deformers ) {\n\n\t\t\tswitch ( geoNode.attrType ) {\n\n\t\t\t\tcase 'Mesh':\n\t\t\t\t\treturn this.parseMeshGeometry( relationships, geoNode, deformers );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'NurbsCurve':\n\t\t\t\t\treturn this.parseNurbsGeometry( geoNode );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t},\n\n\t\t// Parse single node mesh geometry in FBXTree.Objects.Geometry\n\t\tparseMeshGeometry: function ( relationships, geoNode, deformers ) {\n\n\t\t\tvar skeletons = deformers.skeletons;\n\t\t\tvar morphTargets = deformers.morphTargets;\n\n\t\t\tvar modelNodes = relationships.parents.map( function ( parent ) {\n\n\t\t\t\treturn fbxTree.Objects.Model[ parent.ID ];\n\n\t\t\t} );\n\n\t\t\t// don't create geometry if it is not associated with any models\n\t\t\tif ( modelNodes.length === 0 ) return;\n\n\t\t\tvar skeleton = relationships.children.reduce( function ( skeleton, child ) {\n\n\t\t\t\tif ( skeletons[ child.ID ] !== undefined ) skeleton = skeletons[ child.ID ];\n\n\t\t\t\treturn skeleton;\n\n\t\t\t}, null );\n\n\t\t\tvar morphTarget = relationships.children.reduce( function ( morphTarget, child ) {\n\n\t\t\t\tif ( morphTargets[ child.ID ] !== undefined ) morphTarget = morphTargets[ child.ID ];\n\n\t\t\t\treturn morphTarget;\n\n\t\t\t}, null );\n\n\t\t\t// TODO: if there is more than one model associated with the geometry, AND the models have\n\t\t\t// different geometric transforms, then this will cause problems\n\t\t\t// if ( modelNodes.length > 1 ) { }\n\n\t\t\t// For now just assume one model and get the preRotations from that\n\t\t\tvar modelNode = modelNodes[ 0 ];\n\n\t\t\tvar transformData = {};\n\n\t\t\tif ( 'RotationOrder' in modelNode ) transformData.eulerOrder = modelNode.RotationOrder.value;\n\t\t\tif ( 'GeometricTranslation' in modelNode ) transformData.translation = modelNode.GeometricTranslation.value;\n\t\t\tif ( 'GeometricRotation' in modelNode ) transformData.rotation = modelNode.GeometricRotation.value;\n\t\t\tif ( 'GeometricScaling' in modelNode ) transformData.scale = modelNode.GeometricScaling.value;\n\n\t\t\tvar transform = generateTransform( transformData );\n\n\t\t\treturn this.genGeometry( geoNode, skeleton, morphTarget, transform );\n\n\t\t},\n\n\t\t// Generate a THREE.BufferGeometry from a node in FBXTree.Objects.Geometry\n\t\tgenGeometry: function ( geoNode, skeleton, morphTarget, preTransform ) {\n\n\t\t\tvar geo = new THREE.BufferGeometry();\n\t\t\tif ( geoNode.attrName ) geo.name = geoNode.attrName;\n\n\t\t\tvar geoInfo = this.parseGeoNode( geoNode, skeleton );\n\t\t\tvar buffers = this.genBuffers( geoInfo );\n\n\t\t\tvar positionAttribute = new THREE.Float32BufferAttribute( buffers.vertex, 3 );\n\n\t\t\tpreTransform.applyToBufferAttribute( positionAttribute );\n\n\t\t\tgeo.addAttribute( 'position', positionAttribute );\n\n\t\t\tif ( buffers.colors.length > 0 ) {\n\n\t\t\t\tgeo.addAttribute( 'color', new THREE.Float32BufferAttribute( buffers.colors, 3 ) );\n\n\t\t\t}\n\n\t\t\tif ( skeleton ) {\n\n\t\t\t\tgeo.addAttribute( 'skinIndex', new THREE.Uint16BufferAttribute( buffers.weightsIndices, 4 ) );\n\n\t\t\t\tgeo.addAttribute( 'skinWeight', new THREE.Float32BufferAttribute( buffers.vertexWeights, 4 ) );\n\n\t\t\t\t// used later to bind the skeleton to the model\n\t\t\t\tgeo.FBX_Deformer = skeleton;\n\n\t\t\t}\n\n\t\t\tif ( buffers.normal.length > 0 ) {\n\n\t\t\t\tvar normalAttribute = new THREE.Float32BufferAttribute( buffers.normal, 3 );\n\n\t\t\t\tvar normalMatrix = new THREE.Matrix3().getNormalMatrix( preTransform );\n\t\t\t\tnormalMatrix.applyToBufferAttribute( normalAttribute );\n\n\t\t\t\tgeo.addAttribute( 'normal', normalAttribute );\n\n\t\t\t}\n\n\t\t\tbuffers.uvs.forEach( function ( uvBuffer, i ) {\n\n\t\t\t\t// subsequent uv buffers are called 'uv1', 'uv2', ...\n\t\t\t\tvar name = 'uv' + ( i + 1 ).toString();\n\n\t\t\t\t// the first uv buffer is just called 'uv'\n\t\t\t\tif ( i === 0 ) {\n\n\t\t\t\t\tname = 'uv';\n\n\t\t\t\t}\n\n\t\t\t\tgeo.addAttribute( name, new THREE.Float32BufferAttribute( buffers.uvs[ i ], 2 ) );\n\n\t\t\t} );\n\n\t\t\tif ( geoInfo.material && geoInfo.material.mappingType !== 'AllSame' ) {\n\n\t\t\t\t// Convert the material indices of each vertex into rendering groups on the geometry.\n\t\t\t\tvar prevMaterialIndex = buffers.materialIndex[ 0 ];\n\t\t\t\tvar startIndex = 0;\n\n\t\t\t\tbuffers.materialIndex.forEach( function ( currentIndex, i ) {\n\n\t\t\t\t\tif ( currentIndex !== prevMaterialIndex ) {\n\n\t\t\t\t\t\tgeo.addGroup( startIndex, i - startIndex, prevMaterialIndex );\n\n\t\t\t\t\t\tprevMaterialIndex = currentIndex;\n\t\t\t\t\t\tstartIndex = i;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\t// the loop above doesn't add the last group, do that here.\n\t\t\t\tif ( geo.groups.length > 0 ) {\n\n\t\t\t\t\tvar lastGroup = geo.groups[ geo.groups.length - 1 ];\n\t\t\t\t\tvar lastIndex = lastGroup.start + lastGroup.count;\n\n\t\t\t\t\tif ( lastIndex !== buffers.materialIndex.length ) {\n\n\t\t\t\t\t\tgeo.addGroup( lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// case where there are multiple materials but the whole geometry is only\n\t\t\t\t// using one of them\n\t\t\t\tif ( geo.groups.length === 0 ) {\n\n\t\t\t\t\tgeo.addGroup( 0, buffers.materialIndex.length, buffers.materialIndex[ 0 ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.addMorphTargets( geo, geoNode, morphTarget, preTransform );\n\n\t\t\treturn geo;\n\n\t\t},\n\n\t\tparseGeoNode: function ( geoNode, skeleton ) {\n\n\t\t\tvar geoInfo = {};\n\n\t\t\tgeoInfo.vertexPositions = ( geoNode.Vertices !== undefined ) ? geoNode.Vertices.a : [];\n\t\t\tgeoInfo.vertexIndices = ( geoNode.PolygonVertexIndex !== undefined ) ? geoNode.PolygonVertexIndex.a : [];\n\n\t\t\tif ( geoNode.LayerElementColor ) {\n\n\t\t\t\tgeoInfo.color = this.parseVertexColors( geoNode.LayerElementColor[ 0 ] );\n\n\t\t\t}\n\n\t\t\tif ( geoNode.LayerElementMaterial ) {\n\n\t\t\t\tgeoInfo.material = this.parseMaterialIndices( geoNode.LayerElementMaterial[ 0 ] );\n\n\t\t\t}\n\n\t\t\tif ( geoNode.LayerElementNormal ) {\n\n\t\t\t\tgeoInfo.normal = this.parseNormals( geoNode.LayerElementNormal[ 0 ] );\n\n\t\t\t}\n\n\t\t\tif ( geoNode.LayerElementUV ) {\n\n\t\t\t\tgeoInfo.uv = [];\n\n\t\t\t\tvar i = 0;\n\t\t\t\twhile ( geoNode.LayerElementUV[ i ] ) {\n\n\t\t\t\t\tgeoInfo.uv.push( this.parseUVs( geoNode.LayerElementUV[ i ] ) );\n\t\t\t\t\ti ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tgeoInfo.weightTable = {};\n\n\t\t\tif ( skeleton !== null ) {\n\n\t\t\t\tgeoInfo.skeleton = skeleton;\n\n\t\t\t\tskeleton.rawBones.forEach( function ( rawBone, i ) {\n\n\t\t\t\t\t// loop over the bone's vertex indices and weights\n\t\t\t\t\trawBone.indices.forEach( function ( index, j ) {\n\n\t\t\t\t\t\tif ( geoInfo.weightTable[ index ] === undefined ) geoInfo.weightTable[ index ] = [];\n\n\t\t\t\t\t\tgeoInfo.weightTable[ index ].push( {\n\n\t\t\t\t\t\t\tid: i,\n\t\t\t\t\t\t\tweight: rawBone.weights[ j ],\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t} );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\treturn geoInfo;\n\n\t\t},\n\n\t\tgenBuffers: function ( geoInfo ) {\n\n\t\t\tvar buffers = {\n\t\t\t\tvertex: [],\n\t\t\t\tnormal: [],\n\t\t\t\tcolors: [],\n\t\t\t\tuvs: [],\n\t\t\t\tmaterialIndex: [],\n\t\t\t\tvertexWeights: [],\n\t\t\t\tweightsIndices: [],\n\t\t\t};\n\n\t\t\tvar polygonIndex = 0;\n\t\t\tvar faceLength = 0;\n\t\t\tvar displayedWeightsWarning = false;\n\n\t\t\t// these will hold data for a single face\n\t\t\tvar facePositionIndexes = [];\n\t\t\tvar faceNormals = [];\n\t\t\tvar faceColors = [];\n\t\t\tvar faceUVs = [];\n\t\t\tvar faceWeights = [];\n\t\t\tvar faceWeightIndices = [];\n\n\t\t\tvar self = this;\n\t\t\tgeoInfo.vertexIndices.forEach( function ( vertexIndex, polygonVertexIndex ) {\n\n\t\t\t\tvar endOfFace = false;\n\n\t\t\t\t// Face index and vertex index arrays are combined in a single array\n\t\t\t\t// A cube with quad faces looks like this:\n\t\t\t\t// PolygonVertexIndex: *24 {\n\t\t\t\t//  a: 0, 1, 3, -3, 2, 3, 5, -5, 4, 5, 7, -7, 6, 7, 1, -1, 1, 7, 5, -4, 6, 0, 2, -5\n\t\t\t\t//  }\n\t\t\t\t// Negative numbers mark the end of a face - first face here is 0, 1, 3, -3\n\t\t\t\t// to find index of last vertex bit shift the index: ^ - 1\n\t\t\t\tif ( vertexIndex < 0 ) {\n\n\t\t\t\t\tvertexIndex = vertexIndex ^ - 1; // equivalent to ( x * -1 ) - 1\n\t\t\t\t\tendOfFace = true;\n\n\t\t\t\t}\n\n\t\t\t\tvar weightIndices = [];\n\t\t\t\tvar weights = [];\n\n\t\t\t\tfacePositionIndexes.push( vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2 );\n\n\t\t\t\tif ( geoInfo.color ) {\n\n\t\t\t\t\tvar data = getData( polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color );\n\n\t\t\t\t\tfaceColors.push( data[ 0 ], data[ 1 ], data[ 2 ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geoInfo.skeleton ) {\n\n\t\t\t\t\tif ( geoInfo.weightTable[ vertexIndex ] !== undefined ) {\n\n\t\t\t\t\t\tgeoInfo.weightTable[ vertexIndex ].forEach( function ( wt ) {\n\n\t\t\t\t\t\t\tweights.push( wt.weight );\n\t\t\t\t\t\t\tweightIndices.push( wt.id );\n\n\t\t\t\t\t\t} );\n\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( weights.length > 4 ) {\n\n\t\t\t\t\t\tif ( ! displayedWeightsWarning ) {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.' );\n\t\t\t\t\t\t\tdisplayedWeightsWarning = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar wIndex = [ 0, 0, 0, 0 ];\n\t\t\t\t\t\tvar Weight = [ 0, 0, 0, 0 ];\n\n\t\t\t\t\t\tweights.forEach( function ( weight, weightIndex ) {\n\n\t\t\t\t\t\t\tvar currentWeight = weight;\n\t\t\t\t\t\t\tvar currentIndex = weightIndices[ weightIndex ];\n\n\t\t\t\t\t\t\tWeight.forEach( function ( comparedWeight, comparedWeightIndex, comparedWeightArray ) {\n\n\t\t\t\t\t\t\t\tif ( currentWeight > comparedWeight ) {\n\n\t\t\t\t\t\t\t\t\tcomparedWeightArray[ comparedWeightIndex ] = currentWeight;\n\t\t\t\t\t\t\t\t\tcurrentWeight = comparedWeight;\n\n\t\t\t\t\t\t\t\t\tvar tmp = wIndex[ comparedWeightIndex ];\n\t\t\t\t\t\t\t\t\twIndex[ comparedWeightIndex ] = currentIndex;\n\t\t\t\t\t\t\t\t\tcurrentIndex = tmp;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t\tweightIndices = wIndex;\n\t\t\t\t\t\tweights = Weight;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// if the weight array is shorter than 4 pad with 0s\n\t\t\t\t\twhile ( weights.length < 4 ) {\n\n\t\t\t\t\t\tweights.push( 0 );\n\t\t\t\t\t\tweightIndices.push( 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0; i < 4; ++ i ) {\n\n\t\t\t\t\t\tfaceWeights.push( weights[ i ] );\n\t\t\t\t\t\tfaceWeightIndices.push( weightIndices[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( geoInfo.normal ) {\n\n\t\t\t\t\tvar data = getData( polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal );\n\n\t\t\t\t\tfaceNormals.push( data[ 0 ], data[ 1 ], data[ 2 ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geoInfo.material && geoInfo.material.mappingType !== 'AllSame' ) {\n\n\t\t\t\t\tvar materialIndex = getData( polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material )[ 0 ];\n\n\t\t\t\t}\n\n\t\t\t\tif ( geoInfo.uv ) {\n\n\t\t\t\t\tgeoInfo.uv.forEach( function ( uv, i ) {\n\n\t\t\t\t\t\tvar data = getData( polygonVertexIndex, polygonIndex, vertexIndex, uv );\n\n\t\t\t\t\t\tif ( faceUVs[ i ] === undefined ) {\n\n\t\t\t\t\t\t\tfaceUVs[ i ] = [];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfaceUVs[ i ].push( data[ 0 ] );\n\t\t\t\t\t\tfaceUVs[ i ].push( data[ 1 ] );\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t\tfaceLength ++;\n\n\t\t\t\tif ( endOfFace ) {\n\n\t\t\t\t\tself.genFace( buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength );\n\n\t\t\t\t\tpolygonIndex ++;\n\t\t\t\t\tfaceLength = 0;\n\n\t\t\t\t\t// reset arrays for the next face\n\t\t\t\t\tfacePositionIndexes = [];\n\t\t\t\t\tfaceNormals = [];\n\t\t\t\t\tfaceColors = [];\n\t\t\t\t\tfaceUVs = [];\n\t\t\t\t\tfaceWeights = [];\n\t\t\t\t\tfaceWeightIndices = [];\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\treturn buffers;\n\n\t\t},\n\n\t\t// Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\n\t\tgenFace: function ( buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength ) {\n\n\t\t\tfor ( var i = 2; i < faceLength; i ++ ) {\n\n\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ 0 ] ] );\n\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ 1 ] ] );\n\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ 2 ] ] );\n\n\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ ( i - 1 ) * 3 ] ] );\n\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ ( i - 1 ) * 3 + 1 ] ] );\n\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ ( i - 1 ) * 3 + 2 ] ] );\n\n\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i * 3 ] ] );\n\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i * 3 + 1 ] ] );\n\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i * 3 + 2 ] ] );\n\n\t\t\t\tif ( geoInfo.skeleton ) {\n\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ 0 ] );\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ 1 ] );\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ 2 ] );\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ 3 ] );\n\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ ( i - 1 ) * 4 ] );\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ ( i - 1 ) * 4 + 1 ] );\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ ( i - 1 ) * 4 + 2 ] );\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ ( i - 1 ) * 4 + 3 ] );\n\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i * 4 ] );\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i * 4 + 1 ] );\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i * 4 + 2 ] );\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i * 4 + 3 ] );\n\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ 0 ] );\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ 1 ] );\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ 2 ] );\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ 3 ] );\n\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ ( i - 1 ) * 4 ] );\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ ( i - 1 ) * 4 + 1 ] );\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ ( i - 1 ) * 4 + 2 ] );\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ ( i - 1 ) * 4 + 3 ] );\n\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i * 4 ] );\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i * 4 + 1 ] );\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i * 4 + 2 ] );\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i * 4 + 3 ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geoInfo.color ) {\n\n\t\t\t\t\tbuffers.colors.push( faceColors[ 0 ] );\n\t\t\t\t\tbuffers.colors.push( faceColors[ 1 ] );\n\t\t\t\t\tbuffers.colors.push( faceColors[ 2 ] );\n\n\t\t\t\t\tbuffers.colors.push( faceColors[ ( i - 1 ) * 3 ] );\n\t\t\t\t\tbuffers.colors.push( faceColors[ ( i - 1 ) * 3 + 1 ] );\n\t\t\t\t\tbuffers.colors.push( faceColors[ ( i - 1 ) * 3 + 2 ] );\n\n\t\t\t\t\tbuffers.colors.push( faceColors[ i * 3 ] );\n\t\t\t\t\tbuffers.colors.push( faceColors[ i * 3 + 1 ] );\n\t\t\t\t\tbuffers.colors.push( faceColors[ i * 3 + 2 ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geoInfo.material && geoInfo.material.mappingType !== 'AllSame' ) {\n\n\t\t\t\t\tbuffers.materialIndex.push( materialIndex );\n\t\t\t\t\tbuffers.materialIndex.push( materialIndex );\n\t\t\t\t\tbuffers.materialIndex.push( materialIndex );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geoInfo.normal ) {\n\n\t\t\t\t\tbuffers.normal.push( faceNormals[ 0 ] );\n\t\t\t\t\tbuffers.normal.push( faceNormals[ 1 ] );\n\t\t\t\t\tbuffers.normal.push( faceNormals[ 2 ] );\n\n\t\t\t\t\tbuffers.normal.push( faceNormals[ ( i - 1 ) * 3 ] );\n\t\t\t\t\tbuffers.normal.push( faceNormals[ ( i - 1 ) * 3 + 1 ] );\n\t\t\t\t\tbuffers.normal.push( faceNormals[ ( i - 1 ) * 3 + 2 ] );\n\n\t\t\t\t\tbuffers.normal.push( faceNormals[ i * 3 ] );\n\t\t\t\t\tbuffers.normal.push( faceNormals[ i * 3 + 1 ] );\n\t\t\t\t\tbuffers.normal.push( faceNormals[ i * 3 + 2 ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geoInfo.uv ) {\n\n\t\t\t\t\tgeoInfo.uv.forEach( function ( uv, j ) {\n\n\t\t\t\t\t\tif ( buffers.uvs[ j ] === undefined ) buffers.uvs[ j ] = [];\n\n\t\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ 0 ] );\n\t\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ 1 ] );\n\n\t\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ ( i - 1 ) * 2 ] );\n\t\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ ( i - 1 ) * 2 + 1 ] );\n\n\t\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ i * 2 ] );\n\t\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ i * 2 + 1 ] );\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\taddMorphTargets: function ( parentGeo, parentGeoNode, morphTarget, preTransform ) {\n\n\t\t\tif ( morphTarget === null ) return;\n\n\t\t\tparentGeo.morphAttributes.position = [];\n\t\t\tparentGeo.morphAttributes.normal = [];\n\n\t\t\tvar self = this;\n\t\t\tmorphTarget.rawTargets.forEach( function ( rawTarget ) {\n\n\t\t\t\tvar morphGeoNode = fbxTree.Objects.Geometry[ rawTarget.geoID ];\n\n\t\t\t\tif ( morphGeoNode !== undefined ) {\n\n\t\t\t\t\tself.genMorphGeometry( parentGeo, parentGeoNode, morphGeoNode, preTransform );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t},\n\n\t\t// a morph geometry node is similar to a standard  node, and the node is also contained\n\t\t// in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\n\t\t// and a special attribute Index defining which vertices of the original geometry are affected\n\t\t// Normal and position attributes only have data for the vertices that are affected by the morph\n\t\tgenMorphGeometry: function ( parentGeo, parentGeoNode, morphGeoNode, preTransform ) {\n\n\t\t\tvar morphGeo = new THREE.BufferGeometry();\n\t\t\tif ( morphGeoNode.attrName ) morphGeo.name = morphGeoNode.attrName;\n\n\t\t\tvar vertexIndices = ( parentGeoNode.PolygonVertexIndex !== undefined ) ? parentGeoNode.PolygonVertexIndex.a : [];\n\n\t\t\t// make a copy of the parent's vertex positions\n\t\t\tvar vertexPositions = ( parentGeoNode.Vertices !== undefined ) ? parentGeoNode.Vertices.a.slice() : [];\n\n\t\t\tvar morphPositions = ( morphGeoNode.Vertices !== undefined ) ? morphGeoNode.Vertices.a : [];\n\t\t\tvar indices = ( morphGeoNode.Indexes !== undefined ) ? morphGeoNode.Indexes.a : [];\n\n\t\t\tfor ( var i = 0; i < indices.length; i ++ ) {\n\n\t\t\t\tvar morphIndex = indices[ i ] * 3;\n\n\t\t\t\t// FBX format uses blend shapes rather than morph targets. This can be converted\n\t\t\t\t// by additively combining the blend shape positions with the original geometry's positions\n\t\t\t\tvertexPositions[ morphIndex ] += morphPositions[ i * 3 ];\n\t\t\t\tvertexPositions[ morphIndex + 1 ] += morphPositions[ i * 3 + 1 ];\n\t\t\t\tvertexPositions[ morphIndex + 2 ] += morphPositions[ i * 3 + 2 ];\n\n\t\t\t}\n\n\t\t\t// TODO: add morph normal support\n\t\t\tvar morphGeoInfo = {\n\t\t\t\tvertexIndices: vertexIndices,\n\t\t\t\tvertexPositions: vertexPositions,\n\t\t\t};\n\n\t\t\tvar morphBuffers = this.genBuffers( morphGeoInfo );\n\n\t\t\tvar positionAttribute = new THREE.Float32BufferAttribute( morphBuffers.vertex, 3 );\n\t\t\tpositionAttribute.name = morphGeoNode.attrName;\n\n\t\t\tpreTransform.applyToBufferAttribute( positionAttribute );\n\n\t\t\tparentGeo.morphAttributes.position.push( positionAttribute );\n\n\t\t},\n\n\t\t// Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\n\t\tparseNormals: function ( NormalNode ) {\n\n\t\t\tvar mappingType = NormalNode.MappingInformationType;\n\t\t\tvar referenceType = NormalNode.ReferenceInformationType;\n\t\t\tvar buffer = NormalNode.Normals.a;\n\t\t\tvar indexBuffer = [];\n\t\t\tif ( referenceType === 'IndexToDirect' ) {\n\n\t\t\t\tif ( 'NormalIndex' in NormalNode ) {\n\n\t\t\t\t\tindexBuffer = NormalNode.NormalIndex.a;\n\n\t\t\t\t} else if ( 'NormalsIndex' in NormalNode ) {\n\n\t\t\t\t\tindexBuffer = NormalNode.NormalsIndex.a;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tdataSize: 3,\n\t\t\t\tbuffer: buffer,\n\t\t\t\tindices: indexBuffer,\n\t\t\t\tmappingType: mappingType,\n\t\t\t\treferenceType: referenceType\n\t\t\t};\n\n\t\t},\n\n\t\t// Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\n\t\tparseUVs: function ( UVNode ) {\n\n\t\t\tvar mappingType = UVNode.MappingInformationType;\n\t\t\tvar referenceType = UVNode.ReferenceInformationType;\n\t\t\tvar buffer = UVNode.UV.a;\n\t\t\tvar indexBuffer = [];\n\t\t\tif ( referenceType === 'IndexToDirect' ) {\n\n\t\t\t\tindexBuffer = UVNode.UVIndex.a;\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tdataSize: 2,\n\t\t\t\tbuffer: buffer,\n\t\t\t\tindices: indexBuffer,\n\t\t\t\tmappingType: mappingType,\n\t\t\t\treferenceType: referenceType\n\t\t\t};\n\n\t\t},\n\n\t\t// Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\n\t\tparseVertexColors: function ( ColorNode ) {\n\n\t\t\tvar mappingType = ColorNode.MappingInformationType;\n\t\t\tvar referenceType = ColorNode.ReferenceInformationType;\n\t\t\tvar buffer = ColorNode.Colors.a;\n\t\t\tvar indexBuffer = [];\n\t\t\tif ( referenceType === 'IndexToDirect' ) {\n\n\t\t\t\tindexBuffer = ColorNode.ColorIndex.a;\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tdataSize: 4,\n\t\t\t\tbuffer: buffer,\n\t\t\t\tindices: indexBuffer,\n\t\t\t\tmappingType: mappingType,\n\t\t\t\treferenceType: referenceType\n\t\t\t};\n\n\t\t},\n\n\t\t// Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\n\t\tparseMaterialIndices: function ( MaterialNode ) {\n\n\t\t\tvar mappingType = MaterialNode.MappingInformationType;\n\t\t\tvar referenceType = MaterialNode.ReferenceInformationType;\n\n\t\t\tif ( mappingType === 'NoMappingInformation' ) {\n\n\t\t\t\treturn {\n\t\t\t\t\tdataSize: 1,\n\t\t\t\t\tbuffer: [ 0 ],\n\t\t\t\t\tindices: [ 0 ],\n\t\t\t\t\tmappingType: 'AllSame',\n\t\t\t\t\treferenceType: referenceType\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar materialIndexBuffer = MaterialNode.Materials.a;\n\n\t\t\t// Since materials are stored as indices, there's a bit of a mismatch between FBX and what\n\t\t\t// we expect.So we create an intermediate buffer that points to the index in the buffer,\n\t\t\t// for conforming with the other functions we've written for other data.\n\t\t\tvar materialIndices = [];\n\n\t\t\tfor ( var i = 0; i < materialIndexBuffer.length; ++ i ) {\n\n\t\t\t\tmaterialIndices.push( i );\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tdataSize: 1,\n\t\t\t\tbuffer: materialIndexBuffer,\n\t\t\t\tindices: materialIndices,\n\t\t\t\tmappingType: mappingType,\n\t\t\t\treferenceType: referenceType\n\t\t\t};\n\n\t\t},\n\n\t\t// Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\n\t\tparseNurbsGeometry: function ( geoNode ) {\n\n\t\t\tif ( THREE.NURBSCurve === undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.FBXLoader: The loader relies on THREE.NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.' );\n\t\t\t\treturn new THREE.BufferGeometry();\n\n\t\t\t}\n\n\t\t\tvar order = parseInt( geoNode.Order );\n\n\t\t\tif ( isNaN( order ) ) {\n\n\t\t\t\tconsole.error( 'THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id );\n\t\t\t\treturn new THREE.BufferGeometry();\n\n\t\t\t}\n\n\t\t\tvar degree = order - 1;\n\n\t\t\tvar knots = geoNode.KnotVector.a;\n\t\t\tvar controlPoints = [];\n\t\t\tvar pointsValues = geoNode.Points.a;\n\n\t\t\tfor ( var i = 0, l = pointsValues.length; i < l; i += 4 ) {\n\n\t\t\t\tcontrolPoints.push( new THREE.Vector4().fromArray( pointsValues, i ) );\n\n\t\t\t}\n\n\t\t\tvar startKnot, endKnot;\n\n\t\t\tif ( geoNode.Form === 'Closed' ) {\n\n\t\t\t\tcontrolPoints.push( controlPoints[ 0 ] );\n\n\t\t\t} else if ( geoNode.Form === 'Periodic' ) {\n\n\t\t\t\tstartKnot = degree;\n\t\t\t\tendKnot = knots.length - 1 - startKnot;\n\n\t\t\t\tfor ( var i = 0; i < degree; ++ i ) {\n\n\t\t\t\t\tcontrolPoints.push( controlPoints[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar curve = new THREE.NURBSCurve( degree, knots, controlPoints, startKnot, endKnot );\n\t\t\tvar vertices = curve.getPoints( controlPoints.length * 7 );\n\n\t\t\tvar positions = new Float32Array( vertices.length * 3 );\n\n\t\t\tvertices.forEach( function ( vertex, i ) {\n\n\t\t\t\tvertex.toArray( positions, i * 3 );\n\n\t\t\t} );\n\n\t\t\tvar geometry = new THREE.BufferGeometry();\n\t\t\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );\n\n\t\t\treturn geometry;\n\n\t\t},\n\n\t};\n\n\t// parse animation data from FBXTree\n\tfunction AnimationParser() {}\n\n\tAnimationParser.prototype = {\n\n\t\tconstructor: AnimationParser,\n\n\t\t// take raw animation clips and turn them into three.js animation clips\n\t\tparse: function () {\n\n\t\t\tvar animationClips = [];\n\n\n\t\t\tvar rawClips = this.parseClips();\n\n\t\t\tif ( rawClips === undefined ) return animationClips;\n\n\t\t\tfor ( var key in rawClips ) {\n\n\t\t\t\tvar rawClip = rawClips[ key ];\n\n\t\t\t\tvar clip = this.addClip( rawClip );\n\n\t\t\t\tanimationClips.push( clip );\n\n\t\t\t}\n\n\t\t\treturn animationClips;\n\n\t\t},\n\n\t\tparseClips: function () {\n\n\t\t\t// since the actual transformation data is stored in FBXTree.Objects.AnimationCurve,\n\t\t\t// if this is undefined we can safely assume there are no animations\n\t\t\tif ( fbxTree.Objects.AnimationCurve === undefined ) return undefined;\n\n\t\t\tvar curveNodesMap = this.parseAnimationCurveNodes();\n\n\t\t\tthis.parseAnimationCurves( curveNodesMap );\n\n\t\t\tvar layersMap = this.parseAnimationLayers( curveNodesMap );\n\t\t\tvar rawClips = this.parseAnimStacks( layersMap );\n\n\t\t\treturn rawClips;\n\n\t\t},\n\n\t\t// parse nodes in FBXTree.Objects.AnimationCurveNode\n\t\t// each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\n\t\t// and is referenced by an AnimationLayer\n\t\tparseAnimationCurveNodes: function () {\n\n\t\t\tvar rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n\n\t\t\tvar curveNodesMap = new Map();\n\n\t\t\tfor ( var nodeID in rawCurveNodes ) {\n\n\t\t\t\tvar rawCurveNode = rawCurveNodes[ nodeID ];\n\n\t\t\t\tif ( rawCurveNode.attrName.match( /S|R|T|DeformPercent/ ) !== null ) {\n\n\t\t\t\t\tvar curveNode = {\n\n\t\t\t\t\t\tid: rawCurveNode.id,\n\t\t\t\t\t\tattr: rawCurveNode.attrName,\n\t\t\t\t\t\tcurves: {},\n\n\t\t\t\t\t};\n\n\t\t\t\t\tcurveNodesMap.set( curveNode.id, curveNode );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn curveNodesMap;\n\n\t\t},\n\n\t\t// parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\n\t\t// previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\n\t\t// axis ( e.g. times and values of x rotation)\n\t\tparseAnimationCurves: function ( curveNodesMap ) {\n\n\t\t\tvar rawCurves = fbxTree.Objects.AnimationCurve;\n\n\t\t\t// TODO: Many values are identical up to roundoff error, but won't be optimised\n\t\t\t// e.g. position times: [0, 0.4, 0. 8]\n\t\t\t// position values: [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.235384487103147e-7, 93.67520904541016, -0.9982695579528809]\n\t\t\t// clearly, this should be optimised to\n\t\t\t// times: [0], positions [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809]\n\t\t\t// this shows up in nearly every FBX file, and generally time array is length > 100\n\n\t\t\tfor ( var nodeID in rawCurves ) {\n\n\t\t\t\tvar animationCurve = {\n\n\t\t\t\t\tid: rawCurves[ nodeID ].id,\n\t\t\t\t\ttimes: rawCurves[ nodeID ].KeyTime.a.map( convertFBXTimeToSeconds ),\n\t\t\t\t\tvalues: rawCurves[ nodeID ].KeyValueFloat.a,\n\n\t\t\t\t};\n\n\t\t\t\tvar relationships = connections.get( animationCurve.id );\n\n\t\t\t\tif ( relationships !== undefined ) {\n\n\t\t\t\t\tvar animationCurveID = relationships.parents[ 0 ].ID;\n\t\t\t\t\tvar animationCurveRelationship = relationships.parents[ 0 ].relationship;\n\n\t\t\t\t\tif ( animationCurveRelationship.match( /X/ ) ) {\n\n\t\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'x' ] = animationCurve;\n\n\t\t\t\t\t} else if ( animationCurveRelationship.match( /Y/ ) ) {\n\n\t\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'y' ] = animationCurve;\n\n\t\t\t\t\t} else if ( animationCurveRelationship.match( /Z/ ) ) {\n\n\t\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'z' ] = animationCurve;\n\n\t\t\t\t\t} else if ( animationCurveRelationship.match( /d|DeformPercent/ ) && curveNodesMap.has( animationCurveID ) ) {\n\n\t\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'morph' ] = animationCurve;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t// parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\n\t\t// to various AnimationCurveNodes and is referenced by an AnimationStack node\n\t\t// note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\n\t\tparseAnimationLayers: function ( curveNodesMap ) {\n\n\t\t\tvar rawLayers = fbxTree.Objects.AnimationLayer;\n\n\t\t\tvar layersMap = new Map();\n\n\t\t\tfor ( var nodeID in rawLayers ) {\n\n\t\t\t\tvar layerCurveNodes = [];\n\n\t\t\t\tvar connection = connections.get( parseInt( nodeID ) );\n\n\t\t\t\tif ( connection !== undefined ) {\n\n\t\t\t\t\t// all the animationCurveNodes used in the layer\n\t\t\t\t\tvar children = connection.children;\n\n\t\t\t\t\tvar self = this;\n\t\t\t\t\tchildren.forEach( function ( child, i ) {\n\n\t\t\t\t\t\tif ( curveNodesMap.has( child.ID ) ) {\n\n\t\t\t\t\t\t\tvar curveNode = curveNodesMap.get( child.ID );\n\n\t\t\t\t\t\t\t// check that the curves are defined for at least one axis, otherwise ignore the curveNode\n\t\t\t\t\t\t\tif ( curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined ) {\n\n\t\t\t\t\t\t\t\tif ( layerCurveNodes[ i ] === undefined ) {\n\n\t\t\t\t\t\t\t\t\tvar modelID;\n\n\t\t\t\t\t\t\t\t\tconnections.get( child.ID ).parents.forEach( function ( parent ) {\n\n\t\t\t\t\t\t\t\t\t\tif ( parent.relationship !== undefined ) modelID = parent.ID;\n\n\t\t\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\t\t\tvar rawModel = fbxTree.Objects.Model[ modelID.toString() ];\n\n\t\t\t\t\t\t\t\t\tvar node = {\n\n\t\t\t\t\t\t\t\t\t\tmodelName: THREE.PropertyBinding.sanitizeNodeName( rawModel.attrName ),\n\t\t\t\t\t\t\t\t\t\tinitialPosition: [ 0, 0, 0 ],\n\t\t\t\t\t\t\t\t\t\tinitialRotation: [ 0, 0, 0 ],\n\t\t\t\t\t\t\t\t\t\tinitialScale: [ 1, 1, 1 ],\n\t\t\t\t\t\t\t\t\t\ttransform: self.getModelAnimTransform( rawModel ),\n\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\t// if the animated model is pre rotated, we'll have to apply the pre rotations to every\n\t\t\t\t\t\t\t\t\t// animation value as well\n\t\t\t\t\t\t\t\t\tif ( 'PreRotation' in rawModel ) node.preRotations = rawModel.PreRotation.value;\n\t\t\t\t\t\t\t\t\tif ( 'PostRotation' in rawModel ) node.postRotations = rawModel.PostRotation.value;\n\n\t\t\t\t\t\t\t\t\tlayerCurveNodes[ i ] = node;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tlayerCurveNodes[ i ][ curveNode.attr ] = curveNode;\n\n\t\t\t\t\t\t\t} else if ( curveNode.curves.morph !== undefined ) {\n\n\t\t\t\t\t\t\t\tif ( layerCurveNodes[ i ] === undefined ) {\n\n\t\t\t\t\t\t\t\t\tvar deformerID;\n\n\t\t\t\t\t\t\t\t\tconnections.get( child.ID ).parents.forEach( function ( parent ) {\n\n\t\t\t\t\t\t\t\t\t\tif ( parent.relationship !== undefined ) deformerID = parent.ID;\n\n\t\t\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\t\t\tvar morpherID = connections.get( deformerID ).parents[ 0 ].ID;\n\t\t\t\t\t\t\t\t\tvar geoID = connections.get( morpherID ).parents[ 0 ].ID;\n\n\t\t\t\t\t\t\t\t\t// assuming geometry is not used in more than one model\n\t\t\t\t\t\t\t\t\tvar modelID = connections.get( geoID ).parents[ 0 ].ID;\n\n\t\t\t\t\t\t\t\t\tvar rawModel = fbxTree.Objects.Model[ modelID ];\n\n\t\t\t\t\t\t\t\t\tvar node = {\n\n\t\t\t\t\t\t\t\t\t\tmodelName: THREE.PropertyBinding.sanitizeNodeName( rawModel.attrName ),\n\t\t\t\t\t\t\t\t\t\tmorphName: fbxTree.Objects.Deformer[ deformerID ].attrName,\n\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\tlayerCurveNodes[ i ] = node;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tlayerCurveNodes[ i ][ curveNode.attr ] = curveNode;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tlayersMap.set( parseInt( nodeID ), layerCurveNodes );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn layersMap;\n\n\t\t},\n\n\t\tgetModelAnimTransform: function ( modelNode ) {\n\n\t\t\tvar transformData = {};\n\n\t\t\tif ( 'RotationOrder' in modelNode ) transformData.eulerOrder = parseInt( modelNode.RotationOrder.value );\n\n\t\t\tif ( 'Lcl_Translation' in modelNode ) transformData.translation = modelNode.Lcl_Translation.value;\n\t\t\tif ( 'RotationOffset' in modelNode ) transformData.rotationOffset = modelNode.RotationOffset.value;\n\n\t\t\tif ( 'Lcl_Rotation' in modelNode ) transformData.rotation = modelNode.Lcl_Rotation.value;\n\t\t\tif ( 'PreRotation' in modelNode ) transformData.preRotation = modelNode.PreRotation.value;\n\n\t\t\tif ( 'PostRotation' in modelNode ) transformData.postRotation = modelNode.PostRotation.value;\n\n\t\t\tif ( 'Lcl_Scaling' in modelNode ) transformData.scale = modelNode.Lcl_Scaling.value;\n\n\t\t\treturn generateTransform( transformData );\n\n\t\t},\n\n\t\t// parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\n\t\t// hierarchy. Each Stack node will be used to create a THREE.AnimationClip\n\t\tparseAnimStacks: function ( layersMap ) {\n\n\t\t\tvar rawStacks = fbxTree.Objects.AnimationStack;\n\n\t\t\t// connect the stacks (clips) up to the layers\n\t\t\tvar rawClips = {};\n\n\t\t\tfor ( var nodeID in rawStacks ) {\n\n\t\t\t\tvar children = connections.get( parseInt( nodeID ) ).children;\n\n\t\t\t\tif ( children.length > 1 ) {\n\n\t\t\t\t\t// it seems like stacks will always be associated with a single layer. But just in case there are files\n\t\t\t\t\t// where there are multiple layers per stack, we'll display a warning\n\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.' );\n\n\t\t\t\t}\n\n\t\t\t\tvar layer = layersMap.get( children[ 0 ].ID );\n\n\t\t\t\trawClips[ nodeID ] = {\n\n\t\t\t\t\tname: rawStacks[ nodeID ].attrName,\n\t\t\t\t\tlayer: layer,\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\treturn rawClips;\n\n\t\t},\n\n\t\taddClip: function ( rawClip ) {\n\n\t\t\tvar tracks = [];\n\n\t\t\tvar self = this;\n\t\t\trawClip.layer.forEach( function ( rawTracks ) {\n\n\t\t\t\ttracks = tracks.concat( self.generateTracks( rawTracks ) );\n\n\t\t\t} );\n\n\t\t\treturn new THREE.AnimationClip( rawClip.name, - 1, tracks );\n\n\t\t},\n\n\t\tgenerateTracks: function ( rawTracks ) {\n\n\t\t\tvar tracks = [];\n\n\t\t\tvar initialPosition = new THREE.Vector3();\n\t\t\tvar initialRotation = new THREE.Quaternion();\n\t\t\tvar initialScale = new THREE.Vector3();\n\n\t\t\tif ( rawTracks.transform ) rawTracks.transform.decompose( initialPosition, initialRotation, initialScale );\n\n\t\t\tinitialPosition = initialPosition.toArray();\n\t\t\tinitialRotation = new THREE.Euler().setFromQuaternion( initialRotation ).toArray(); // todo: euler order\n\t\t\tinitialScale = initialScale.toArray();\n\n\t\t\tif ( rawTracks.T !== undefined && Object.keys( rawTracks.T.curves ).length > 0 ) {\n\n\t\t\t\tvar positionTrack = this.generateVectorTrack( rawTracks.modelName, rawTracks.T.curves, initialPosition, 'position' );\n\t\t\t\tif ( positionTrack !== undefined ) tracks.push( positionTrack );\n\n\t\t\t}\n\n\t\t\tif ( rawTracks.R !== undefined && Object.keys( rawTracks.R.curves ).length > 0 ) {\n\n\t\t\t\tvar rotationTrack = this.generateRotationTrack( rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotations, rawTracks.postRotations );\n\t\t\t\tif ( rotationTrack !== undefined ) tracks.push( rotationTrack );\n\n\t\t\t}\n\n\t\t\tif ( rawTracks.S !== undefined && Object.keys( rawTracks.S.curves ).length > 0 ) {\n\n\t\t\t\tvar scaleTrack = this.generateVectorTrack( rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale' );\n\t\t\t\tif ( scaleTrack !== undefined ) tracks.push( scaleTrack );\n\n\t\t\t}\n\n\t\t\tif ( rawTracks.DeformPercent !== undefined ) {\n\n\t\t\t\tvar morphTrack = this.generateMorphTrack( rawTracks );\n\t\t\t\tif ( morphTrack !== undefined ) tracks.push( morphTrack );\n\n\t\t\t}\n\n\t\t\treturn tracks;\n\n\t\t},\n\n\t\tgenerateVectorTrack: function ( modelName, curves, initialValue, type ) {\n\n\t\t\tvar times = this.getTimesForAllAxes( curves );\n\t\t\tvar values = this.getKeyframeTrackValues( times, curves, initialValue );\n\n\t\t\treturn new THREE.VectorKeyframeTrack( modelName + '.' + type, times, values );\n\n\t\t},\n\n\t\tgenerateRotationTrack: function ( modelName, curves, initialValue, preRotations, postRotations ) {\n\n\t\t\tif ( curves.x !== undefined ) {\n\n\t\t\t\tthis.interpolateRotations( curves.x );\n\t\t\t\tcurves.x.values = curves.x.values.map( THREE.Math.degToRad );\n\n\t\t\t}\n\t\t\tif ( curves.y !== undefined ) {\n\n\t\t\t\tthis.interpolateRotations( curves.y );\n\t\t\t\tcurves.y.values = curves.y.values.map( THREE.Math.degToRad );\n\n\t\t\t}\n\t\t\tif ( curves.z !== undefined ) {\n\n\t\t\t\tthis.interpolateRotations( curves.z );\n\t\t\t\tcurves.z.values = curves.z.values.map( THREE.Math.degToRad );\n\n\t\t\t}\n\n\t\t\tvar times = this.getTimesForAllAxes( curves );\n\t\t\tvar values = this.getKeyframeTrackValues( times, curves, initialValue );\n\n\t\t\tif ( preRotations !== undefined ) {\n\n\t\t\t\tpreRotations = preRotations.map( THREE.Math.degToRad );\n\t\t\t\tpreRotations.push( 'ZYX' );\n\n\t\t\t\tpreRotations = new THREE.Euler().fromArray( preRotations );\n\t\t\t\tpreRotations = new THREE.Quaternion().setFromEuler( preRotations );\n\n\t\t\t}\n\n\t\t\tif ( postRotations !== undefined ) {\n\n\t\t\t\tpostRotations = postRotations.map( THREE.Math.degToRad );\n\t\t\t\tpostRotations.push( 'ZYX' );\n\n\t\t\t\tpostRotations = new THREE.Euler().fromArray( postRotations );\n\t\t\t\tpostRotations = new THREE.Quaternion().setFromEuler( postRotations ).inverse();\n\n\t\t\t}\n\n\t\t\tvar quaternion = new THREE.Quaternion();\n\t\t\tvar euler = new THREE.Euler();\n\n\t\t\tvar quaternionValues = [];\n\n\t\t\tfor ( var i = 0; i < values.length; i += 3 ) {\n\n\t\t\t\teuler.set( values[ i ], values[ i + 1 ], values[ i + 2 ], 'ZYX' );\n\n\t\t\t\tquaternion.setFromEuler( euler );\n\n\t\t\t\tif ( preRotations !== undefined ) quaternion.premultiply( preRotations );\n\t\t\t\tif ( postRotations !== undefined ) quaternion.multiply( postRotations );\n\n\t\t\t\tquaternion.toArray( quaternionValues, ( i / 3 ) * 4 );\n\n\t\t\t}\n\n\t\t\treturn new THREE.QuaternionKeyframeTrack( modelName + '.quaternion', times, quaternionValues );\n\n\t\t},\n\n\t\tgenerateMorphTrack: function ( rawTracks ) {\n\n\t\t\tvar curves = rawTracks.DeformPercent.curves.morph;\n\t\t\tvar values = curves.values.map( function ( val ) {\n\n\t\t\t\treturn val / 100;\n\n\t\t\t} );\n\n\t\t\tvar morphNum = sceneGraph.getObjectByName( rawTracks.modelName ).morphTargetDictionary[ rawTracks.morphName ];\n\n\t\t\treturn new THREE.NumberKeyframeTrack( rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']', curves.times, values );\n\n\t\t},\n\n\t\t// For all animated objects, times are defined separately for each axis\n\t\t// Here we'll combine the times into one sorted array without duplicates\n\t\tgetTimesForAllAxes: function ( curves ) {\n\n\t\t\tvar times = [];\n\n\t\t\t// first join together the times for each axis, if defined\n\t\t\tif ( curves.x !== undefined ) times = times.concat( curves.x.times );\n\t\t\tif ( curves.y !== undefined ) times = times.concat( curves.y.times );\n\t\t\tif ( curves.z !== undefined ) times = times.concat( curves.z.times );\n\n\t\t\t// then sort them and remove duplicates\n\t\t\ttimes = times.sort( function ( a, b ) {\n\n\t\t\t\treturn a - b;\n\n\t\t\t} ).filter( function ( elem, index, array ) {\n\n\t\t\t\treturn array.indexOf( elem ) == index;\n\n\t\t\t} );\n\n\t\t\treturn times;\n\n\t\t},\n\n\t\tgetKeyframeTrackValues: function ( times, curves, initialValue ) {\n\n\t\t\tvar prevValue = initialValue;\n\n\t\t\tvar values = [];\n\n\t\t\tvar xIndex = - 1;\n\t\t\tvar yIndex = - 1;\n\t\t\tvar zIndex = - 1;\n\n\t\t\ttimes.forEach( function ( time ) {\n\n\t\t\t\tif ( curves.x ) xIndex = curves.x.times.indexOf( time );\n\t\t\t\tif ( curves.y ) yIndex = curves.y.times.indexOf( time );\n\t\t\t\tif ( curves.z ) zIndex = curves.z.times.indexOf( time );\n\n\t\t\t\t// if there is an x value defined for this frame, use that\n\t\t\t\tif ( xIndex !== - 1 ) {\n\n\t\t\t\t\tvar xValue = curves.x.values[ xIndex ];\n\t\t\t\t\tvalues.push( xValue );\n\t\t\t\t\tprevValue[ 0 ] = xValue;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// otherwise use the x value from the previous frame\n\t\t\t\t\tvalues.push( prevValue[ 0 ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( yIndex !== - 1 ) {\n\n\t\t\t\t\tvar yValue = curves.y.values[ yIndex ];\n\t\t\t\t\tvalues.push( yValue );\n\t\t\t\t\tprevValue[ 1 ] = yValue;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvalues.push( prevValue[ 1 ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( zIndex !== - 1 ) {\n\n\t\t\t\t\tvar zValue = curves.z.values[ zIndex ];\n\t\t\t\t\tvalues.push( zValue );\n\t\t\t\t\tprevValue[ 2 ] = zValue;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvalues.push( prevValue[ 2 ] );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\treturn values;\n\n\t\t},\n\n\t\t// Rotations are defined as Euler angles which can have values  of any size\n\t\t// These will be converted to quaternions which don't support values greater than\n\t\t// PI, so we'll interpolate large rotations\n\t\tinterpolateRotations: function ( curve ) {\n\n\t\t\tfor ( var i = 1; i < curve.values.length; i ++ ) {\n\n\t\t\t\tvar initialValue = curve.values[ i - 1 ];\n\t\t\t\tvar valuesSpan = curve.values[ i ] - initialValue;\n\n\t\t\t\tvar absoluteSpan = Math.abs( valuesSpan );\n\n\t\t\t\tif ( absoluteSpan >= 180 ) {\n\n\t\t\t\t\tvar numSubIntervals = absoluteSpan / 180;\n\n\t\t\t\t\tvar step = valuesSpan / numSubIntervals;\n\t\t\t\t\tvar nextValue = initialValue + step;\n\n\t\t\t\t\tvar initialTime = curve.times[ i - 1 ];\n\t\t\t\t\tvar timeSpan = curve.times[ i ] - initialTime;\n\t\t\t\t\tvar interval = timeSpan / numSubIntervals;\n\t\t\t\t\tvar nextTime = initialTime + interval;\n\n\t\t\t\t\tvar interpolatedTimes = [];\n\t\t\t\t\tvar interpolatedValues = [];\n\n\t\t\t\t\twhile ( nextTime < curve.times[ i ] ) {\n\n\t\t\t\t\t\tinterpolatedTimes.push( nextTime );\n\t\t\t\t\t\tnextTime += interval;\n\n\t\t\t\t\t\tinterpolatedValues.push( nextValue );\n\t\t\t\t\t\tnextValue += step;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurve.times = inject( curve.times, i, interpolatedTimes );\n\t\t\t\t\tcurve.values = inject( curve.values, i, interpolatedValues );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t};\n\n\t// parse an FBX file in ASCII format\n\tfunction TextParser() {}\n\n\tTextParser.prototype = {\n\n\t\tconstructor: TextParser,\n\n\t\tgetPrevNode: function () {\n\n\t\t\treturn this.nodeStack[ this.currentIndent - 2 ];\n\n\t\t},\n\n\t\tgetCurrentNode: function () {\n\n\t\t\treturn this.nodeStack[ this.currentIndent - 1 ];\n\n\t\t},\n\n\t\tgetCurrentProp: function () {\n\n\t\t\treturn this.currentProp;\n\n\t\t},\n\n\t\tpushStack: function ( node ) {\n\n\t\t\tthis.nodeStack.push( node );\n\t\t\tthis.currentIndent += 1;\n\n\t\t},\n\n\t\tpopStack: function () {\n\n\t\t\tthis.nodeStack.pop();\n\t\t\tthis.currentIndent -= 1;\n\n\t\t},\n\n\t\tsetCurrentProp: function ( val, name ) {\n\n\t\t\tthis.currentProp = val;\n\t\t\tthis.currentPropName = name;\n\n\t\t},\n\n\t\tparse: function ( text ) {\n\n\t\t\tthis.currentIndent = 0;\n\t\t\tconsole.log(\"FBXTree: \", FBXTree);\n\t\t\tthis.allNodes = new FBXTree();\n\t\t\tthis.nodeStack = [];\n\t\t\tthis.currentProp = [];\n\t\t\tthis.currentPropName = '';\n\n\t\t\tvar self = this;\n\n\t\t\tvar split = text.split( /[\\r\\n]+/ );\n\n\t\t\tsplit.forEach( function ( line, i ) {\n\n\t\t\t\tvar matchComment = line.match( /^[\\s\\t]*;/ );\n\t\t\t\tvar matchEmpty = line.match( /^[\\s\\t]*$/ );\n\n\t\t\t\tif ( matchComment || matchEmpty ) return;\n\n\t\t\t\tvar matchBeginning = line.match( '^\\\\t{' + self.currentIndent + '}(\\\\w+):(.*){', '' );\n\t\t\t\tvar matchProperty = line.match( '^\\\\t{' + ( self.currentIndent ) + '}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)' );\n\t\t\t\tvar matchEnd = line.match( '^\\\\t{' + ( self.currentIndent - 1 ) + '}}' );\n\n\t\t\t\tif ( matchBeginning ) {\n\n\t\t\t\t\tself.parseNodeBegin( line, matchBeginning );\n\n\t\t\t\t} else if ( matchProperty ) {\n\n\t\t\t\t\tself.parseNodeProperty( line, matchProperty, split[ ++ i ] );\n\n\t\t\t\t} else if ( matchEnd ) {\n\n\t\t\t\t\tself.popStack();\n\n\t\t\t\t} else if ( line.match( /^[^\\s\\t}]/ ) ) {\n\n\t\t\t\t\t// large arrays are split over multiple lines terminated with a ',' character\n\t\t\t\t\t// if this is encountered the line needs to be joined to the previous line\n\t\t\t\t\tself.parseNodePropertyContinued( line );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\treturn this.allNodes;\n\n\t\t},\n\n\t\tparseNodeBegin: function ( line, property ) {\n\n\t\t\tvar nodeName = property[ 1 ].trim().replace( /^\"/, '' ).replace( /\"$/, '' );\n\n\t\t\tvar nodeAttrs = property[ 2 ].split( ',' ).map( function ( attr ) {\n\n\t\t\t\treturn attr.trim().replace( /^\"/, '' ).replace( /\"$/, '' );\n\n\t\t\t} );\n\n\t\t\tvar node = { name: nodeName };\n\t\t\tvar attrs = this.parseNodeAttr( nodeAttrs );\n\n\t\t\tvar currentNode = this.getCurrentNode();\n\n\t\t\t// a top node\n\t\t\tif ( this.currentIndent === 0 ) {\n\n\t\t\t\tthis.allNodes.add( nodeName, node );\n\n\t\t\t} else { // a subnode\n\n\t\t\t\t// if the subnode already exists, append it\n\t\t\t\tif ( nodeName in currentNode ) {\n\n\t\t\t\t// special case Pose needs PoseNodes as an array\n\t\t\t\t\tif ( nodeName === 'PoseNode' ) {\n\n\t\t\t\t\t\tcurrentNode.PoseNode.push( node );\n\n\t\t\t\t\t} else if ( currentNode[ nodeName ].id !== undefined ) {\n\n\t\t\t\t\t\tcurrentNode[ nodeName ] = {};\n\t\t\t\t\t\tcurrentNode[ nodeName ][ currentNode[ nodeName ].id ] = currentNode[ nodeName ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attrs.id !== '' ) currentNode[ nodeName ][ attrs.id ] = node;\n\n\t\t\t\t} else if ( typeof attrs.id === 'number' ) {\n\n\t\t\t\t\tcurrentNode[ nodeName ] = {};\n\t\t\t\t\tcurrentNode[ nodeName ][ attrs.id ] = node;\n\n\t\t\t\t} else if ( nodeName !== 'Properties70' ) {\n\n\t\t\t\t\tif ( nodeName === 'PoseNode' )\tcurrentNode[ nodeName ] = [ node ];\n\t\t\t\t\telse currentNode[ nodeName ] = node;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( typeof attrs.id === 'number' ) node.id = attrs.id;\n\t\t\tif ( attrs.name !== '' ) node.attrName = attrs.name;\n\t\t\tif ( attrs.type !== '' ) node.attrType = attrs.type;\n\n\t\t\tthis.pushStack( node );\n\n\t\t},\n\n\t\tparseNodeAttr: function ( attrs ) {\n\n\t\t\tvar id = attrs[ 0 ];\n\n\t\t\tif ( attrs[ 0 ] !== '' ) {\n\n\t\t\t\tid = parseInt( attrs[ 0 ] );\n\n\t\t\t\tif ( isNaN( id ) ) {\n\n\t\t\t\t\tid = attrs[ 0 ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar name = '', type = '';\n\n\t\t\tif ( attrs.length > 1 ) {\n\n\t\t\t\tname = attrs[ 1 ].replace( /^(\\w+)::/, '' );\n\t\t\t\ttype = attrs[ 2 ];\n\n\t\t\t}\n\n\t\t\treturn { id: id, name: name, type: type };\n\n\t\t},\n\n\t\tparseNodeProperty: function ( line, property, contentLine ) {\n\n\t\t\tvar propName = property[ 1 ].replace( /^\"/, '' ).replace( /\"$/, '' ).trim();\n\t\t\tvar propValue = property[ 2 ].replace( /^\"/, '' ).replace( /\"$/, '' ).trim();\n\n\t\t\t// for special case: base64 image data follows \"Content: ,\" line\n\t\t\t//\tContent: ,\n\t\t\t//\t \"/9j/4RDaRXhpZgAATU0A...\"\n\t\t\tif ( propName === 'Content' && propValue === ',' ) {\n\n\t\t\t\tpropValue = contentLine.replace( /\"/g, '' ).replace( /,$/, '' ).trim();\n\n\t\t\t}\n\n\t\t\tvar currentNode = this.getCurrentNode();\n\t\t\tvar parentName = currentNode.name;\n\n\t\t\tif ( parentName === 'Properties70' ) {\n\n\t\t\t\tthis.parseNodeSpecialProperty( line, propName, propValue );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// Connections\n\t\t\tif ( propName === 'C' ) {\n\n\t\t\t\tvar connProps = propValue.split( ',' ).slice( 1 );\n\t\t\t\tvar from = parseInt( connProps[ 0 ] );\n\t\t\t\tvar to = parseInt( connProps[ 1 ] );\n\n\t\t\t\tvar rest = propValue.split( ',' ).slice( 3 );\n\n\t\t\t\trest = rest.map( function ( elem ) {\n\n\t\t\t\t\treturn elem.trim().replace( /^\"/, '' );\n\n\t\t\t\t} );\n\n\t\t\t\tpropName = 'connections';\n\t\t\t\tpropValue = [ from, to ];\n\t\t\t\tappend( propValue, rest );\n\n\t\t\t\tif ( currentNode[ propName ] === undefined ) {\n\n\t\t\t\t\tcurrentNode[ propName ] = [];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Node\n\t\t\tif ( propName === 'Node' ) currentNode.id = propValue;\n\n\t\t\t// connections\n\t\t\tif ( propName in currentNode && Array.isArray( currentNode[ propName ] ) ) {\n\n\t\t\t\tcurrentNode[ propName ].push( propValue );\n\n\t\t\t} else {\n\n\t\t\t\tif ( propName !== 'a' ) currentNode[ propName ] = propValue;\n\t\t\t\telse currentNode.a = propValue;\n\n\t\t\t}\n\n\t\t\tthis.setCurrentProp( currentNode, propName );\n\n\t\t\t// convert string to array, unless it ends in ',' in which case more will be added to it\n\t\t\tif ( propName === 'a' && propValue.slice( - 1 ) !== ',' ) {\n\n\t\t\t\tcurrentNode.a = parseNumberArray( propValue );\n\n\t\t\t}\n\n\t\t},\n\n\t\tparseNodePropertyContinued: function ( line ) {\n\n\t\t\tvar currentNode = this.getCurrentNode();\n\n\t\t\tcurrentNode.a += line;\n\n\t\t\t// if the line doesn't end in ',' we have reached the end of the property value\n\t\t\t// so convert the string to an array\n\t\t\tif ( line.slice( - 1 ) !== ',' ) {\n\n\t\t\t\tcurrentNode.a = parseNumberArray( currentNode.a );\n\n\t\t\t}\n\n\t\t},\n\n\t\t// parse \"Property70\"\n\t\tparseNodeSpecialProperty: function ( line, propName, propValue ) {\n\n\t\t\t// split this\n\t\t\t// P: \"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\",1,1,1\n\t\t\t// into array like below\n\t\t\t// [\"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\", \"1,1,1\" ]\n\t\t\tvar props = propValue.split( '\",' ).map( function ( prop ) {\n\n\t\t\t\treturn prop.trim().replace( /^\\\"/, '' ).replace( /\\s/, '_' );\n\n\t\t\t} );\n\n\t\t\tvar innerPropName = props[ 0 ];\n\t\t\tvar innerPropType1 = props[ 1 ];\n\t\t\tvar innerPropType2 = props[ 2 ];\n\t\t\tvar innerPropFlag = props[ 3 ];\n\t\t\tvar innerPropValue = props[ 4 ];\n\n\t\t\t// cast values where needed, otherwise leave as strings\n\t\t\tswitch ( innerPropType1 ) {\n\n\t\t\t\tcase 'int':\n\t\t\t\tcase 'enum':\n\t\t\t\tcase 'bool':\n\t\t\t\tcase 'ULongLong':\n\t\t\t\tcase 'double':\n\t\t\t\tcase 'Number':\n\t\t\t\tcase 'FieldOfView':\n\t\t\t\t\tinnerPropValue = parseFloat( innerPropValue );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Color':\n\t\t\t\tcase 'ColorRGB':\n\t\t\t\tcase 'Vector3D':\n\t\t\t\tcase 'Lcl_Translation':\n\t\t\t\tcase 'Lcl_Rotation':\n\t\t\t\tcase 'Lcl_Scaling':\n\t\t\t\t\tinnerPropValue = parseNumberArray( innerPropValue );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\t// CAUTION: these props must append to parent's parent\n\t\t\tthis.getPrevNode()[ innerPropName ] = {\n\n\t\t\t\t'type': innerPropType1,\n\t\t\t\t'type2': innerPropType2,\n\t\t\t\t'flag': innerPropFlag,\n\t\t\t\t'value': innerPropValue\n\n\t\t\t};\n\n\t\t\tthis.setCurrentProp( this.getPrevNode(), innerPropName );\n\n\t\t},\n\n\t};\n\n\t// Parse an FBX file in Binary format\n\tfunction BinaryParser() {}\n\n\tBinaryParser.prototype = {\n\n\t\tconstructor: BinaryParser,\n\n\t\tparse: function ( buffer ) {\n\n\t\t\tvar reader = new BinaryReader( buffer );\n\t\t\treader.skip( 23 ); // skip magic 23 bytes\n\n\t\t\tvar version = reader.getUint32();\n\n\t\t\tconsole.log( 'THREE.FBXLoader: FBX binary version: ' + version );\n\n\t\t\tvar allNodes = new FBXTree();\n\n\t\t\twhile ( ! this.endOfContent( reader ) ) {\n\n\t\t\t\tvar node = this.parseNode( reader, version );\n\t\t\t\tif ( node !== null ) allNodes.add( node.name, node );\n\n\t\t\t}\n\n\t\t\treturn allNodes;\n\n\t\t},\n\n\t\t// Check if reader has reached the end of content.\n\t\tendOfContent: function ( reader ) {\n\n\t\t\t// footer size: 160bytes + 16-byte alignment padding\n\t\t\t// - 16bytes: magic\n\t\t\t// - padding til 16-byte alignment (at least 1byte?)\n\t\t\t//\t(seems like some exporters embed fixed 15 or 16bytes?)\n\t\t\t// - 4bytes: magic\n\t\t\t// - 4bytes: version\n\t\t\t// - 120bytes: zero\n\t\t\t// - 16bytes: magic\n\t\t\tif ( reader.size() % 16 === 0 ) {\n\n\t\t\t\treturn ( ( reader.getOffset() + 160 + 16 ) & ~ 0xf ) >= reader.size();\n\n\t\t\t} else {\n\n\t\t\t\treturn reader.getOffset() + 160 + 16 >= reader.size();\n\n\t\t\t}\n\n\t\t},\n\n\t\t// recursively parse nodes until the end of the file is reached\n\t\tparseNode: function ( reader, version ) {\n\n\t\t\tvar node = {};\n\n\t\t\t// The first three data sizes depends on version.\n\t\t\tvar endOffset = ( version >= 7500 ) ? reader.getUint64() : reader.getUint32();\n\t\t\tvar numProperties = ( version >= 7500 ) ? reader.getUint64() : reader.getUint32();\n\n\t\t\t// note: do not remove this even if you get a linter warning as it moves the buffer forward\n\t\t\tvar propertyListLen = ( version >= 7500 ) ? reader.getUint64() : reader.getUint32();\n\n\t\t\tvar nameLen = reader.getUint8();\n\t\t\tvar name = reader.getString( nameLen );\n\n\t\t\t// Regards this node as NULL-record if endOffset is zero\n\t\t\tif ( endOffset === 0 ) return null;\n\n\t\t\tvar propertyList = [];\n\n\t\t\tfor ( var i = 0; i < numProperties; i ++ ) {\n\n\t\t\t\tpropertyList.push( this.parseProperty( reader ) );\n\n\t\t\t}\n\n\t\t\t// Regards the first three elements in propertyList as id, attrName, and attrType\n\t\t\tvar id = propertyList.length > 0 ? propertyList[ 0 ] : '';\n\t\t\tvar attrName = propertyList.length > 1 ? propertyList[ 1 ] : '';\n\t\t\tvar attrType = propertyList.length > 2 ? propertyList[ 2 ] : '';\n\n\t\t\t// check if this node represents just a single property\n\t\t\t// like (name, 0) set or (name2, [0, 1, 2]) set of {name: 0, name2: [0, 1, 2]}\n\t\t\tnode.singleProperty = ( numProperties === 1 && reader.getOffset() === endOffset ) ? true : false;\n\n\t\t\twhile ( endOffset > reader.getOffset() ) {\n\n\t\t\t\tvar subNode = this.parseNode( reader, version );\n\n\t\t\t\tif ( subNode !== null ) this.parseSubNode( name, node, subNode );\n\n\t\t\t}\n\n\t\t\tnode.propertyList = propertyList; // raw property list used by parent\n\n\t\t\tif ( typeof id === 'number' ) node.id = id;\n\t\t\tif ( attrName !== '' ) node.attrName = attrName;\n\t\t\tif ( attrType !== '' ) node.attrType = attrType;\n\t\t\tif ( name !== '' ) node.name = name;\n\n\t\t\treturn node;\n\n\t\t},\n\n\t\tparseSubNode: function ( name, node, subNode ) {\n\n\t\t\t// special case: child node is single property\n\t\t\tif ( subNode.singleProperty === true ) {\n\n\t\t\t\tvar value = subNode.propertyList[ 0 ];\n\n\t\t\t\tif ( Array.isArray( value ) ) {\n\n\t\t\t\t\tnode[ subNode.name ] = subNode;\n\n\t\t\t\t\tsubNode.a = value;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnode[ subNode.name ] = value;\n\n\t\t\t\t}\n\n\t\t\t} else if ( name === 'Connections' && subNode.name === 'C' ) {\n\n\t\t\t\tvar array = [];\n\n\t\t\t\tsubNode.propertyList.forEach( function ( property, i ) {\n\n\t\t\t\t\t// first Connection is FBX type (OO, OP, etc.). We'll discard these\n\t\t\t\t\tif ( i !== 0 ) array.push( property );\n\n\t\t\t\t} );\n\n\t\t\t\tif ( node.connections === undefined ) {\n\n\t\t\t\t\tnode.connections = [];\n\n\t\t\t\t}\n\n\t\t\t\tnode.connections.push( array );\n\n\t\t\t} else if ( subNode.name === 'Properties70' ) {\n\n\t\t\t\tvar keys = Object.keys( subNode );\n\n\t\t\t\tkeys.forEach( function ( key ) {\n\n\t\t\t\t\tnode[ key ] = subNode[ key ];\n\n\t\t\t\t} );\n\n\t\t\t} else if ( name === 'Properties70' && subNode.name === 'P' ) {\n\n\t\t\t\tvar innerPropName = subNode.propertyList[ 0 ];\n\t\t\t\tvar innerPropType1 = subNode.propertyList[ 1 ];\n\t\t\t\tvar innerPropType2 = subNode.propertyList[ 2 ];\n\t\t\t\tvar innerPropFlag = subNode.propertyList[ 3 ];\n\t\t\t\tvar innerPropValue;\n\n\t\t\t\tif ( innerPropName.indexOf( 'Lcl ' ) === 0 ) innerPropName = innerPropName.replace( 'Lcl ', 'Lcl_' );\n\t\t\t\tif ( innerPropType1.indexOf( 'Lcl ' ) === 0 ) innerPropType1 = innerPropType1.replace( 'Lcl ', 'Lcl_' );\n\n\t\t\t\tif ( innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf( 'Lcl_' ) === 0 ) {\n\n\t\t\t\t\tinnerPropValue = [\n\t\t\t\t\t\tsubNode.propertyList[ 4 ],\n\t\t\t\t\t\tsubNode.propertyList[ 5 ],\n\t\t\t\t\t\tsubNode.propertyList[ 6 ]\n\t\t\t\t\t];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tinnerPropValue = subNode.propertyList[ 4 ];\n\n\t\t\t\t}\n\n\t\t\t\t// this will be copied to parent, see above\n\t\t\t\tnode[ innerPropName ] = {\n\n\t\t\t\t\t'type': innerPropType1,\n\t\t\t\t\t'type2': innerPropType2,\n\t\t\t\t\t'flag': innerPropFlag,\n\t\t\t\t\t'value': innerPropValue\n\n\t\t\t\t};\n\n\t\t\t} else if ( node[ subNode.name ] === undefined ) {\n\n\t\t\t\tif ( typeof subNode.id === 'number' ) {\n\n\t\t\t\t\tnode[ subNode.name ] = {};\n\t\t\t\t\tnode[ subNode.name ][ subNode.id ] = subNode;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnode[ subNode.name ] = subNode;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( subNode.name === 'PoseNode' ) {\n\n\t\t\t\t\tif ( ! Array.isArray( node[ subNode.name ] ) ) {\n\n\t\t\t\t\t\tnode[ subNode.name ] = [ node[ subNode.name ] ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tnode[ subNode.name ].push( subNode );\n\n\t\t\t\t} else if ( node[ subNode.name ][ subNode.id ] === undefined ) {\n\n\t\t\t\t\tnode[ subNode.name ][ subNode.id ] = subNode;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tparseProperty: function ( reader ) {\n\n\t\t\tvar type = reader.getString( 1 );\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\tcase 'C':\n\t\t\t\t\treturn reader.getBoolean();\n\n\t\t\t\tcase 'D':\n\t\t\t\t\treturn reader.getFloat64();\n\n\t\t\t\tcase 'F':\n\t\t\t\t\treturn reader.getFloat32();\n\n\t\t\t\tcase 'I':\n\t\t\t\t\treturn reader.getInt32();\n\n\t\t\t\tcase 'L':\n\t\t\t\t\treturn reader.getInt64();\n\n\t\t\t\tcase 'R':\n\t\t\t\t\tvar length = reader.getUint32();\n\t\t\t\t\treturn reader.getArrayBuffer( length );\n\n\t\t\t\tcase 'S':\n\t\t\t\t\tvar length = reader.getUint32();\n\t\t\t\t\treturn reader.getString( length );\n\n\t\t\t\tcase 'Y':\n\t\t\t\t\treturn reader.getInt16();\n\n\t\t\t\tcase 'b':\n\t\t\t\tcase 'c':\n\t\t\t\tcase 'd':\n\t\t\t\tcase 'f':\n\t\t\t\tcase 'i':\n\t\t\t\tcase 'l':\n\n\t\t\t\t\tvar arrayLength = reader.getUint32();\n\t\t\t\t\tvar encoding = reader.getUint32(); // 0: non-compressed, 1: compressed\n\t\t\t\t\tvar compressedLength = reader.getUint32();\n\n\t\t\t\t\tif ( encoding === 0 ) {\n\n\t\t\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\t\t\tcase 'b':\n\t\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\t\treturn reader.getBooleanArray( arrayLength );\n\n\t\t\t\t\t\t\tcase 'd':\n\t\t\t\t\t\t\t\treturn reader.getFloat64Array( arrayLength );\n\n\t\t\t\t\t\t\tcase 'f':\n\t\t\t\t\t\t\t\treturn reader.getFloat32Array( arrayLength );\n\n\t\t\t\t\t\t\tcase 'i':\n\t\t\t\t\t\t\t\treturn reader.getInt32Array( arrayLength );\n\n\t\t\t\t\t\t\tcase 'l':\n\t\t\t\t\t\t\t\treturn reader.getInt64Array( arrayLength );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( typeof Zlib === 'undefined' ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.FBXLoader: External library Inflate.min.js required, obtain or import from https://github.com/imaya/zlib.js' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar inflate = new Zlib.Inflate( new Uint8Array( reader.getArrayBuffer( compressedLength ) ) ); // eslint-disable-line no-undef\n\t\t\t\t\tvar reader2 = new BinaryReader( inflate.decompress().buffer );\n\n\t\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\t\tcase 'b':\n\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\treturn reader2.getBooleanArray( arrayLength );\n\n\t\t\t\t\t\tcase 'd':\n\t\t\t\t\t\t\treturn reader2.getFloat64Array( arrayLength );\n\n\t\t\t\t\t\tcase 'f':\n\t\t\t\t\t\t\treturn reader2.getFloat32Array( arrayLength );\n\n\t\t\t\t\t\tcase 'i':\n\t\t\t\t\t\t\treturn reader2.getInt32Array( arrayLength );\n\n\t\t\t\t\t\tcase 'l':\n\t\t\t\t\t\t\treturn reader2.getInt64Array( arrayLength );\n\n\t\t\t\t\t}\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error( 'THREE.FBXLoader: Unknown property type ' + type );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tfunction BinaryReader( buffer, littleEndian ) {\n\n\t\tthis.dv = new DataView( buffer );\n\t\tthis.offset = 0;\n\t\tthis.littleEndian = ( littleEndian !== undefined ) ? littleEndian : true;\n\n\t}\n\n\tBinaryReader.prototype = {\n\n\t\tconstructor: BinaryReader,\n\n\t\tgetOffset: function () {\n\n\t\t\treturn this.offset;\n\n\t\t},\n\n\t\tsize: function () {\n\n\t\t\treturn this.dv.buffer.byteLength;\n\n\t\t},\n\n\t\tskip: function ( length ) {\n\n\t\t\tthis.offset += length;\n\n\t\t},\n\n\t\t// seems like true/false representation depends on exporter.\n\t\t// true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n\t\t// then sees LSB.\n\t\tgetBoolean: function () {\n\n\t\t\treturn ( this.getUint8() & 1 ) === 1;\n\n\t\t},\n\n\t\tgetBooleanArray: function ( size ) {\n\n\t\t\tvar a = [];\n\n\t\t\tfor ( var i = 0; i < size; i ++ ) {\n\n\t\t\t\ta.push( this.getBoolean() );\n\n\t\t\t}\n\n\t\t\treturn a;\n\n\t\t},\n\n\t\tgetUint8: function () {\n\n\t\t\tvar value = this.dv.getUint8( this.offset );\n\t\t\tthis.offset += 1;\n\t\t\treturn value;\n\n\t\t},\n\n\t\tgetInt16: function () {\n\n\t\t\tvar value = this.dv.getInt16( this.offset, this.littleEndian );\n\t\t\tthis.offset += 2;\n\t\t\treturn value;\n\n\t\t},\n\n\t\tgetInt32: function () {\n\n\t\t\tvar value = this.dv.getInt32( this.offset, this.littleEndian );\n\t\t\tthis.offset += 4;\n\t\t\treturn value;\n\n\t\t},\n\n\t\tgetInt32Array: function ( size ) {\n\n\t\t\tvar a = [];\n\n\t\t\tfor ( var i = 0; i < size; i ++ ) {\n\n\t\t\t\ta.push( this.getInt32() );\n\n\t\t\t}\n\n\t\t\treturn a;\n\n\t\t},\n\n\t\tgetUint32: function () {\n\n\t\t\tvar value = this.dv.getUint32( this.offset, this.littleEndian );\n\t\t\tthis.offset += 4;\n\t\t\treturn value;\n\n\t\t},\n\n\t\t// JavaScript doesn't support 64-bit integer so calculate this here\n\t\t// 1 << 32 will return 1 so using multiply operation instead here.\n\t\t// There's a possibility that this method returns wrong value if the value\n\t\t// is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n\t\t// TODO: safely handle 64-bit integer\n\t\tgetInt64: function () {\n\n\t\t\tvar low, high;\n\n\t\t\tif ( this.littleEndian ) {\n\n\t\t\t\tlow = this.getUint32();\n\t\t\t\thigh = this.getUint32();\n\n\t\t\t} else {\n\n\t\t\t\thigh = this.getUint32();\n\t\t\t\tlow = this.getUint32();\n\n\t\t\t}\n\n\t\t\t// calculate negative value\n\t\t\tif ( high & 0x80000000 ) {\n\n\t\t\t\thigh = ~ high & 0xFFFFFFFF;\n\t\t\t\tlow = ~ low & 0xFFFFFFFF;\n\n\t\t\t\tif ( low === 0xFFFFFFFF ) high = ( high + 1 ) & 0xFFFFFFFF;\n\n\t\t\t\tlow = ( low + 1 ) & 0xFFFFFFFF;\n\n\t\t\t\treturn - ( high * 0x100000000 + low );\n\n\t\t\t}\n\n\t\t\treturn high * 0x100000000 + low;\n\n\t\t},\n\n\t\tgetInt64Array: function ( size ) {\n\n\t\t\tvar a = [];\n\n\t\t\tfor ( var i = 0; i < size; i ++ ) {\n\n\t\t\t\ta.push( this.getInt64() );\n\n\t\t\t}\n\n\t\t\treturn a;\n\n\t\t},\n\n\t\t// Note: see getInt64() comment\n\t\tgetUint64: function () {\n\n\t\t\tvar low, high;\n\n\t\t\tif ( this.littleEndian ) {\n\n\t\t\t\tlow = this.getUint32();\n\t\t\t\thigh = this.getUint32();\n\n\t\t\t} else {\n\n\t\t\t\thigh = this.getUint32();\n\t\t\t\tlow = this.getUint32();\n\n\t\t\t}\n\n\t\t\treturn high * 0x100000000 + low;\n\n\t\t},\n\n\t\tgetFloat32: function () {\n\n\t\t\tvar value = this.dv.getFloat32( this.offset, this.littleEndian );\n\t\t\tthis.offset += 4;\n\t\t\treturn value;\n\n\t\t},\n\n\t\tgetFloat32Array: function ( size ) {\n\n\t\t\tvar a = [];\n\n\t\t\tfor ( var i = 0; i < size; i ++ ) {\n\n\t\t\t\ta.push( this.getFloat32() );\n\n\t\t\t}\n\n\t\t\treturn a;\n\n\t\t},\n\n\t\tgetFloat64: function () {\n\n\t\t\tvar value = this.dv.getFloat64( this.offset, this.littleEndian );\n\t\t\tthis.offset += 8;\n\t\t\treturn value;\n\n\t\t},\n\n\t\tgetFloat64Array: function ( size ) {\n\n\t\t\tvar a = [];\n\n\t\t\tfor ( var i = 0; i < size; i ++ ) {\n\n\t\t\t\ta.push( this.getFloat64() );\n\n\t\t\t}\n\n\t\t\treturn a;\n\n\t\t},\n\n\t\tgetArrayBuffer: function ( size ) {\n\n\t\t\tvar value = this.dv.buffer.slice( this.offset, this.offset + size );\n\t\t\tthis.offset += size;\n\t\t\treturn value;\n\n\t\t},\n\n\t\tgetString: function ( size ) {\n\n\t\t\t// note: safari 9 doesn't support Uint8Array.indexOf; create intermediate array instead\n\t\t\tvar a = [];\n\n\t\t\tfor ( var i = 0; i < size; i ++ ) {\n\n\t\t\t\ta[ i ] = this.getUint8();\n\n\t\t\t}\n\n\t\t\tvar nullByte = a.indexOf( 0 );\n\t\t\tif ( nullByte >= 0 ) a = a.slice( 0, nullByte );\n\n\t\t\treturn THREE.LoaderUtils.decodeText( new Uint8Array( a ) );\n\n\t\t}\n\n\t};\n\n\t// FBXTree holds a representation of the FBX data, returned by the TextParser ( FBX ASCII format)\n\t// and BinaryParser( FBX Binary format)\n\tfunction FBXTree() {}\n\n\tFBXTree.prototype = {\n\n\t\tconstructor: FBXTree,\n\n\t\tadd: function ( key, val ) {\n\n\t\t\tthis[ key ] = val;\n\n\t\t},\n\n\t};\n\n\t// ************** UTILITY FUNCTIONS **************\n\n\tfunction isFbxFormatBinary( buffer ) {\n\n\t\tvar CORRECT = 'Kaydara FBX Binary  \\0';\n\n\t\treturn buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString( buffer, 0, CORRECT.length );\n\n\t}\n\n\tfunction isFbxFormatASCII( text ) {\n\n\t\tvar CORRECT = [ 'K', 'a', 'y', 'd', 'a', 'r', 'a', '\\\\', 'F', 'B', 'X', '\\\\', 'B', 'i', 'n', 'a', 'r', 'y', '\\\\', '\\\\' ];\n\n\t\tvar cursor = 0;\n\n\t\tfunction read( offset ) {\n\n\t\t\tvar result = text[ offset - 1 ];\n\t\t\ttext = text.slice( cursor + offset );\n\t\t\tcursor ++;\n\t\t\treturn result;\n\n\t\t}\n\n\t\tfor ( var i = 0; i < CORRECT.length; ++ i ) {\n\n\t\t\tvar num = read( 1 );\n\t\t\tif ( num === CORRECT[ i ] ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfunction getFbxVersion( text ) {\n\n\t\tvar versionRegExp = /FBXVersion: (\\d+)/;\n\t\tvar match = text.match( versionRegExp );\n\t\tif ( match ) {\n\n\t\t\tvar version = parseInt( match[ 1 ] );\n\t\t\treturn version;\n\n\t\t}\n\t\tthrow new Error( 'THREE.FBXLoader: Cannot find the version number for the file given.' );\n\n\t}\n\n\t// Converts FBX ticks into real time seconds.\n\tfunction convertFBXTimeToSeconds( time ) {\n\n\t\treturn time / 46186158000;\n\n\t}\n\n\tvar dataArray = [];\n\n\t// extracts the data from the correct position in the FBX array based on indexing type\n\tfunction getData( polygonVertexIndex, polygonIndex, vertexIndex, infoObject ) {\n\n\t\tvar index;\n\n\t\tswitch ( infoObject.mappingType ) {\n\n\t\t\tcase 'ByPolygonVertex' :\n\t\t\t\tindex = polygonVertexIndex;\n\t\t\t\tbreak;\n\t\t\tcase 'ByPolygon' :\n\t\t\t\tindex = polygonIndex;\n\t\t\t\tbreak;\n\t\t\tcase 'ByVertice' :\n\t\t\t\tindex = vertexIndex;\n\t\t\t\tbreak;\n\t\t\tcase 'AllSame' :\n\t\t\t\tindex = infoObject.indices[ 0 ];\n\t\t\t\tbreak;\n\t\t\tdefault :\n\t\t\t\tconsole.warn( 'THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType );\n\n\t\t}\n\n\t\tif ( infoObject.referenceType === 'IndexToDirect' ) index = infoObject.indices[ index ];\n\n\t\tvar from = index * infoObject.dataSize;\n\t\tvar to = from + infoObject.dataSize;\n\n\t\treturn slice( dataArray, infoObject.buffer, from, to );\n\n\t}\n\n\tvar tempMat = new THREE.Matrix4();\n\tvar tempEuler = new THREE.Euler();\n\tvar tempVec = new THREE.Vector3();\n\tvar translation = new THREE.Vector3();\n\tvar rotation = new THREE.Matrix4();\n\n\t// generate transformation from FBX transform data\n\t// ref: https://help.autodesk.com/view/FBX/2017/ENU/?guid=__files_GUID_10CDD63C_79C1_4F2D_BB28_AD2BE65A02ED_htm\n\t// transformData = {\n\t//\t eulerOrder: int,\n\t//\t translation: [],\n\t//   rotationOffset: [],\n\t//\t preRotation\n\t//\t rotation\n\t//\t postRotation\n\t//   scale\n\t// }\n\t// all entries are optional\n\tfunction generateTransform( transformData ) {\n\n\t\tvar transform = new THREE.Matrix4();\n\t\ttranslation.set( 0, 0, 0 );\n\t\trotation.identity();\n\n\t\tvar order = ( transformData.eulerOrder ) ? getEulerOrder( transformData.eulerOrder ) : getEulerOrder( 0 );\n\n\t\tif ( transformData.translation ) translation.fromArray( transformData.translation );\n\t\tif ( transformData.rotationOffset ) translation.add( tempVec.fromArray( transformData.rotationOffset ) );\n\n\t\tif ( transformData.rotation ) {\n\n\t\t\tvar array = transformData.rotation.map( THREE.Math.degToRad );\n\t\t\tarray.push( order );\n\t\t\trotation.makeRotationFromEuler( tempEuler.fromArray( array ) );\n\n\t\t}\n\n\t\tif ( transformData.preRotation ) {\n\n\t\t\tvar array = transformData.preRotation.map( THREE.Math.degToRad );\n\t\t\tarray.push( order );\n\t\t\ttempMat.makeRotationFromEuler( tempEuler.fromArray( array ) );\n\n\t\t\trotation.premultiply( tempMat );\n\n\t\t}\n\n\t\tif ( transformData.postRotation ) {\n\n\t\t\tvar array = transformData.postRotation.map( THREE.Math.degToRad );\n\t\t\tarray.push( order );\n\t\t\ttempMat.makeRotationFromEuler( tempEuler.fromArray( array ) );\n\n\t\t\ttempMat.getInverse( tempMat );\n\n\t\t\trotation.multiply( tempMat );\n\n\t\t}\n\n\t\tif ( transformData.scale ) transform.scale( tempVec.fromArray( transformData.scale ) );\n\n\t\ttransform.setPosition( translation );\n\t\ttransform.multiply( rotation );\n\n\t\treturn transform;\n\n\t}\n\n\t// Returns the three.js intrinsic Euler order corresponding to FBX extrinsic Euler order\n\t// ref: http://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_class_fbx_euler_html\n\tfunction getEulerOrder( order ) {\n\n\t\tvar enums = [\n\t\t\t'ZYX', // -> XYZ extrinsic\n\t\t\t'YZX', // -> XZY extrinsic\n\t\t\t'XZY', // -> YZX extrinsic\n\t\t\t'ZXY', // -> YXZ extrinsic\n\t\t\t'YXZ', // -> ZXY extrinsic\n\t\t\t'XYZ', // -> ZYX extrinsic\n\t\t//'SphericXYZ', // not possible to support\n\t\t];\n\n\t\tif ( order === 6 ) {\n\n\t\t\tconsole.warn( 'THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.' );\n\t\t\treturn enums[ 0 ];\n\n\t\t}\n\n\t\treturn enums[ order ];\n\n\t}\n\n\t// Parses comma separated list of numbers and returns them an array.\n\t// Used internally by the TextParser\n\tfunction parseNumberArray( value ) {\n\n\t\tvar array = value.split( ',' ).map( function ( val ) {\n\n\t\t\treturn parseFloat( val );\n\n\t\t} );\n\n\t\treturn array;\n\n\t}\n\n\tfunction convertArrayBufferToString( buffer, from, to ) {\n\n\t\tif ( from === undefined ) from = 0;\n\t\tif ( to === undefined ) to = buffer.byteLength;\n\n\t\treturn THREE.LoaderUtils.decodeText( new Uint8Array( buffer, from, to ) );\n\n\t}\n\n\tfunction append( a, b ) {\n\n\t\tfor ( var i = 0, j = a.length, l = b.length; i < l; i ++, j ++ ) {\n\n\t\t\ta[ j ] = b[ i ];\n\n\t\t}\n\n\t}\n\n\tfunction slice( a, b, from, to ) {\n\n\t\tfor ( var i = from, j = 0; i < to; i ++, j ++ ) {\n\n\t\t\ta[ j ] = b[ i ];\n\n\t\t}\n\n\t\treturn a;\n\n\t}\n\n\t// inject array a2 into array a1 at index\n\tfunction inject( a1, index, a2 ) {\n\n\t\treturn a1.slice( 0, index ).concat( a2 ).concat( a1.slice( index ) );\n\n\t}\n\n\treturn FBXLoader;\n\n} )();\n"]},"metadata":{},"sourceType":"script"}