{"ast":null,"code":"/**\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / https://github.com/Mugen87\n */\nmodule.exports = THREE.ColladaLoader = function (manager) {\n  this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\n};\n\nTHREE.ColladaLoader.prototype = {\n  constructor: THREE.ColladaLoader,\n  crossOrigin: 'anonymous',\n  load: function (url, onLoad, onProgress, onError) {\n    var scope = this;\n    var path = scope.path === undefined ? THREE.LoaderUtils.extractUrlBase(url) : scope.path;\n    var loader = new THREE.FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.load(url, function (text) {\n      onLoad(scope.parse(text, path));\n    }, onProgress, onError);\n  },\n  setPath: function (value) {\n    this.path = value;\n    return this;\n  },\n  setResourcePath: function (value) {\n    this.resourcePath = value;\n    return this;\n  },\n  options: {\n    set convertUpAxis(value) {\n      console.warn('THREE.ColladaLoader: options.convertUpAxis() has been removed. Up axis is converted automatically.');\n    }\n\n  },\n  setCrossOrigin: function (value) {\n    this.crossOrigin = value;\n    return this;\n  },\n  parse: function (text, path) {\n    function getElementsByTagName(xml, name) {\n      // Non recursive xml.getElementsByTagName() ...\n      var array = [];\n      var childNodes = xml.childNodes;\n\n      for (var i = 0, l = childNodes.length; i < l; i++) {\n        var child = childNodes[i];\n\n        if (child.nodeName === name) {\n          array.push(child);\n        }\n      }\n\n      return array;\n    }\n\n    function parseStrings(text) {\n      if (text.length === 0) return [];\n      var parts = text.trim().split(/\\s+/);\n      var array = new Array(parts.length);\n\n      for (var i = 0, l = parts.length; i < l; i++) {\n        array[i] = parts[i];\n      }\n\n      return array;\n    }\n\n    function parseFloats(text) {\n      if (text.length === 0) return [];\n      var parts = text.trim().split(/\\s+/);\n      var array = new Array(parts.length);\n\n      for (var i = 0, l = parts.length; i < l; i++) {\n        array[i] = parseFloat(parts[i]);\n      }\n\n      return array;\n    }\n\n    function parseInts(text) {\n      if (text.length === 0) return [];\n      var parts = text.trim().split(/\\s+/);\n      var array = new Array(parts.length);\n\n      for (var i = 0, l = parts.length; i < l; i++) {\n        array[i] = parseInt(parts[i]);\n      }\n\n      return array;\n    }\n\n    function parseId(text) {\n      return text.substring(1);\n    }\n\n    function generateId() {\n      return 'three_default_' + count++;\n    }\n\n    function isEmpty(object) {\n      return Object.keys(object).length === 0;\n    } // asset\n\n\n    function parseAsset(xml) {\n      return {\n        unit: parseAssetUnit(getElementsByTagName(xml, 'unit')[0]),\n        upAxis: parseAssetUpAxis(getElementsByTagName(xml, 'up_axis')[0])\n      };\n    }\n\n    function parseAssetUnit(xml) {\n      if (xml !== undefined && xml.hasAttribute('meter') === true) {\n        return parseFloat(xml.getAttribute('meter'));\n      } else {\n        return 1; // default 1 meter\n      }\n    }\n\n    function parseAssetUpAxis(xml) {\n      return xml !== undefined ? xml.textContent : 'Y_UP';\n    } // library\n\n\n    function parseLibrary(xml, libraryName, nodeName, parser) {\n      var library = getElementsByTagName(xml, libraryName)[0];\n\n      if (library !== undefined) {\n        var elements = getElementsByTagName(library, nodeName);\n\n        for (var i = 0; i < elements.length; i++) {\n          parser(elements[i]);\n        }\n      }\n    }\n\n    function buildLibrary(data, builder) {\n      for (var name in data) {\n        var object = data[name];\n        object.build = builder(data[name]);\n      }\n    } // get\n\n\n    function getBuild(data, builder) {\n      if (data.build !== undefined) return data.build;\n      data.build = builder(data);\n      return data.build;\n    } // animation\n\n\n    function parseAnimation(xml) {\n      var data = {\n        sources: {},\n        samplers: {},\n        channels: {}\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        var id;\n\n        switch (child.nodeName) {\n          case 'source':\n            id = child.getAttribute('id');\n            data.sources[id] = parseSource(child);\n            break;\n\n          case 'sampler':\n            id = child.getAttribute('id');\n            data.samplers[id] = parseAnimationSampler(child);\n            break;\n\n          case 'channel':\n            id = child.getAttribute('target');\n            data.channels[id] = parseAnimationChannel(child);\n            break;\n\n          default:\n            console.log(child);\n        }\n      }\n\n      library.animations[xml.getAttribute('id')] = data;\n    }\n\n    function parseAnimationSampler(xml) {\n      var data = {\n        inputs: {}\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'input':\n            var id = parseId(child.getAttribute('source'));\n            var semantic = child.getAttribute('semantic');\n            data.inputs[semantic] = id;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseAnimationChannel(xml) {\n      var data = {};\n      var target = xml.getAttribute('target'); // parsing SID Addressing Syntax\n\n      var parts = target.split('/');\n      var id = parts.shift();\n      var sid = parts.shift(); // check selection syntax\n\n      var arraySyntax = sid.indexOf('(') !== -1;\n      var memberSyntax = sid.indexOf('.') !== -1;\n\n      if (memberSyntax) {\n        //  member selection access\n        parts = sid.split('.');\n        sid = parts.shift();\n        data.member = parts.shift();\n      } else if (arraySyntax) {\n        // array-access syntax. can be used to express fields in one-dimensional vectors or two-dimensional matrices.\n        var indices = sid.split('(');\n        sid = indices.shift();\n\n        for (var i = 0; i < indices.length; i++) {\n          indices[i] = parseInt(indices[i].replace(/\\)/, ''));\n        }\n\n        data.indices = indices;\n      }\n\n      data.id = id;\n      data.sid = sid;\n      data.arraySyntax = arraySyntax;\n      data.memberSyntax = memberSyntax;\n      data.sampler = parseId(xml.getAttribute('source'));\n      return data;\n    }\n\n    function buildAnimation(data) {\n      var tracks = [];\n      var channels = data.channels;\n      var samplers = data.samplers;\n      var sources = data.sources;\n\n      for (var target in channels) {\n        if (channels.hasOwnProperty(target)) {\n          var channel = channels[target];\n          var sampler = samplers[channel.sampler];\n          var inputId = sampler.inputs.INPUT;\n          var outputId = sampler.inputs.OUTPUT;\n          var inputSource = sources[inputId];\n          var outputSource = sources[outputId];\n          var animation = buildAnimationChannel(channel, inputSource, outputSource);\n          createKeyframeTracks(animation, tracks);\n        }\n      }\n\n      return tracks;\n    }\n\n    function getAnimation(id) {\n      return getBuild(library.animations[id], buildAnimation);\n    }\n\n    function buildAnimationChannel(channel, inputSource, outputSource) {\n      var node = library.nodes[channel.id];\n      var object3D = getNode(node.id);\n      var transform = node.transforms[channel.sid];\n      var defaultMatrix = node.matrix.clone().transpose();\n      var time, stride;\n      var i, il, j, jl;\n      var data = {}; // the collada spec allows the animation of data in various ways.\n      // depending on the transform type (matrix, translate, rotate, scale), we execute different logic\n\n      switch (transform) {\n        case 'matrix':\n          for (i = 0, il = inputSource.array.length; i < il; i++) {\n            time = inputSource.array[i];\n            stride = i * outputSource.stride;\n            if (data[time] === undefined) data[time] = {};\n\n            if (channel.arraySyntax === true) {\n              var value = outputSource.array[stride];\n              var index = channel.indices[0] + 4 * channel.indices[1];\n              data[time][index] = value;\n            } else {\n              for (j = 0, jl = outputSource.stride; j < jl; j++) {\n                data[time][j] = outputSource.array[stride + j];\n              }\n            }\n          }\n\n          break;\n\n        case 'translate':\n          console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n          break;\n\n        case 'rotate':\n          console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n          break;\n\n        case 'scale':\n          console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n          break;\n      }\n\n      var keyframes = prepareAnimationData(data, defaultMatrix);\n      var animation = {\n        name: object3D.uuid,\n        keyframes: keyframes\n      };\n      return animation;\n    }\n\n    function prepareAnimationData(data, defaultMatrix) {\n      var keyframes = []; // transfer data into a sortable array\n\n      for (var time in data) {\n        keyframes.push({\n          time: parseFloat(time),\n          value: data[time]\n        });\n      } // ensure keyframes are sorted by time\n\n\n      keyframes.sort(ascending); // now we clean up all animation data, so we can use them for keyframe tracks\n\n      for (var i = 0; i < 16; i++) {\n        transformAnimationData(keyframes, i, defaultMatrix.elements[i]);\n      }\n\n      return keyframes; // array sort function\n\n      function ascending(a, b) {\n        return a.time - b.time;\n      }\n    }\n\n    var position = new THREE.Vector3();\n    var scale = new THREE.Vector3();\n    var quaternion = new THREE.Quaternion();\n\n    function createKeyframeTracks(animation, tracks) {\n      var keyframes = animation.keyframes;\n      var name = animation.name;\n      var times = [];\n      var positionData = [];\n      var quaternionData = [];\n      var scaleData = [];\n\n      for (var i = 0, l = keyframes.length; i < l; i++) {\n        var keyframe = keyframes[i];\n        var time = keyframe.time;\n        var value = keyframe.value;\n        matrix.fromArray(value).transpose();\n        matrix.decompose(position, quaternion, scale);\n        times.push(time);\n        positionData.push(position.x, position.y, position.z);\n        quaternionData.push(quaternion.x, quaternion.y, quaternion.z, quaternion.w);\n        scaleData.push(scale.x, scale.y, scale.z);\n      }\n\n      if (positionData.length > 0) tracks.push(new THREE.VectorKeyframeTrack(name + '.position', times, positionData));\n      if (quaternionData.length > 0) tracks.push(new THREE.QuaternionKeyframeTrack(name + '.quaternion', times, quaternionData));\n      if (scaleData.length > 0) tracks.push(new THREE.VectorKeyframeTrack(name + '.scale', times, scaleData));\n      return tracks;\n    }\n\n    function transformAnimationData(keyframes, property, defaultValue) {\n      var keyframe;\n      var empty = true;\n      var i, l; // check, if values of a property are missing in our keyframes\n\n      for (i = 0, l = keyframes.length; i < l; i++) {\n        keyframe = keyframes[i];\n\n        if (keyframe.value[property] === undefined) {\n          keyframe.value[property] = null; // mark as missing\n        } else {\n          empty = false;\n        }\n      }\n\n      if (empty === true) {\n        // no values at all, so we set a default value\n        for (i = 0, l = keyframes.length; i < l; i++) {\n          keyframe = keyframes[i];\n          keyframe.value[property] = defaultValue;\n        }\n      } else {\n        // filling gaps\n        createMissingKeyframes(keyframes, property);\n      }\n    }\n\n    function createMissingKeyframes(keyframes, property) {\n      var prev, next;\n\n      for (var i = 0, l = keyframes.length; i < l; i++) {\n        var keyframe = keyframes[i];\n\n        if (keyframe.value[property] === null) {\n          prev = getPrev(keyframes, i, property);\n          next = getNext(keyframes, i, property);\n\n          if (prev === null) {\n            keyframe.value[property] = next.value[property];\n            continue;\n          }\n\n          if (next === null) {\n            keyframe.value[property] = prev.value[property];\n            continue;\n          }\n\n          interpolate(keyframe, prev, next, property);\n        }\n      }\n    }\n\n    function getPrev(keyframes, i, property) {\n      while (i >= 0) {\n        var keyframe = keyframes[i];\n        if (keyframe.value[property] !== null) return keyframe;\n        i--;\n      }\n\n      return null;\n    }\n\n    function getNext(keyframes, i, property) {\n      while (i < keyframes.length) {\n        var keyframe = keyframes[i];\n        if (keyframe.value[property] !== null) return keyframe;\n        i++;\n      }\n\n      return null;\n    }\n\n    function interpolate(key, prev, next, property) {\n      if (next.time - prev.time === 0) {\n        key.value[property] = prev.value[property];\n        return;\n      }\n\n      key.value[property] = (key.time - prev.time) * (next.value[property] - prev.value[property]) / (next.time - prev.time) + prev.value[property];\n    } // animation clips\n\n\n    function parseAnimationClip(xml) {\n      var data = {\n        name: xml.getAttribute('id') || 'default',\n        start: parseFloat(xml.getAttribute('start') || 0),\n        end: parseFloat(xml.getAttribute('end') || 0),\n        animations: []\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'instance_animation':\n            data.animations.push(parseId(child.getAttribute('url')));\n            break;\n        }\n      }\n\n      library.clips[xml.getAttribute('id')] = data;\n    }\n\n    function buildAnimationClip(data) {\n      var tracks = [];\n      var name = data.name;\n      var duration = data.end - data.start || -1;\n      var animations = data.animations;\n\n      for (var i = 0, il = animations.length; i < il; i++) {\n        var animationTracks = getAnimation(animations[i]);\n\n        for (var j = 0, jl = animationTracks.length; j < jl; j++) {\n          tracks.push(animationTracks[j]);\n        }\n      }\n\n      return new THREE.AnimationClip(name, duration, tracks);\n    }\n\n    function getAnimationClip(id) {\n      return getBuild(library.clips[id], buildAnimationClip);\n    } // controller\n\n\n    function parseController(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'skin':\n            // there is exactly one skin per controller\n            data.id = parseId(child.getAttribute('source'));\n            data.skin = parseSkin(child);\n            break;\n\n          case 'morph':\n            data.id = parseId(child.getAttribute('source'));\n            console.warn('THREE.ColladaLoader: Morph target animation not supported yet.');\n            break;\n        }\n      }\n\n      library.controllers[xml.getAttribute('id')] = data;\n    }\n\n    function parseSkin(xml) {\n      var data = {\n        sources: {}\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'bind_shape_matrix':\n            data.bindShapeMatrix = parseFloats(child.textContent);\n            break;\n\n          case 'source':\n            var id = child.getAttribute('id');\n            data.sources[id] = parseSource(child);\n            break;\n\n          case 'joints':\n            data.joints = parseJoints(child);\n            break;\n\n          case 'vertex_weights':\n            data.vertexWeights = parseVertexWeights(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseJoints(xml) {\n      var data = {\n        inputs: {}\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'input':\n            var semantic = child.getAttribute('semantic');\n            var id = parseId(child.getAttribute('source'));\n            data.inputs[semantic] = id;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseVertexWeights(xml) {\n      var data = {\n        inputs: {}\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'input':\n            var semantic = child.getAttribute('semantic');\n            var id = parseId(child.getAttribute('source'));\n            var offset = parseInt(child.getAttribute('offset'));\n            data.inputs[semantic] = {\n              id: id,\n              offset: offset\n            };\n            break;\n\n          case 'vcount':\n            data.vcount = parseInts(child.textContent);\n            break;\n\n          case 'v':\n            data.v = parseInts(child.textContent);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildController(data) {\n      var build = {\n        id: data.id\n      };\n      var geometry = library.geometries[build.id];\n\n      if (data.skin !== undefined) {\n        build.skin = buildSkin(data.skin); // we enhance the 'sources' property of the corresponding geometry with our skin data\n\n        geometry.sources.skinIndices = build.skin.indices;\n        geometry.sources.skinWeights = build.skin.weights;\n      }\n\n      return build;\n    }\n\n    function buildSkin(data) {\n      var BONE_LIMIT = 4;\n      var build = {\n        joints: [],\n        // this must be an array to preserve the joint order\n        indices: {\n          array: [],\n          stride: BONE_LIMIT\n        },\n        weights: {\n          array: [],\n          stride: BONE_LIMIT\n        }\n      };\n      var sources = data.sources;\n      var vertexWeights = data.vertexWeights;\n      var vcount = vertexWeights.vcount;\n      var v = vertexWeights.v;\n      var jointOffset = vertexWeights.inputs.JOINT.offset;\n      var weightOffset = vertexWeights.inputs.WEIGHT.offset;\n      var jointSource = data.sources[data.joints.inputs.JOINT];\n      var inverseSource = data.sources[data.joints.inputs.INV_BIND_MATRIX];\n      var weights = sources[vertexWeights.inputs.WEIGHT.id].array;\n      var stride = 0;\n      var i, j, l; // procces skin data for each vertex\n\n      for (i = 0, l = vcount.length; i < l; i++) {\n        var jointCount = vcount[i]; // this is the amount of joints that affect a single vertex\n\n        var vertexSkinData = [];\n\n        for (j = 0; j < jointCount; j++) {\n          var skinIndex = v[stride + jointOffset];\n          var weightId = v[stride + weightOffset];\n          var skinWeight = weights[weightId];\n          vertexSkinData.push({\n            index: skinIndex,\n            weight: skinWeight\n          });\n          stride += 2;\n        } // we sort the joints in descending order based on the weights.\n        // this ensures, we only procced the most important joints of the vertex\n\n\n        vertexSkinData.sort(descending); // now we provide for each vertex a set of four index and weight values.\n        // the order of the skin data matches the order of vertices\n\n        for (j = 0; j < BONE_LIMIT; j++) {\n          var d = vertexSkinData[j];\n\n          if (d !== undefined) {\n            build.indices.array.push(d.index);\n            build.weights.array.push(d.weight);\n          } else {\n            build.indices.array.push(0);\n            build.weights.array.push(0);\n          }\n        }\n      } // setup bind matrix\n\n\n      if (data.bindShapeMatrix) {\n        build.bindMatrix = new THREE.Matrix4().fromArray(data.bindShapeMatrix).transpose();\n      } else {\n        build.bindMatrix = new THREE.Matrix4().identity();\n      } // process bones and inverse bind matrix data\n\n\n      for (i = 0, l = jointSource.array.length; i < l; i++) {\n        var name = jointSource.array[i];\n        var boneInverse = new THREE.Matrix4().fromArray(inverseSource.array, i * inverseSource.stride).transpose();\n        build.joints.push({\n          name: name,\n          boneInverse: boneInverse\n        });\n      }\n\n      return build; // array sort function\n\n      function descending(a, b) {\n        return b.weight - a.weight;\n      }\n    }\n\n    function getController(id) {\n      return getBuild(library.controllers[id], buildController);\n    } // image\n\n\n    function parseImage(xml) {\n      var data = {\n        init_from: getElementsByTagName(xml, 'init_from')[0].textContent\n      };\n      library.images[xml.getAttribute('id')] = data;\n    }\n\n    function buildImage(data) {\n      if (data.build !== undefined) return data.build;\n      return data.init_from;\n    }\n\n    function getImage(id) {\n      var data = library.images[id];\n\n      if (data !== undefined) {\n        return getBuild(data, buildImage);\n      }\n\n      console.warn('THREE.ColladaLoader: Couldn\\'t find image with ID:', id);\n      return null;\n    } // effect\n\n\n    function parseEffect(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'profile_COMMON':\n            data.profile = parseEffectProfileCOMMON(child);\n            break;\n        }\n      }\n\n      library.effects[xml.getAttribute('id')] = data;\n    }\n\n    function parseEffectProfileCOMMON(xml) {\n      var data = {\n        surfaces: {},\n        samplers: {}\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'newparam':\n            parseEffectNewparam(child, data);\n            break;\n\n          case 'technique':\n            data.technique = parseEffectTechnique(child);\n            break;\n\n          case 'extra':\n            data.extra = parseEffectExtra(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectNewparam(xml, data) {\n      var sid = xml.getAttribute('sid');\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'surface':\n            data.surfaces[sid] = parseEffectSurface(child);\n            break;\n\n          case 'sampler2D':\n            data.samplers[sid] = parseEffectSampler(child);\n            break;\n        }\n      }\n    }\n\n    function parseEffectSurface(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'init_from':\n            data.init_from = child.textContent;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectSampler(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'source':\n            data.source = child.textContent;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectTechnique(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'constant':\n          case 'lambert':\n          case 'blinn':\n          case 'phong':\n            data.type = child.nodeName;\n            data.parameters = parseEffectParameters(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectParameters(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'emission':\n          case 'diffuse':\n          case 'specular':\n          case 'bump':\n          case 'ambient':\n          case 'shininess':\n          case 'transparency':\n            data[child.nodeName] = parseEffectParameter(child);\n            break;\n\n          case 'transparent':\n            data[child.nodeName] = {\n              opaque: child.getAttribute('opaque'),\n              data: parseEffectParameter(child)\n            };\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectParameter(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'color':\n            data[child.nodeName] = parseFloats(child.textContent);\n            break;\n\n          case 'float':\n            data[child.nodeName] = parseFloat(child.textContent);\n            break;\n\n          case 'texture':\n            data[child.nodeName] = {\n              id: child.getAttribute('texture'),\n              extra: parseEffectParameterTexture(child)\n            };\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectParameterTexture(xml) {\n      var data = {\n        technique: {}\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'extra':\n            parseEffectParameterTextureExtra(child, data);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectParameterTextureExtra(xml, data) {\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'technique':\n            parseEffectParameterTextureExtraTechnique(child, data);\n            break;\n        }\n      }\n    }\n\n    function parseEffectParameterTextureExtraTechnique(xml, data) {\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'repeatU':\n          case 'repeatV':\n          case 'offsetU':\n          case 'offsetV':\n            data.technique[child.nodeName] = parseFloat(child.textContent);\n            break;\n\n          case 'wrapU':\n          case 'wrapV':\n            // some files have values for wrapU/wrapV which become NaN via parseInt\n            if (child.textContent.toUpperCase() === 'TRUE') {\n              data.technique[child.nodeName] = 1;\n            } else if (child.textContent.toUpperCase() === 'FALSE') {\n              data.technique[child.nodeName] = 0;\n            } else {\n              data.technique[child.nodeName] = parseInt(child.textContent);\n            }\n\n            break;\n        }\n      }\n    }\n\n    function parseEffectExtra(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'technique':\n            data.technique = parseEffectExtraTechnique(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectExtraTechnique(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'double_sided':\n            data[child.nodeName] = parseInt(child.textContent);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildEffect(data) {\n      return data;\n    }\n\n    function getEffect(id) {\n      return getBuild(library.effects[id], buildEffect);\n    } // material\n\n\n    function parseMaterial(xml) {\n      var data = {\n        name: xml.getAttribute('name')\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'instance_effect':\n            data.url = parseId(child.getAttribute('url'));\n            break;\n        }\n      }\n\n      library.materials[xml.getAttribute('id')] = data;\n    }\n\n    function getTextureLoader(image) {\n      var loader;\n      var extension = image.slice((image.lastIndexOf('.') - 1 >>> 0) + 2); // http://www.jstips.co/en/javascript/get-file-extension/\n\n      extension = extension.toLowerCase();\n\n      switch (extension) {\n        case 'tga':\n          loader = tgaLoader;\n          break;\n\n        default:\n          loader = textureLoader;\n      }\n\n      return loader;\n    }\n\n    function buildMaterial(data) {\n      var effect = getEffect(data.url);\n      var technique = effect.profile.technique;\n      var extra = effect.profile.extra;\n      var material;\n\n      switch (technique.type) {\n        case 'phong':\n        case 'blinn':\n          material = new THREE.MeshPhongMaterial();\n          break;\n\n        case 'lambert':\n          material = new THREE.MeshLambertMaterial();\n          break;\n\n        default:\n          material = new THREE.MeshBasicMaterial();\n          break;\n      }\n\n      material.name = data.name;\n\n      function getTexture(textureObject) {\n        var sampler = effect.profile.samplers[textureObject.id];\n        var image = null; // get image\n\n        if (sampler !== undefined) {\n          var surface = effect.profile.surfaces[sampler.source];\n          image = getImage(surface.init_from);\n        } else {\n          console.warn('THREE.ColladaLoader: Undefined sampler. Access image directly (see #12530).');\n          image = getImage(textureObject.id);\n        } // create texture if image is avaiable\n\n\n        if (image !== null) {\n          var loader = getTextureLoader(image);\n\n          if (loader !== undefined) {\n            var texture = loader.load(image);\n            var extra = textureObject.extra;\n\n            if (extra !== undefined && extra.technique !== undefined && isEmpty(extra.technique) === false) {\n              var technique = extra.technique;\n              texture.wrapS = technique.wrapU ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n              texture.wrapT = technique.wrapV ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n              texture.offset.set(technique.offsetU || 0, technique.offsetV || 0);\n              texture.repeat.set(technique.repeatU || 1, technique.repeatV || 1);\n            } else {\n              texture.wrapS = THREE.RepeatWrapping;\n              texture.wrapT = THREE.RepeatWrapping;\n            }\n\n            return texture;\n          } else {\n            console.warn('THREE.ColladaLoader: Loader for texture %s not found.', image);\n            return null;\n          }\n        } else {\n          console.warn('THREE.ColladaLoader: Couldn\\'t create texture with ID:', textureObject.id);\n          return null;\n        }\n      }\n\n      var parameters = technique.parameters;\n\n      for (var key in parameters) {\n        var parameter = parameters[key];\n\n        switch (key) {\n          case 'diffuse':\n            if (parameter.color) material.color.fromArray(parameter.color);\n            if (parameter.texture) material.map = getTexture(parameter.texture);\n            break;\n\n          case 'specular':\n            if (parameter.color && material.specular) material.specular.fromArray(parameter.color);\n            if (parameter.texture) material.specularMap = getTexture(parameter.texture);\n            break;\n\n          case 'bump':\n            if (parameter.texture) material.normalMap = getTexture(parameter.texture);\n            break;\n\n          case 'ambient':\n            if (parameter.texture) material.lightMap = getTexture(parameter.texture);\n            break;\n\n          case 'shininess':\n            if (parameter.float && material.shininess) material.shininess = parameter.float;\n            break;\n\n          case 'emission':\n            if (parameter.color && material.emissive) material.emissive.fromArray(parameter.color);\n            if (parameter.texture) material.emissiveMap = getTexture(parameter.texture);\n            break;\n        }\n      } //\n\n\n      var transparent = parameters['transparent'];\n      var transparency = parameters['transparency']; // <transparency> does not exist but <transparent>\n\n      if (transparency === undefined && transparent) {\n        transparency = {\n          float: 1\n        };\n      } // <transparent> does not exist but <transparency>\n\n\n      if (transparent === undefined && transparency) {\n        transparent = {\n          opaque: 'A_ONE',\n          data: {\n            color: [1, 1, 1, 1]\n          }\n        };\n      }\n\n      if (transparent && transparency) {\n        // handle case if a texture exists but no color\n        if (transparent.data.texture) {\n          // we do not set an alpha map (see #13792)\n          material.transparent = true;\n        } else {\n          var color = transparent.data.color;\n\n          switch (transparent.opaque) {\n            case 'A_ONE':\n              material.opacity = color[3] * transparency.float;\n              break;\n\n            case 'RGB_ZERO':\n              material.opacity = 1 - color[0] * transparency.float;\n              break;\n\n            case 'A_ZERO':\n              material.opacity = 1 - color[3] * transparency.float;\n              break;\n\n            case 'RGB_ONE':\n              material.opacity = color[0] * transparency.float;\n              break;\n\n            default:\n              console.warn('THREE.ColladaLoader: Invalid opaque type \"%s\" of transparent tag.', transparent.opaque);\n          }\n\n          if (material.opacity < 1) material.transparent = true;\n        }\n      } //\n\n\n      if (extra !== undefined && extra.technique !== undefined && extra.technique.double_sided === 1) {\n        material.side = THREE.DoubleSide;\n      }\n\n      return material;\n    }\n\n    function getMaterial(id) {\n      return getBuild(library.materials[id], buildMaterial);\n    } // camera\n\n\n    function parseCamera(xml) {\n      var data = {\n        name: xml.getAttribute('name')\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'optics':\n            data.optics = parseCameraOptics(child);\n            break;\n        }\n      }\n\n      library.cameras[xml.getAttribute('id')] = data;\n    }\n\n    function parseCameraOptics(xml) {\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n\n        switch (child.nodeName) {\n          case 'technique_common':\n            return parseCameraTechnique(child);\n        }\n      }\n\n      return {};\n    }\n\n    function parseCameraTechnique(xml) {\n      var data = {};\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n\n        switch (child.nodeName) {\n          case 'perspective':\n          case 'orthographic':\n            data.technique = child.nodeName;\n            data.parameters = parseCameraParameters(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseCameraParameters(xml) {\n      var data = {};\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n\n        switch (child.nodeName) {\n          case 'xfov':\n          case 'yfov':\n          case 'xmag':\n          case 'ymag':\n          case 'znear':\n          case 'zfar':\n          case 'aspect_ratio':\n            data[child.nodeName] = parseFloat(child.textContent);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildCamera(data) {\n      var camera;\n\n      switch (data.optics.technique) {\n        case 'perspective':\n          camera = new THREE.PerspectiveCamera(data.optics.parameters.yfov, data.optics.parameters.aspect_ratio, data.optics.parameters.znear, data.optics.parameters.zfar);\n          break;\n\n        case 'orthographic':\n          var ymag = data.optics.parameters.ymag;\n          var xmag = data.optics.parameters.xmag;\n          var aspectRatio = data.optics.parameters.aspect_ratio;\n          xmag = xmag === undefined ? ymag * aspectRatio : xmag;\n          ymag = ymag === undefined ? xmag / aspectRatio : ymag;\n          xmag *= 0.5;\n          ymag *= 0.5;\n          camera = new THREE.OrthographicCamera(-xmag, xmag, ymag, -ymag, // left, right, top, bottom\n          data.optics.parameters.znear, data.optics.parameters.zfar);\n          break;\n\n        default:\n          camera = new THREE.PerspectiveCamera();\n          break;\n      }\n\n      camera.name = data.name;\n      return camera;\n    }\n\n    function getCamera(id) {\n      var data = library.cameras[id];\n\n      if (data !== undefined) {\n        return getBuild(data, buildCamera);\n      }\n\n      console.warn('THREE.ColladaLoader: Couldn\\'t find camera with ID:', id);\n      return null;\n    } // light\n\n\n    function parseLight(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'technique_common':\n            data = parseLightTechnique(child);\n            break;\n        }\n      }\n\n      library.lights[xml.getAttribute('id')] = data;\n    }\n\n    function parseLightTechnique(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'directional':\n          case 'point':\n          case 'spot':\n          case 'ambient':\n            data.technique = child.nodeName;\n            data.parameters = parseLightParameters(child);\n        }\n      }\n\n      return data;\n    }\n\n    function parseLightParameters(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'color':\n            var array = parseFloats(child.textContent);\n            data.color = new THREE.Color().fromArray(array);\n            break;\n\n          case 'falloff_angle':\n            data.falloffAngle = parseFloat(child.textContent);\n            break;\n\n          case 'quadratic_attenuation':\n            var f = parseFloat(child.textContent);\n            data.distance = f ? Math.sqrt(1 / f) : 0;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildLight(data) {\n      var light;\n\n      switch (data.technique) {\n        case 'directional':\n          light = new THREE.DirectionalLight();\n          break;\n\n        case 'point':\n          light = new THREE.PointLight();\n          break;\n\n        case 'spot':\n          light = new THREE.SpotLight();\n          break;\n\n        case 'ambient':\n          light = new THREE.AmbientLight();\n          break;\n      }\n\n      if (data.parameters.color) light.color.copy(data.parameters.color);\n      if (data.parameters.distance) light.distance = data.parameters.distance;\n      return light;\n    }\n\n    function getLight(id) {\n      var data = library.lights[id];\n\n      if (data !== undefined) {\n        return getBuild(data, buildLight);\n      }\n\n      console.warn('THREE.ColladaLoader: Couldn\\'t find light with ID:', id);\n      return null;\n    } // geometry\n\n\n    function parseGeometry(xml) {\n      var data = {\n        name: xml.getAttribute('name'),\n        sources: {},\n        vertices: {},\n        primitives: []\n      };\n      var mesh = getElementsByTagName(xml, 'mesh')[0]; // the following tags inside geometry are not supported yet (see https://github.com/mrdoob/three.js/pull/12606): convex_mesh, spline, brep\n\n      if (mesh === undefined) return;\n\n      for (var i = 0; i < mesh.childNodes.length; i++) {\n        var child = mesh.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        var id = child.getAttribute('id');\n\n        switch (child.nodeName) {\n          case 'source':\n            data.sources[id] = parseSource(child);\n            break;\n\n          case 'vertices':\n            // data.sources[ id ] = data.sources[ parseId( getElementsByTagName( child, 'input' )[ 0 ].getAttribute( 'source' ) ) ];\n            data.vertices = parseGeometryVertices(child);\n            break;\n\n          case 'polygons':\n            console.warn('THREE.ColladaLoader: Unsupported primitive type: ', child.nodeName);\n            break;\n\n          case 'lines':\n          case 'linestrips':\n          case 'polylist':\n          case 'triangles':\n            data.primitives.push(parseGeometryPrimitive(child));\n            break;\n\n          default:\n            console.log(child);\n        }\n      }\n\n      library.geometries[xml.getAttribute('id')] = data;\n    }\n\n    function parseSource(xml) {\n      var data = {\n        array: [],\n        stride: 3\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'float_array':\n            data.array = parseFloats(child.textContent);\n            break;\n\n          case 'Name_array':\n            data.array = parseStrings(child.textContent);\n            break;\n\n          case 'technique_common':\n            var accessor = getElementsByTagName(child, 'accessor')[0];\n\n            if (accessor !== undefined) {\n              data.stride = parseInt(accessor.getAttribute('stride'));\n            }\n\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseGeometryVertices(xml) {\n      var data = {};\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        data[child.getAttribute('semantic')] = parseId(child.getAttribute('source'));\n      }\n\n      return data;\n    }\n\n    function parseGeometryPrimitive(xml) {\n      var primitive = {\n        type: xml.nodeName,\n        material: xml.getAttribute('material'),\n        count: parseInt(xml.getAttribute('count')),\n        inputs: {},\n        stride: 0,\n        hasUV: false\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'input':\n            var id = parseId(child.getAttribute('source'));\n            var semantic = child.getAttribute('semantic');\n            var offset = parseInt(child.getAttribute('offset'));\n            var set = parseInt(child.getAttribute('set'));\n            var inputname = set > 0 ? semantic + set : semantic;\n            primitive.inputs[inputname] = {\n              id: id,\n              offset: offset\n            };\n            primitive.stride = Math.max(primitive.stride, offset + 1);\n            if (semantic === 'TEXCOORD') primitive.hasUV = true;\n            break;\n\n          case 'vcount':\n            primitive.vcount = parseInts(child.textContent);\n            break;\n\n          case 'p':\n            primitive.p = parseInts(child.textContent);\n            break;\n        }\n      }\n\n      return primitive;\n    }\n\n    function groupPrimitives(primitives) {\n      var build = {};\n\n      for (var i = 0; i < primitives.length; i++) {\n        var primitive = primitives[i];\n        if (build[primitive.type] === undefined) build[primitive.type] = [];\n        build[primitive.type].push(primitive);\n      }\n\n      return build;\n    }\n\n    function checkUVCoordinates(primitives) {\n      var count = 0;\n\n      for (var i = 0, l = primitives.length; i < l; i++) {\n        var primitive = primitives[i];\n\n        if (primitive.hasUV === true) {\n          count++;\n        }\n      }\n\n      if (count > 0 && count < primitives.length) {\n        primitives.uvsNeedsFix = true;\n      }\n    }\n\n    function buildGeometry(data) {\n      var build = {};\n      var sources = data.sources;\n      var vertices = data.vertices;\n      var primitives = data.primitives;\n      if (primitives.length === 0) return {}; // our goal is to create one buffer geometry for a single type of primitives\n      // first, we group all primitives by their type\n\n      var groupedPrimitives = groupPrimitives(primitives);\n\n      for (var type in groupedPrimitives) {\n        var primitiveType = groupedPrimitives[type]; // second, ensure consistent uv coordinates for each type of primitives (polylist,triangles or lines)\n\n        checkUVCoordinates(primitiveType); // third, create a buffer geometry for each type of primitives\n\n        build[type] = buildGeometryType(primitiveType, sources, vertices);\n      }\n\n      return build;\n    }\n\n    function buildGeometryType(primitives, sources, vertices) {\n      var build = {};\n      var position = {\n        array: [],\n        stride: 0\n      };\n      var normal = {\n        array: [],\n        stride: 0\n      };\n      var uv = {\n        array: [],\n        stride: 0\n      };\n      var uv2 = {\n        array: [],\n        stride: 0\n      };\n      var color = {\n        array: [],\n        stride: 0\n      };\n      var skinIndex = {\n        array: [],\n        stride: 4\n      };\n      var skinWeight = {\n        array: [],\n        stride: 4\n      };\n      var geometry = new THREE.BufferGeometry();\n      var materialKeys = [];\n      var start = 0;\n\n      for (var p = 0; p < primitives.length; p++) {\n        var primitive = primitives[p];\n        var inputs = primitive.inputs; // groups\n\n        var count = 0;\n\n        switch (primitive.type) {\n          case 'lines':\n          case 'linestrips':\n            count = primitive.count * 2;\n            break;\n\n          case 'triangles':\n            count = primitive.count * 3;\n            break;\n\n          case 'polylist':\n            for (var g = 0; g < primitive.count; g++) {\n              var vc = primitive.vcount[g];\n\n              switch (vc) {\n                case 3:\n                  count += 3; // single triangle\n\n                  break;\n\n                case 4:\n                  count += 6; // quad, subdivided into two triangles\n\n                  break;\n\n                default:\n                  count += (vc - 2) * 3; // polylist with more than four vertices\n\n                  break;\n              }\n            }\n\n            break;\n\n          default:\n            console.warn('THREE.ColladaLoader: Unknow primitive type:', primitive.type);\n        }\n\n        geometry.addGroup(start, count, p);\n        start += count; // material\n\n        if (primitive.material) {\n          materialKeys.push(primitive.material);\n        } // geometry data\n\n\n        for (var name in inputs) {\n          var input = inputs[name];\n\n          switch (name) {\n            case 'VERTEX':\n              for (var key in vertices) {\n                var id = vertices[key];\n\n                switch (key) {\n                  case 'POSITION':\n                    var prevLength = position.array.length;\n                    buildGeometryData(primitive, sources[id], input.offset, position.array);\n                    position.stride = sources[id].stride;\n\n                    if (sources.skinWeights && sources.skinIndices) {\n                      buildGeometryData(primitive, sources.skinIndices, input.offset, skinIndex.array);\n                      buildGeometryData(primitive, sources.skinWeights, input.offset, skinWeight.array);\n                    } // see #3803\n\n\n                    if (primitive.hasUV === false && primitives.uvsNeedsFix === true) {\n                      var count = (position.array.length - prevLength) / position.stride;\n\n                      for (var i = 0; i < count; i++) {\n                        // fill missing uv coordinates\n                        uv.array.push(0, 0);\n                      }\n                    }\n\n                    break;\n\n                  case 'NORMAL':\n                    buildGeometryData(primitive, sources[id], input.offset, normal.array);\n                    normal.stride = sources[id].stride;\n                    break;\n\n                  case 'COLOR':\n                    buildGeometryData(primitive, sources[id], input.offset, color.array);\n                    color.stride = sources[id].stride;\n                    break;\n\n                  case 'TEXCOORD':\n                    buildGeometryData(primitive, sources[id], input.offset, uv.array);\n                    uv.stride = sources[id].stride;\n                    break;\n\n                  case 'TEXCOORD1':\n                    buildGeometryData(primitive, sources[id], input.offset, uv2.array);\n                    uv.stride = sources[id].stride;\n                    break;\n\n                  default:\n                    console.warn('THREE.ColladaLoader: Semantic \"%s\" not handled in geometry build process.', key);\n                }\n              }\n\n              break;\n\n            case 'NORMAL':\n              buildGeometryData(primitive, sources[input.id], input.offset, normal.array);\n              normal.stride = sources[input.id].stride;\n              break;\n\n            case 'COLOR':\n              buildGeometryData(primitive, sources[input.id], input.offset, color.array);\n              color.stride = sources[input.id].stride;\n              break;\n\n            case 'TEXCOORD':\n              buildGeometryData(primitive, sources[input.id], input.offset, uv.array);\n              uv.stride = sources[input.id].stride;\n              break;\n\n            case 'TEXCOORD1':\n              buildGeometryData(primitive, sources[input.id], input.offset, uv2.array);\n              uv2.stride = sources[input.id].stride;\n              break;\n          }\n        }\n      } // build geometry\n\n\n      if (position.array.length > 0) geometry.addAttribute('position', new THREE.Float32BufferAttribute(position.array, position.stride));\n      if (normal.array.length > 0) geometry.addAttribute('normal', new THREE.Float32BufferAttribute(normal.array, normal.stride));\n      if (color.array.length > 0) geometry.addAttribute('color', new THREE.Float32BufferAttribute(color.array, color.stride));\n      if (uv.array.length > 0) geometry.addAttribute('uv', new THREE.Float32BufferAttribute(uv.array, uv.stride));\n      if (uv2.array.length > 0) geometry.addAttribute('uv2', new THREE.Float32BufferAttribute(uv2.array, uv2.stride));\n      if (skinIndex.array.length > 0) geometry.addAttribute('skinIndex', new THREE.Float32BufferAttribute(skinIndex.array, skinIndex.stride));\n      if (skinWeight.array.length > 0) geometry.addAttribute('skinWeight', new THREE.Float32BufferAttribute(skinWeight.array, skinWeight.stride));\n      build.data = geometry;\n      build.type = primitives[0].type;\n      build.materialKeys = materialKeys;\n      return build;\n    }\n\n    function buildGeometryData(primitive, source, offset, array) {\n      var indices = primitive.p;\n      var stride = primitive.stride;\n      var vcount = primitive.vcount;\n\n      function pushVector(i) {\n        var index = indices[i + offset] * sourceStride;\n        var length = index + sourceStride;\n\n        for (; index < length; index++) {\n          array.push(sourceArray[index]);\n        }\n      }\n\n      var sourceArray = source.array;\n      var sourceStride = source.stride;\n\n      if (primitive.vcount !== undefined) {\n        var index = 0;\n\n        for (var i = 0, l = vcount.length; i < l; i++) {\n          var count = vcount[i];\n\n          if (count === 4) {\n            var a = index + stride * 0;\n            var b = index + stride * 1;\n            var c = index + stride * 2;\n            var d = index + stride * 3;\n            pushVector(a);\n            pushVector(b);\n            pushVector(d);\n            pushVector(b);\n            pushVector(c);\n            pushVector(d);\n          } else if (count === 3) {\n            var a = index + stride * 0;\n            var b = index + stride * 1;\n            var c = index + stride * 2;\n            pushVector(a);\n            pushVector(b);\n            pushVector(c);\n          } else if (count > 4) {\n            for (var k = 1, kl = count - 2; k <= kl; k++) {\n              var a = index + stride * 0;\n              var b = index + stride * k;\n              var c = index + stride * (k + 1);\n              pushVector(a);\n              pushVector(b);\n              pushVector(c);\n            }\n          }\n\n          index += stride * count;\n        }\n      } else {\n        for (var i = 0, l = indices.length; i < l; i += stride) {\n          pushVector(i);\n        }\n      }\n    }\n\n    function getGeometry(id) {\n      return getBuild(library.geometries[id], buildGeometry);\n    } // kinematics\n\n\n    function parseKinematicsModel(xml) {\n      var data = {\n        name: xml.getAttribute('name') || '',\n        joints: {},\n        links: []\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'technique_common':\n            parseKinematicsTechniqueCommon(child, data);\n            break;\n        }\n      }\n\n      library.kinematicsModels[xml.getAttribute('id')] = data;\n    }\n\n    function buildKinematicsModel(data) {\n      if (data.build !== undefined) return data.build;\n      return data;\n    }\n\n    function getKinematicsModel(id) {\n      return getBuild(library.kinematicsModels[id], buildKinematicsModel);\n    }\n\n    function parseKinematicsTechniqueCommon(xml, data) {\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'joint':\n            data.joints[child.getAttribute('sid')] = parseKinematicsJoint(child);\n            break;\n\n          case 'link':\n            data.links.push(parseKinematicsLink(child));\n            break;\n        }\n      }\n    }\n\n    function parseKinematicsJoint(xml) {\n      var data;\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'prismatic':\n          case 'revolute':\n            data = parseKinematicsJointParameter(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseKinematicsJointParameter(xml, data) {\n      var data = {\n        sid: xml.getAttribute('sid'),\n        name: xml.getAttribute('name') || '',\n        axis: new THREE.Vector3(),\n        limits: {\n          min: 0,\n          max: 0\n        },\n        type: xml.nodeName,\n        static: false,\n        zeroPosition: 0,\n        middlePosition: 0\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'axis':\n            var array = parseFloats(child.textContent);\n            data.axis.fromArray(array);\n            break;\n\n          case 'limits':\n            var max = child.getElementsByTagName('max')[0];\n            var min = child.getElementsByTagName('min')[0];\n            data.limits.max = parseFloat(max.textContent);\n            data.limits.min = parseFloat(min.textContent);\n            break;\n        }\n      } // if min is equal to or greater than max, consider the joint static\n\n\n      if (data.limits.min >= data.limits.max) {\n        data.static = true;\n      } // calculate middle position\n\n\n      data.middlePosition = (data.limits.min + data.limits.max) / 2.0;\n      return data;\n    }\n\n    function parseKinematicsLink(xml) {\n      var data = {\n        sid: xml.getAttribute('sid'),\n        name: xml.getAttribute('name') || '',\n        attachments: [],\n        transforms: []\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'attachment_full':\n            data.attachments.push(parseKinematicsAttachment(child));\n            break;\n\n          case 'matrix':\n          case 'translate':\n          case 'rotate':\n            data.transforms.push(parseKinematicsTransform(child));\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseKinematicsAttachment(xml) {\n      var data = {\n        joint: xml.getAttribute('joint').split('/').pop(),\n        transforms: [],\n        links: []\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'link':\n            data.links.push(parseKinematicsLink(child));\n            break;\n\n          case 'matrix':\n          case 'translate':\n          case 'rotate':\n            data.transforms.push(parseKinematicsTransform(child));\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseKinematicsTransform(xml) {\n      var data = {\n        type: xml.nodeName\n      };\n      var array = parseFloats(xml.textContent);\n\n      switch (data.type) {\n        case 'matrix':\n          data.obj = new THREE.Matrix4();\n          data.obj.fromArray(array).transpose();\n          break;\n\n        case 'translate':\n          data.obj = new THREE.Vector3();\n          data.obj.fromArray(array);\n          break;\n\n        case 'rotate':\n          data.obj = new THREE.Vector3();\n          data.obj.fromArray(array);\n          data.angle = THREE.Math.degToRad(array[3]);\n          break;\n      }\n\n      return data;\n    } // physics\n\n\n    function parsePhysicsModel(xml) {\n      var data = {\n        name: xml.getAttribute('name') || '',\n        rigidBodies: {}\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'rigid_body':\n            data.rigidBodies[child.getAttribute('name')] = {};\n            parsePhysicsRigidBody(child, data.rigidBodies[child.getAttribute('name')]);\n            break;\n        }\n      }\n\n      library.physicsModels[xml.getAttribute('id')] = data;\n    }\n\n    function parsePhysicsRigidBody(xml, data) {\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'technique_common':\n            parsePhysicsTechniqueCommon(child, data);\n            break;\n        }\n      }\n    }\n\n    function parsePhysicsTechniqueCommon(xml, data) {\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'inertia':\n            data.inertia = parseFloats(child.textContent);\n            break;\n\n          case 'mass':\n            data.mass = parseFloats(child.textContent)[0];\n            break;\n        }\n      }\n    } // scene\n\n\n    function parseKinematicsScene(xml) {\n      var data = {\n        bindJointAxis: []\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'bind_joint_axis':\n            data.bindJointAxis.push(parseKinematicsBindJointAxis(child));\n            break;\n        }\n      }\n\n      library.kinematicsScenes[parseId(xml.getAttribute('url'))] = data;\n    }\n\n    function parseKinematicsBindJointAxis(xml) {\n      var data = {\n        target: xml.getAttribute('target').split('/').pop()\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'axis':\n            var param = child.getElementsByTagName('param')[0];\n            data.axis = param.textContent;\n            var tmpJointIndex = data.axis.split('inst_').pop().split('axis')[0];\n            data.jointIndex = tmpJointIndex.substr(0, tmpJointIndex.length - 1);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildKinematicsScene(data) {\n      if (data.build !== undefined) return data.build;\n      return data;\n    }\n\n    function getKinematicsScene(id) {\n      return getBuild(library.kinematicsScenes[id], buildKinematicsScene);\n    }\n\n    function setupKinematics() {\n      var kinematicsModelId = Object.keys(library.kinematicsModels)[0];\n      var kinematicsSceneId = Object.keys(library.kinematicsScenes)[0];\n      var visualSceneId = Object.keys(library.visualScenes)[0];\n      if (kinematicsModelId === undefined || kinematicsSceneId === undefined) return;\n      var kinematicsModel = getKinematicsModel(kinematicsModelId);\n      var kinematicsScene = getKinematicsScene(kinematicsSceneId);\n      var visualScene = getVisualScene(visualSceneId);\n      var bindJointAxis = kinematicsScene.bindJointAxis;\n      var jointMap = {};\n\n      for (var i = 0, l = bindJointAxis.length; i < l; i++) {\n        var axis = bindJointAxis[i]; // the result of the following query is an element of type 'translate', 'rotate','scale' or 'matrix'\n\n        var targetElement = collada.querySelector('[sid=\"' + axis.target + '\"]');\n\n        if (targetElement) {\n          // get the parent of the transfrom element\n          var parentVisualElement = targetElement.parentElement; // connect the joint of the kinematics model with the element in the visual scene\n\n          connect(axis.jointIndex, parentVisualElement);\n        }\n      }\n\n      function connect(jointIndex, visualElement) {\n        var visualElementName = visualElement.getAttribute('name');\n        var joint = kinematicsModel.joints[jointIndex];\n        visualScene.traverse(function (object) {\n          if (object.name === visualElementName) {\n            jointMap[jointIndex] = {\n              object: object,\n              transforms: buildTransformList(visualElement),\n              joint: joint,\n              position: joint.zeroPosition\n            };\n          }\n        });\n      }\n\n      var m0 = new THREE.Matrix4();\n      kinematics = {\n        joints: kinematicsModel && kinematicsModel.joints,\n        getJointValue: function (jointIndex) {\n          var jointData = jointMap[jointIndex];\n\n          if (jointData) {\n            return jointData.position;\n          } else {\n            console.warn('THREE.ColladaLoader: Joint ' + jointIndex + ' doesn\\'t exist.');\n          }\n        },\n        setJointValue: function (jointIndex, value) {\n          var jointData = jointMap[jointIndex];\n\n          if (jointData) {\n            var joint = jointData.joint;\n\n            if (value > joint.limits.max || value < joint.limits.min) {\n              console.warn('THREE.ColladaLoader: Joint ' + jointIndex + ' value ' + value + ' outside of limits (min: ' + joint.limits.min + ', max: ' + joint.limits.max + ').');\n            } else if (joint.static) {\n              console.warn('THREE.ColladaLoader: Joint ' + jointIndex + ' is static.');\n            } else {\n              var object = jointData.object;\n              var axis = joint.axis;\n              var transforms = jointData.transforms;\n              matrix.identity(); // each update, we have to apply all transforms in the correct order\n\n              for (var i = 0; i < transforms.length; i++) {\n                var transform = transforms[i]; // if there is a connection of the transform node with a joint, apply the joint value\n\n                if (transform.sid && transform.sid.indexOf(jointIndex) !== -1) {\n                  switch (joint.type) {\n                    case 'revolute':\n                      matrix.multiply(m0.makeRotationAxis(axis, THREE.Math.degToRad(value)));\n                      break;\n\n                    case 'prismatic':\n                      matrix.multiply(m0.makeTranslation(axis.x * value, axis.y * value, axis.z * value));\n                      break;\n\n                    default:\n                      console.warn('THREE.ColladaLoader: Unknown joint type: ' + joint.type);\n                      break;\n                  }\n                } else {\n                  switch (transform.type) {\n                    case 'matrix':\n                      matrix.multiply(transform.obj);\n                      break;\n\n                    case 'translate':\n                      matrix.multiply(m0.makeTranslation(transform.obj.x, transform.obj.y, transform.obj.z));\n                      break;\n\n                    case 'scale':\n                      matrix.scale(transform.obj);\n                      break;\n\n                    case 'rotate':\n                      matrix.multiply(m0.makeRotationAxis(transform.obj, transform.angle));\n                      break;\n                  }\n                }\n              }\n\n              object.matrix.copy(matrix);\n              object.matrix.decompose(object.position, object.quaternion, object.scale);\n              jointMap[jointIndex].position = value;\n            }\n          } else {\n            console.log('THREE.ColladaLoader: ' + jointIndex + ' does not exist.');\n          }\n        }\n      };\n    }\n\n    function buildTransformList(node) {\n      var transforms = [];\n      var xml = collada.querySelector('[id=\"' + node.id + '\"]');\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'matrix':\n            var array = parseFloats(child.textContent);\n            var matrix = new THREE.Matrix4().fromArray(array).transpose();\n            transforms.push({\n              sid: child.getAttribute('sid'),\n              type: child.nodeName,\n              obj: matrix\n            });\n            break;\n\n          case 'translate':\n          case 'scale':\n            var array = parseFloats(child.textContent);\n            var vector = new THREE.Vector3().fromArray(array);\n            transforms.push({\n              sid: child.getAttribute('sid'),\n              type: child.nodeName,\n              obj: vector\n            });\n            break;\n\n          case 'rotate':\n            var array = parseFloats(child.textContent);\n            var vector = new THREE.Vector3().fromArray(array);\n            var angle = THREE.Math.degToRad(array[3]);\n            transforms.push({\n              sid: child.getAttribute('sid'),\n              type: child.nodeName,\n              obj: vector,\n              angle: angle\n            });\n            break;\n        }\n      }\n\n      return transforms;\n    } // nodes\n\n\n    function prepareNodes(xml) {\n      var elements = xml.getElementsByTagName('node'); // ensure all node elements have id attributes\n\n      for (var i = 0; i < elements.length; i++) {\n        var element = elements[i];\n\n        if (element.hasAttribute('id') === false) {\n          element.setAttribute('id', generateId());\n        }\n      }\n    }\n\n    var matrix = new THREE.Matrix4();\n    var vector = new THREE.Vector3();\n\n    function parseNode(xml) {\n      var data = {\n        name: xml.getAttribute('name') || '',\n        type: xml.getAttribute('type'),\n        id: xml.getAttribute('id'),\n        sid: xml.getAttribute('sid'),\n        matrix: new THREE.Matrix4(),\n        nodes: [],\n        instanceCameras: [],\n        instanceControllers: [],\n        instanceLights: [],\n        instanceGeometries: [],\n        instanceNodes: [],\n        transforms: {}\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'node':\n            data.nodes.push(child.getAttribute('id'));\n            parseNode(child);\n            break;\n\n          case 'instance_camera':\n            data.instanceCameras.push(parseId(child.getAttribute('url')));\n            break;\n\n          case 'instance_controller':\n            data.instanceControllers.push(parseNodeInstance(child));\n            break;\n\n          case 'instance_light':\n            data.instanceLights.push(parseId(child.getAttribute('url')));\n            break;\n\n          case 'instance_geometry':\n            data.instanceGeometries.push(parseNodeInstance(child));\n            break;\n\n          case 'instance_node':\n            data.instanceNodes.push(parseId(child.getAttribute('url')));\n            break;\n\n          case 'matrix':\n            var array = parseFloats(child.textContent);\n            data.matrix.multiply(matrix.fromArray(array).transpose());\n            data.transforms[child.getAttribute('sid')] = child.nodeName;\n            break;\n\n          case 'translate':\n            var array = parseFloats(child.textContent);\n            vector.fromArray(array);\n            data.matrix.multiply(matrix.makeTranslation(vector.x, vector.y, vector.z));\n            data.transforms[child.getAttribute('sid')] = child.nodeName;\n            break;\n\n          case 'rotate':\n            var array = parseFloats(child.textContent);\n            var angle = THREE.Math.degToRad(array[3]);\n            data.matrix.multiply(matrix.makeRotationAxis(vector.fromArray(array), angle));\n            data.transforms[child.getAttribute('sid')] = child.nodeName;\n            break;\n\n          case 'scale':\n            var array = parseFloats(child.textContent);\n            data.matrix.scale(vector.fromArray(array));\n            data.transforms[child.getAttribute('sid')] = child.nodeName;\n            break;\n\n          case 'extra':\n            break;\n\n          default:\n            console.log(child);\n        }\n      }\n\n      if (hasNode(data.id)) {\n        console.warn('THREE.ColladaLoader: There is already a node with ID %s. Exclude current node from further processing.', data.id);\n      } else {\n        library.nodes[data.id] = data;\n      }\n\n      return data;\n    }\n\n    function parseNodeInstance(xml) {\n      var data = {\n        id: parseId(xml.getAttribute('url')),\n        materials: {},\n        skeletons: []\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n\n        switch (child.nodeName) {\n          case 'bind_material':\n            var instances = child.getElementsByTagName('instance_material');\n\n            for (var j = 0; j < instances.length; j++) {\n              var instance = instances[j];\n              var symbol = instance.getAttribute('symbol');\n              var target = instance.getAttribute('target');\n              data.materials[symbol] = parseId(target);\n            }\n\n            break;\n\n          case 'skeleton':\n            data.skeletons.push(parseId(child.textContent));\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildSkeleton(skeletons, joints) {\n      var boneData = [];\n      var sortedBoneData = [];\n      var i, j, data; // a skeleton can have multiple root bones. collada expresses this\n      // situtation with multiple \"skeleton\" tags per controller instance\n\n      for (i = 0; i < skeletons.length; i++) {\n        var skeleton = skeletons[i];\n        var root;\n\n        if (hasNode(skeleton)) {\n          root = getNode(skeleton);\n          buildBoneHierarchy(root, joints, boneData);\n        } else if (hasVisualScene(skeleton)) {\n          // handle case where the skeleton refers to the visual scene (#13335)\n          var visualScene = library.visualScenes[skeleton];\n          var children = visualScene.children;\n\n          for (var j = 0; j < children.length; j++) {\n            var child = children[j];\n\n            if (child.type === 'JOINT') {\n              var root = getNode(child.id);\n              buildBoneHierarchy(root, joints, boneData);\n            }\n          }\n        } else {\n          console.error('THREE.ColladaLoader: Unable to find root bone of skeleton with ID:', skeleton);\n        }\n      } // sort bone data (the order is defined in the corresponding controller)\n\n\n      for (i = 0; i < joints.length; i++) {\n        for (j = 0; j < boneData.length; j++) {\n          data = boneData[j];\n\n          if (data.bone.name === joints[i].name) {\n            sortedBoneData[i] = data;\n            data.processed = true;\n            break;\n          }\n        }\n      } // add unprocessed bone data at the end of the list\n\n\n      for (i = 0; i < boneData.length; i++) {\n        data = boneData[i];\n\n        if (data.processed === false) {\n          sortedBoneData.push(data);\n          data.processed = true;\n        }\n      } // setup arrays for skeleton creation\n\n\n      var bones = [];\n      var boneInverses = [];\n\n      for (i = 0; i < sortedBoneData.length; i++) {\n        data = sortedBoneData[i];\n        bones.push(data.bone);\n        boneInverses.push(data.boneInverse);\n      }\n\n      return new THREE.Skeleton(bones, boneInverses);\n    }\n\n    function buildBoneHierarchy(root, joints, boneData) {\n      // setup bone data from visual scene\n      root.traverse(function (object) {\n        if (object.isBone === true) {\n          var boneInverse; // retrieve the boneInverse from the controller data\n\n          for (var i = 0; i < joints.length; i++) {\n            var joint = joints[i];\n\n            if (joint.name === object.name) {\n              boneInverse = joint.boneInverse;\n              break;\n            }\n          }\n\n          if (boneInverse === undefined) {\n            // Unfortunately, there can be joints in the visual scene that are not part of the\n            // corresponding controller. In this case, we have to create a dummy boneInverse matrix\n            // for the respective bone. This bone won't affect any vertices, because there are no skin indices\n            // and weights defined for it. But we still have to add the bone to the sorted bone list in order to\n            // ensure a correct animation of the model.\n            boneInverse = new THREE.Matrix4();\n          }\n\n          boneData.push({\n            bone: object,\n            boneInverse: boneInverse,\n            processed: false\n          });\n        }\n      });\n    }\n\n    function buildNode(data) {\n      var objects = [];\n      var matrix = data.matrix;\n      var nodes = data.nodes;\n      var type = data.type;\n      var instanceCameras = data.instanceCameras;\n      var instanceControllers = data.instanceControllers;\n      var instanceLights = data.instanceLights;\n      var instanceGeometries = data.instanceGeometries;\n      var instanceNodes = data.instanceNodes; // nodes\n\n      for (var i = 0, l = nodes.length; i < l; i++) {\n        objects.push(getNode(nodes[i]));\n      } // instance cameras\n\n\n      for (var i = 0, l = instanceCameras.length; i < l; i++) {\n        var instanceCamera = getCamera(instanceCameras[i]);\n\n        if (instanceCamera !== null) {\n          objects.push(instanceCamera.clone());\n        }\n      } // instance controllers\n\n\n      for (var i = 0, l = instanceControllers.length; i < l; i++) {\n        var instance = instanceControllers[i];\n        var controller = getController(instance.id);\n        var geometries = getGeometry(controller.id);\n        var newObjects = buildObjects(geometries, instance.materials);\n        var skeletons = instance.skeletons;\n        var joints = controller.skin.joints;\n        var skeleton = buildSkeleton(skeletons, joints);\n\n        for (var j = 0, jl = newObjects.length; j < jl; j++) {\n          var object = newObjects[j];\n\n          if (object.isSkinnedMesh) {\n            object.bind(skeleton, controller.skin.bindMatrix);\n            object.normalizeSkinWeights();\n          }\n\n          objects.push(object);\n        }\n      } // instance lights\n\n\n      for (var i = 0, l = instanceLights.length; i < l; i++) {\n        var instanceLight = getLight(instanceLights[i]);\n\n        if (instanceLight !== null) {\n          objects.push(instanceLight.clone());\n        }\n      } // instance geometries\n\n\n      for (var i = 0, l = instanceGeometries.length; i < l; i++) {\n        var instance = instanceGeometries[i]; // a single geometry instance in collada can lead to multiple object3Ds.\n        // this is the case when primitives are combined like triangles and lines\n\n        var geometries = getGeometry(instance.id);\n        var newObjects = buildObjects(geometries, instance.materials);\n\n        for (var j = 0, jl = newObjects.length; j < jl; j++) {\n          objects.push(newObjects[j]);\n        }\n      } // instance nodes\n\n\n      for (var i = 0, l = instanceNodes.length; i < l; i++) {\n        objects.push(getNode(instanceNodes[i]).clone());\n      }\n\n      var object;\n\n      if (nodes.length === 0 && objects.length === 1) {\n        object = objects[0];\n      } else {\n        object = type === 'JOINT' ? new THREE.Bone() : new THREE.Group();\n\n        for (var i = 0; i < objects.length; i++) {\n          object.add(objects[i]);\n        }\n      }\n\n      if (object.name === '') {\n        object.name = type === 'JOINT' ? data.sid : data.name;\n      }\n\n      object.matrix.copy(matrix);\n      object.matrix.decompose(object.position, object.quaternion, object.scale);\n      return object;\n    }\n\n    var fallbackMaterial = new THREE.MeshBasicMaterial({\n      color: 0xff00ff\n    });\n\n    function resolveMaterialBinding(keys, instanceMaterials) {\n      var materials = [];\n\n      for (var i = 0, l = keys.length; i < l; i++) {\n        var id = instanceMaterials[keys[i]];\n\n        if (id === undefined) {\n          console.warn('THREE.ColladaLoader: Material with key %s not found. Apply fallback material.', keys[i]);\n          materials.push(fallbackMaterial);\n        } else {\n          materials.push(getMaterial(id));\n        }\n      }\n\n      return materials;\n    }\n\n    function buildObjects(geometries, instanceMaterials) {\n      var objects = [];\n\n      for (var type in geometries) {\n        var geometry = geometries[type];\n        var materials = resolveMaterialBinding(geometry.materialKeys, instanceMaterials); // handle case if no materials are defined\n\n        if (materials.length === 0) {\n          if (type === 'lines' || type === 'linestrips') {\n            materials.push(new THREE.LineBasicMaterial());\n          } else {\n            materials.push(new THREE.MeshPhongMaterial());\n          }\n        } // regard skinning\n\n\n        var skinning = geometry.data.attributes.skinIndex !== undefined;\n\n        if (skinning) {\n          for (var i = 0, l = materials.length; i < l; i++) {\n            materials[i].skinning = true;\n          }\n        } // choose between a single or multi materials (material array)\n\n\n        var material = materials.length === 1 ? materials[0] : materials; // now create a specific 3D object\n\n        var object;\n\n        switch (type) {\n          case 'lines':\n            object = new THREE.LineSegments(geometry.data, material);\n            break;\n\n          case 'linestrips':\n            object = new THREE.Line(geometry.data, material);\n            break;\n\n          case 'triangles':\n          case 'polylist':\n            if (skinning) {\n              object = new THREE.SkinnedMesh(geometry.data, material);\n            } else {\n              object = new THREE.Mesh(geometry.data, material);\n            }\n\n            break;\n        }\n\n        objects.push(object);\n      }\n\n      return objects;\n    }\n\n    function hasNode(id) {\n      return library.nodes[id] !== undefined;\n    }\n\n    function getNode(id) {\n      return getBuild(library.nodes[id], buildNode);\n    } // visual scenes\n\n\n    function parseVisualScene(xml) {\n      var data = {\n        name: xml.getAttribute('name'),\n        children: []\n      };\n      prepareNodes(xml);\n      var elements = getElementsByTagName(xml, 'node');\n\n      for (var i = 0; i < elements.length; i++) {\n        data.children.push(parseNode(elements[i]));\n      }\n\n      library.visualScenes[xml.getAttribute('id')] = data;\n    }\n\n    function buildVisualScene(data) {\n      var group = new THREE.Group();\n      group.name = data.name;\n      var children = data.children;\n\n      for (var i = 0; i < children.length; i++) {\n        var child = children[i];\n        group.add(getNode(child.id));\n      }\n\n      return group;\n    }\n\n    function hasVisualScene(id) {\n      return library.visualScenes[id] !== undefined;\n    }\n\n    function getVisualScene(id) {\n      return getBuild(library.visualScenes[id], buildVisualScene);\n    } // scenes\n\n\n    function parseScene(xml) {\n      var instance = getElementsByTagName(xml, 'instance_visual_scene')[0];\n      return getVisualScene(parseId(instance.getAttribute('url')));\n    }\n\n    function setupAnimations() {\n      var clips = library.clips;\n\n      if (isEmpty(clips) === true) {\n        if (isEmpty(library.animations) === false) {\n          // if there are animations but no clips, we create a default clip for playback\n          var tracks = [];\n\n          for (var id in library.animations) {\n            var animationTracks = getAnimation(id);\n\n            for (var i = 0, l = animationTracks.length; i < l; i++) {\n              tracks.push(animationTracks[i]);\n            }\n          }\n\n          animations.push(new THREE.AnimationClip('default', -1, tracks));\n        }\n      } else {\n        for (var id in clips) {\n          animations.push(getAnimationClip(id));\n        }\n      }\n    }\n\n    if (text.length === 0) {\n      return {\n        scene: new THREE.Scene()\n      };\n    }\n\n    var xml = new DOMParser().parseFromString(text, 'application/xml');\n    var collada = getElementsByTagName(xml, 'COLLADA')[0]; // metadata\n\n    var version = collada.getAttribute('version');\n    console.log('THREE.ColladaLoader: File version', version);\n    var asset = parseAsset(getElementsByTagName(collada, 'asset')[0]);\n    var textureLoader = new THREE.TextureLoader(this.manager);\n    textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n    var tgaLoader;\n\n    if (THREE.TGALoader) {\n      tgaLoader = new THREE.TGALoader(this.manager);\n      tgaLoader.setPath(this.resourcePath || path);\n    } //\n\n\n    var animations = [];\n    var kinematics = {};\n    var count = 0; //\n\n    var library = {\n      animations: {},\n      clips: {},\n      controllers: {},\n      images: {},\n      effects: {},\n      materials: {},\n      cameras: {},\n      lights: {},\n      geometries: {},\n      nodes: {},\n      visualScenes: {},\n      kinematicsModels: {},\n      physicsModels: {},\n      kinematicsScenes: {}\n    };\n    parseLibrary(collada, 'library_animations', 'animation', parseAnimation);\n    parseLibrary(collada, 'library_animation_clips', 'animation_clip', parseAnimationClip);\n    parseLibrary(collada, 'library_controllers', 'controller', parseController);\n    parseLibrary(collada, 'library_images', 'image', parseImage);\n    parseLibrary(collada, 'library_effects', 'effect', parseEffect);\n    parseLibrary(collada, 'library_materials', 'material', parseMaterial);\n    parseLibrary(collada, 'library_cameras', 'camera', parseCamera);\n    parseLibrary(collada, 'library_lights', 'light', parseLight);\n    parseLibrary(collada, 'library_geometries', 'geometry', parseGeometry);\n    parseLibrary(collada, 'library_nodes', 'node', parseNode);\n    parseLibrary(collada, 'library_visual_scenes', 'visual_scene', parseVisualScene);\n    parseLibrary(collada, 'library_kinematics_models', 'kinematics_model', parseKinematicsModel);\n    parseLibrary(collada, 'library_physics_models', 'physics_model', parsePhysicsModel);\n    parseLibrary(collada, 'scene', 'instance_kinematics_scene', parseKinematicsScene);\n    buildLibrary(library.animations, buildAnimation);\n    buildLibrary(library.clips, buildAnimationClip);\n    buildLibrary(library.controllers, buildController);\n    buildLibrary(library.images, buildImage);\n    buildLibrary(library.effects, buildEffect);\n    buildLibrary(library.materials, buildMaterial);\n    buildLibrary(library.cameras, buildCamera);\n    buildLibrary(library.lights, buildLight);\n    buildLibrary(library.geometries, buildGeometry);\n    buildLibrary(library.visualScenes, buildVisualScene);\n    setupAnimations();\n    setupKinematics();\n    var scene = parseScene(getElementsByTagName(collada, 'scene')[0]);\n\n    if (asset.upAxis === 'Z_UP') {\n      scene.quaternion.setFromEuler(new THREE.Euler(-Math.PI / 2, 0, 0));\n    }\n\n    scene.scale.multiplyScalar(asset.unit);\n    return {\n      animations: animations,\n      kinematics: kinematics,\n      library: library,\n      scene: scene\n    };\n  }\n};","map":{"version":3,"sources":["E:/Universitat Paderborn/NEW/kgsum/kgsum/kgsum/src/main/resources/kgsum-visualization/node_modules/aframe-extras/lib/ColladaLoader.js"],"names":["module","exports","THREE","ColladaLoader","manager","undefined","DefaultLoadingManager","prototype","constructor","crossOrigin","load","url","onLoad","onProgress","onError","scope","path","LoaderUtils","extractUrlBase","loader","FileLoader","setPath","text","parse","value","setResourcePath","resourcePath","options","convertUpAxis","console","warn","setCrossOrigin","getElementsByTagName","xml","name","array","childNodes","i","l","length","child","nodeName","push","parseStrings","parts","trim","split","Array","parseFloats","parseFloat","parseInts","parseInt","parseId","substring","generateId","count","isEmpty","object","Object","keys","parseAsset","unit","parseAssetUnit","upAxis","parseAssetUpAxis","hasAttribute","getAttribute","textContent","parseLibrary","libraryName","parser","library","elements","buildLibrary","data","builder","build","getBuild","parseAnimation","sources","samplers","channels","nodeType","id","parseSource","parseAnimationSampler","parseAnimationChannel","log","animations","inputs","semantic","target","shift","sid","arraySyntax","indexOf","memberSyntax","member","indices","replace","sampler","buildAnimation","tracks","hasOwnProperty","channel","inputId","INPUT","outputId","OUTPUT","inputSource","outputSource","animation","buildAnimationChannel","createKeyframeTracks","getAnimation","node","nodes","object3D","getNode","transform","transforms","defaultMatrix","matrix","clone","transpose","time","stride","il","j","jl","index","keyframes","prepareAnimationData","uuid","sort","ascending","transformAnimationData","a","b","position","Vector3","scale","quaternion","Quaternion","times","positionData","quaternionData","scaleData","keyframe","fromArray","decompose","x","y","z","w","VectorKeyframeTrack","QuaternionKeyframeTrack","property","defaultValue","empty","createMissingKeyframes","prev","next","getPrev","getNext","interpolate","key","parseAnimationClip","start","end","clips","buildAnimationClip","duration","animationTracks","AnimationClip","getAnimationClip","parseController","skin","parseSkin","controllers","bindShapeMatrix","joints","parseJoints","vertexWeights","parseVertexWeights","offset","vcount","v","buildController","geometry","geometries","buildSkin","skinIndices","skinWeights","weights","BONE_LIMIT","jointOffset","JOINT","weightOffset","WEIGHT","jointSource","inverseSource","INV_BIND_MATRIX","jointCount","vertexSkinData","skinIndex","weightId","skinWeight","weight","descending","d","bindMatrix","Matrix4","identity","boneInverse","getController","parseImage","init_from","images","buildImage","getImage","parseEffect","profile","parseEffectProfileCOMMON","effects","surfaces","parseEffectNewparam","technique","parseEffectTechnique","extra","parseEffectExtra","parseEffectSurface","parseEffectSampler","source","type","parameters","parseEffectParameters","parseEffectParameter","opaque","parseEffectParameterTexture","parseEffectParameterTextureExtra","parseEffectParameterTextureExtraTechnique","toUpperCase","parseEffectExtraTechnique","buildEffect","getEffect","parseMaterial","materials","getTextureLoader","image","extension","slice","lastIndexOf","toLowerCase","tgaLoader","textureLoader","buildMaterial","effect","material","MeshPhongMaterial","MeshLambertMaterial","MeshBasicMaterial","getTexture","textureObject","surface","texture","wrapS","wrapU","RepeatWrapping","ClampToEdgeWrapping","wrapT","wrapV","set","offsetU","offsetV","repeat","repeatU","repeatV","parameter","color","map","specular","specularMap","normalMap","lightMap","float","shininess","emissive","emissiveMap","transparent","transparency","opacity","double_sided","side","DoubleSide","getMaterial","parseCamera","optics","parseCameraOptics","cameras","parseCameraTechnique","parseCameraParameters","buildCamera","camera","PerspectiveCamera","yfov","aspect_ratio","znear","zfar","ymag","xmag","aspectRatio","OrthographicCamera","getCamera","parseLight","parseLightTechnique","lights","parseLightParameters","Color","falloffAngle","f","distance","Math","sqrt","buildLight","light","DirectionalLight","PointLight","SpotLight","AmbientLight","copy","getLight","parseGeometry","vertices","primitives","mesh","parseGeometryVertices","parseGeometryPrimitive","accessor","primitive","hasUV","inputname","max","p","groupPrimitives","checkUVCoordinates","uvsNeedsFix","buildGeometry","groupedPrimitives","primitiveType","buildGeometryType","normal","uv","uv2","BufferGeometry","materialKeys","g","vc","addGroup","input","prevLength","buildGeometryData","addAttribute","Float32BufferAttribute","pushVector","sourceStride","sourceArray","c","k","kl","getGeometry","parseKinematicsModel","links","parseKinematicsTechniqueCommon","kinematicsModels","buildKinematicsModel","getKinematicsModel","parseKinematicsJoint","parseKinematicsLink","parseKinematicsJointParameter","axis","limits","min","static","zeroPosition","middlePosition","attachments","parseKinematicsAttachment","parseKinematicsTransform","joint","pop","obj","angle","degToRad","parsePhysicsModel","rigidBodies","parsePhysicsRigidBody","physicsModels","parsePhysicsTechniqueCommon","inertia","mass","parseKinematicsScene","bindJointAxis","parseKinematicsBindJointAxis","kinematicsScenes","param","tmpJointIndex","jointIndex","substr","buildKinematicsScene","getKinematicsScene","setupKinematics","kinematicsModelId","kinematicsSceneId","visualSceneId","visualScenes","kinematicsModel","kinematicsScene","visualScene","getVisualScene","jointMap","targetElement","collada","querySelector","parentVisualElement","parentElement","connect","visualElement","visualElementName","traverse","buildTransformList","m0","kinematics","getJointValue","jointData","setJointValue","multiply","makeRotationAxis","makeTranslation","vector","prepareNodes","element","setAttribute","parseNode","instanceCameras","instanceControllers","instanceLights","instanceGeometries","instanceNodes","parseNodeInstance","hasNode","skeletons","instances","instance","symbol","buildSkeleton","boneData","sortedBoneData","skeleton","root","buildBoneHierarchy","hasVisualScene","children","error","bone","processed","bones","boneInverses","Skeleton","isBone","buildNode","objects","instanceCamera","controller","newObjects","buildObjects","isSkinnedMesh","bind","normalizeSkinWeights","instanceLight","Bone","Group","add","fallbackMaterial","resolveMaterialBinding","instanceMaterials","LineBasicMaterial","skinning","attributes","LineSegments","Line","SkinnedMesh","Mesh","parseVisualScene","buildVisualScene","group","parseScene","setupAnimations","scene","Scene","DOMParser","parseFromString","version","asset","TextureLoader","TGALoader","setFromEuler","Euler","PI","multiplyScalar"],"mappings":"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","sourcesContent":["/**\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nmodule.exports = THREE.ColladaLoader = function ( manager ) {\n\n  this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nTHREE.ColladaLoader.prototype = {\n\n  constructor: THREE.ColladaLoader,\n\n  crossOrigin: 'anonymous',\n\n  load: function ( url, onLoad, onProgress, onError ) {\n\n    var scope = this;\n\n    var path = ( scope.path === undefined ) ? THREE.LoaderUtils.extractUrlBase( url ) : scope.path;\n\n    var loader = new THREE.FileLoader( scope.manager );\n    loader.setPath( scope.path );\n    loader.load( url, function ( text ) {\n\n      onLoad( scope.parse( text, path ) );\n\n    }, onProgress, onError );\n\n  },\n\n  setPath: function ( value ) {\n\n    this.path = value;\n    return this;\n\n  },\n\n  setResourcePath: function ( value ) {\n\n    this.resourcePath = value;\n    return this;\n\n  },\n\n  options: {\n\n    set convertUpAxis( value ) {\n\n      console.warn( 'THREE.ColladaLoader: options.convertUpAxis() has been removed. Up axis is converted automatically.' );\n\n    }\n\n  },\n\n  setCrossOrigin: function ( value ) {\n\n    this.crossOrigin = value;\n    return this;\n\n  },\n\n  parse: function ( text, path ) {\n\n    function getElementsByTagName( xml, name ) {\n\n      // Non recursive xml.getElementsByTagName() ...\n\n      var array = [];\n      var childNodes = xml.childNodes;\n\n      for ( var i = 0, l = childNodes.length; i < l; i ++ ) {\n\n        var child = childNodes[ i ];\n\n        if ( child.nodeName === name ) {\n\n          array.push( child );\n\n        }\n\n      }\n\n      return array;\n\n    }\n\n    function parseStrings( text ) {\n\n      if ( text.length === 0 ) return [];\n\n      var parts = text.trim().split( /\\s+/ );\n      var array = new Array( parts.length );\n\n      for ( var i = 0, l = parts.length; i < l; i ++ ) {\n\n        array[ i ] = parts[ i ];\n\n      }\n\n      return array;\n\n    }\n\n    function parseFloats( text ) {\n\n      if ( text.length === 0 ) return [];\n\n      var parts = text.trim().split( /\\s+/ );\n      var array = new Array( parts.length );\n\n      for ( var i = 0, l = parts.length; i < l; i ++ ) {\n\n        array[ i ] = parseFloat( parts[ i ] );\n\n      }\n\n      return array;\n\n    }\n\n    function parseInts( text ) {\n\n      if ( text.length === 0 ) return [];\n\n      var parts = text.trim().split( /\\s+/ );\n      var array = new Array( parts.length );\n\n      for ( var i = 0, l = parts.length; i < l; i ++ ) {\n\n        array[ i ] = parseInt( parts[ i ] );\n\n      }\n\n      return array;\n\n    }\n\n    function parseId( text ) {\n\n      return text.substring( 1 );\n\n    }\n\n    function generateId() {\n\n      return 'three_default_' + ( count ++ );\n\n    }\n\n    function isEmpty( object ) {\n\n      return Object.keys( object ).length === 0;\n\n    }\n\n    // asset\n\n    function parseAsset( xml ) {\n\n      return {\n        unit: parseAssetUnit( getElementsByTagName( xml, 'unit' )[ 0 ] ),\n        upAxis: parseAssetUpAxis( getElementsByTagName( xml, 'up_axis' )[ 0 ] )\n      };\n\n    }\n\n    function parseAssetUnit( xml ) {\n\n      if ( ( xml !== undefined ) && ( xml.hasAttribute( 'meter' ) === true ) ) {\n\n        return parseFloat( xml.getAttribute( 'meter' ) );\n\n      } else {\n\n        return 1; // default 1 meter\n\n      }\n\n    }\n\n    function parseAssetUpAxis( xml ) {\n\n      return xml !== undefined ? xml.textContent : 'Y_UP';\n\n    }\n\n    // library\n\n    function parseLibrary( xml, libraryName, nodeName, parser ) {\n\n      var library = getElementsByTagName( xml, libraryName )[ 0 ];\n\n      if ( library !== undefined ) {\n\n        var elements = getElementsByTagName( library, nodeName );\n\n        for ( var i = 0; i < elements.length; i ++ ) {\n\n          parser( elements[ i ] );\n\n        }\n\n      }\n\n    }\n\n    function buildLibrary( data, builder ) {\n\n      for ( var name in data ) {\n\n        var object = data[ name ];\n        object.build = builder( data[ name ] );\n\n      }\n\n    }\n\n    // get\n\n    function getBuild( data, builder ) {\n\n      if ( data.build !== undefined ) return data.build;\n\n      data.build = builder( data );\n\n      return data.build;\n\n    }\n\n    // animation\n\n    function parseAnimation( xml ) {\n\n      var data = {\n        sources: {},\n        samplers: {},\n        channels: {}\n      };\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        var id;\n\n        switch ( child.nodeName ) {\n\n          case 'source':\n            id = child.getAttribute( 'id' );\n            data.sources[ id ] = parseSource( child );\n            break;\n\n          case 'sampler':\n            id = child.getAttribute( 'id' );\n            data.samplers[ id ] = parseAnimationSampler( child );\n            break;\n\n          case 'channel':\n            id = child.getAttribute( 'target' );\n            data.channels[ id ] = parseAnimationChannel( child );\n            break;\n\n          default:\n            console.log( child );\n\n        }\n\n      }\n\n      library.animations[ xml.getAttribute( 'id' ) ] = data;\n\n    }\n\n    function parseAnimationSampler( xml ) {\n\n      var data = {\n        inputs: {},\n      };\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'input':\n            var id = parseId( child.getAttribute( 'source' ) );\n            var semantic = child.getAttribute( 'semantic' );\n            data.inputs[ semantic ] = id;\n            break;\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function parseAnimationChannel( xml ) {\n\n      var data = {};\n\n      var target = xml.getAttribute( 'target' );\n\n      // parsing SID Addressing Syntax\n\n      var parts = target.split( '/' );\n\n      var id = parts.shift();\n      var sid = parts.shift();\n\n      // check selection syntax\n\n      var arraySyntax = ( sid.indexOf( '(' ) !== - 1 );\n      var memberSyntax = ( sid.indexOf( '.' ) !== - 1 );\n\n      if ( memberSyntax ) {\n\n        //  member selection access\n\n        parts = sid.split( '.' );\n        sid = parts.shift();\n        data.member = parts.shift();\n\n      } else if ( arraySyntax ) {\n\n        // array-access syntax. can be used to express fields in one-dimensional vectors or two-dimensional matrices.\n\n        var indices = sid.split( '(' );\n        sid = indices.shift();\n\n        for ( var i = 0; i < indices.length; i ++ ) {\n\n          indices[ i ] = parseInt( indices[ i ].replace( /\\)/, '' ) );\n\n        }\n\n        data.indices = indices;\n\n      }\n\n      data.id = id;\n      data.sid = sid;\n\n      data.arraySyntax = arraySyntax;\n      data.memberSyntax = memberSyntax;\n\n      data.sampler = parseId( xml.getAttribute( 'source' ) );\n\n      return data;\n\n    }\n\n    function buildAnimation( data ) {\n\n      var tracks = [];\n\n      var channels = data.channels;\n      var samplers = data.samplers;\n      var sources = data.sources;\n\n      for ( var target in channels ) {\n\n        if ( channels.hasOwnProperty( target ) ) {\n\n          var channel = channels[ target ];\n          var sampler = samplers[ channel.sampler ];\n\n          var inputId = sampler.inputs.INPUT;\n          var outputId = sampler.inputs.OUTPUT;\n\n          var inputSource = sources[ inputId ];\n          var outputSource = sources[ outputId ];\n\n          var animation = buildAnimationChannel( channel, inputSource, outputSource );\n\n          createKeyframeTracks( animation, tracks );\n\n        }\n\n      }\n\n      return tracks;\n\n    }\n\n    function getAnimation( id ) {\n\n      return getBuild( library.animations[ id ], buildAnimation );\n\n    }\n\n    function buildAnimationChannel( channel, inputSource, outputSource ) {\n\n      var node = library.nodes[ channel.id ];\n      var object3D = getNode( node.id );\n\n      var transform = node.transforms[ channel.sid ];\n      var defaultMatrix = node.matrix.clone().transpose();\n\n      var time, stride;\n      var i, il, j, jl;\n\n      var data = {};\n\n      // the collada spec allows the animation of data in various ways.\n      // depending on the transform type (matrix, translate, rotate, scale), we execute different logic\n\n      switch ( transform ) {\n\n        case 'matrix':\n\n          for ( i = 0, il = inputSource.array.length; i < il; i ++ ) {\n\n            time = inputSource.array[ i ];\n            stride = i * outputSource.stride;\n\n            if ( data[ time ] === undefined ) data[ time ] = {};\n\n            if ( channel.arraySyntax === true ) {\n\n              var value = outputSource.array[ stride ];\n              var index = channel.indices[ 0 ] + 4 * channel.indices[ 1 ];\n\n              data[ time ][ index ] = value;\n\n            } else {\n\n              for ( j = 0, jl = outputSource.stride; j < jl; j ++ ) {\n\n                data[ time ][ j ] = outputSource.array[ stride + j ];\n\n              }\n\n            }\n\n          }\n\n          break;\n\n        case 'translate':\n          console.warn( 'THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform );\n          break;\n\n        case 'rotate':\n          console.warn( 'THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform );\n          break;\n\n        case 'scale':\n          console.warn( 'THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform );\n          break;\n\n      }\n\n      var keyframes = prepareAnimationData( data, defaultMatrix );\n\n      var animation = {\n        name: object3D.uuid,\n        keyframes: keyframes\n      };\n\n      return animation;\n\n    }\n\n    function prepareAnimationData( data, defaultMatrix ) {\n\n      var keyframes = [];\n\n      // transfer data into a sortable array\n\n      for ( var time in data ) {\n\n        keyframes.push( { time: parseFloat( time ), value: data[ time ] } );\n\n      }\n\n      // ensure keyframes are sorted by time\n\n      keyframes.sort( ascending );\n\n      // now we clean up all animation data, so we can use them for keyframe tracks\n\n      for ( var i = 0; i < 16; i ++ ) {\n\n        transformAnimationData( keyframes, i, defaultMatrix.elements[ i ] );\n\n      }\n\n      return keyframes;\n\n      // array sort function\n\n      function ascending( a, b ) {\n\n        return a.time - b.time;\n\n      }\n\n    }\n\n    var position = new THREE.Vector3();\n    var scale = new THREE.Vector3();\n    var quaternion = new THREE.Quaternion();\n\n    function createKeyframeTracks( animation, tracks ) {\n\n      var keyframes = animation.keyframes;\n      var name = animation.name;\n\n      var times = [];\n      var positionData = [];\n      var quaternionData = [];\n      var scaleData = [];\n\n      for ( var i = 0, l = keyframes.length; i < l; i ++ ) {\n\n        var keyframe = keyframes[ i ];\n\n        var time = keyframe.time;\n        var value = keyframe.value;\n\n        matrix.fromArray( value ).transpose();\n        matrix.decompose( position, quaternion, scale );\n\n        times.push( time );\n        positionData.push( position.x, position.y, position.z );\n        quaternionData.push( quaternion.x, quaternion.y, quaternion.z, quaternion.w );\n        scaleData.push( scale.x, scale.y, scale.z );\n\n      }\n\n      if ( positionData.length > 0 ) tracks.push( new THREE.VectorKeyframeTrack( name + '.position', times, positionData ) );\n      if ( quaternionData.length > 0 ) tracks.push( new THREE.QuaternionKeyframeTrack( name + '.quaternion', times, quaternionData ) );\n      if ( scaleData.length > 0 ) tracks.push( new THREE.VectorKeyframeTrack( name + '.scale', times, scaleData ) );\n\n      return tracks;\n\n    }\n\n    function transformAnimationData( keyframes, property, defaultValue ) {\n\n      var keyframe;\n\n      var empty = true;\n      var i, l;\n\n      // check, if values of a property are missing in our keyframes\n\n      for ( i = 0, l = keyframes.length; i < l; i ++ ) {\n\n        keyframe = keyframes[ i ];\n\n        if ( keyframe.value[ property ] === undefined ) {\n\n          keyframe.value[ property ] = null; // mark as missing\n\n        } else {\n\n          empty = false;\n\n        }\n\n      }\n\n      if ( empty === true ) {\n\n        // no values at all, so we set a default value\n\n        for ( i = 0, l = keyframes.length; i < l; i ++ ) {\n\n          keyframe = keyframes[ i ];\n\n          keyframe.value[ property ] = defaultValue;\n\n        }\n\n      } else {\n\n        // filling gaps\n\n        createMissingKeyframes( keyframes, property );\n\n      }\n\n    }\n\n    function createMissingKeyframes( keyframes, property ) {\n\n      var prev, next;\n\n      for ( var i = 0, l = keyframes.length; i < l; i ++ ) {\n\n        var keyframe = keyframes[ i ];\n\n        if ( keyframe.value[ property ] === null ) {\n\n          prev = getPrev( keyframes, i, property );\n          next = getNext( keyframes, i, property );\n\n          if ( prev === null ) {\n\n            keyframe.value[ property ] = next.value[ property ];\n            continue;\n\n          }\n\n          if ( next === null ) {\n\n            keyframe.value[ property ] = prev.value[ property ];\n            continue;\n\n          }\n\n          interpolate( keyframe, prev, next, property );\n\n        }\n\n      }\n\n    }\n\n    function getPrev( keyframes, i, property ) {\n\n      while ( i >= 0 ) {\n\n        var keyframe = keyframes[ i ];\n\n        if ( keyframe.value[ property ] !== null ) return keyframe;\n\n        i --;\n\n      }\n\n      return null;\n\n    }\n\n    function getNext( keyframes, i, property ) {\n\n      while ( i < keyframes.length ) {\n\n        var keyframe = keyframes[ i ];\n\n        if ( keyframe.value[ property ] !== null ) return keyframe;\n\n        i ++;\n\n      }\n\n      return null;\n\n    }\n\n    function interpolate( key, prev, next, property ) {\n\n      if ( ( next.time - prev.time ) === 0 ) {\n\n        key.value[ property ] = prev.value[ property ];\n        return;\n\n      }\n\n      key.value[ property ] = ( ( key.time - prev.time ) * ( next.value[ property ] - prev.value[ property ] ) / ( next.time - prev.time ) ) + prev.value[ property ];\n\n    }\n\n    // animation clips\n\n    function parseAnimationClip( xml ) {\n\n      var data = {\n        name: xml.getAttribute( 'id' ) || 'default',\n        start: parseFloat( xml.getAttribute( 'start' ) || 0 ),\n        end: parseFloat( xml.getAttribute( 'end' ) || 0 ),\n        animations: []\n      };\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'instance_animation':\n            data.animations.push( parseId( child.getAttribute( 'url' ) ) );\n            break;\n\n        }\n\n      }\n\n      library.clips[ xml.getAttribute( 'id' ) ] = data;\n\n    }\n\n    function buildAnimationClip( data ) {\n\n      var tracks = [];\n\n      var name = data.name;\n      var duration = ( data.end - data.start ) || - 1;\n      var animations = data.animations;\n\n      for ( var i = 0, il = animations.length; i < il; i ++ ) {\n\n        var animationTracks = getAnimation( animations[ i ] );\n\n        for ( var j = 0, jl = animationTracks.length; j < jl; j ++ ) {\n\n          tracks.push( animationTracks[ j ] );\n\n        }\n\n      }\n\n      return new THREE.AnimationClip( name, duration, tracks );\n\n    }\n\n    function getAnimationClip( id ) {\n\n      return getBuild( library.clips[ id ], buildAnimationClip );\n\n    }\n\n    // controller\n\n    function parseController( xml ) {\n\n      var data = {};\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'skin':\n            // there is exactly one skin per controller\n            data.id = parseId( child.getAttribute( 'source' ) );\n            data.skin = parseSkin( child );\n            break;\n\n          case 'morph':\n            data.id = parseId( child.getAttribute( 'source' ) );\n            console.warn( 'THREE.ColladaLoader: Morph target animation not supported yet.' );\n            break;\n\n        }\n\n      }\n\n      library.controllers[ xml.getAttribute( 'id' ) ] = data;\n\n    }\n\n    function parseSkin( xml ) {\n\n      var data = {\n        sources: {}\n      };\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'bind_shape_matrix':\n            data.bindShapeMatrix = parseFloats( child.textContent );\n            break;\n\n          case 'source':\n            var id = child.getAttribute( 'id' );\n            data.sources[ id ] = parseSource( child );\n            break;\n\n          case 'joints':\n            data.joints = parseJoints( child );\n            break;\n\n          case 'vertex_weights':\n            data.vertexWeights = parseVertexWeights( child );\n            break;\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function parseJoints( xml ) {\n\n      var data = {\n        inputs: {}\n      };\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'input':\n            var semantic = child.getAttribute( 'semantic' );\n            var id = parseId( child.getAttribute( 'source' ) );\n            data.inputs[ semantic ] = id;\n            break;\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function parseVertexWeights( xml ) {\n\n      var data = {\n        inputs: {}\n      };\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'input':\n            var semantic = child.getAttribute( 'semantic' );\n            var id = parseId( child.getAttribute( 'source' ) );\n            var offset = parseInt( child.getAttribute( 'offset' ) );\n            data.inputs[ semantic ] = { id: id, offset: offset };\n            break;\n\n          case 'vcount':\n            data.vcount = parseInts( child.textContent );\n            break;\n\n          case 'v':\n            data.v = parseInts( child.textContent );\n            break;\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function buildController( data ) {\n\n      var build = {\n        id: data.id\n      };\n\n      var geometry = library.geometries[ build.id ];\n\n      if ( data.skin !== undefined ) {\n\n        build.skin = buildSkin( data.skin );\n\n        // we enhance the 'sources' property of the corresponding geometry with our skin data\n\n        geometry.sources.skinIndices = build.skin.indices;\n        geometry.sources.skinWeights = build.skin.weights;\n\n      }\n\n      return build;\n\n    }\n\n    function buildSkin( data ) {\n\n      var BONE_LIMIT = 4;\n\n      var build = {\n        joints: [], // this must be an array to preserve the joint order\n        indices: {\n          array: [],\n          stride: BONE_LIMIT\n        },\n        weights: {\n          array: [],\n          stride: BONE_LIMIT\n        }\n      };\n\n      var sources = data.sources;\n      var vertexWeights = data.vertexWeights;\n\n      var vcount = vertexWeights.vcount;\n      var v = vertexWeights.v;\n      var jointOffset = vertexWeights.inputs.JOINT.offset;\n      var weightOffset = vertexWeights.inputs.WEIGHT.offset;\n\n      var jointSource = data.sources[ data.joints.inputs.JOINT ];\n      var inverseSource = data.sources[ data.joints.inputs.INV_BIND_MATRIX ];\n\n      var weights = sources[ vertexWeights.inputs.WEIGHT.id ].array;\n      var stride = 0;\n\n      var i, j, l;\n\n      // procces skin data for each vertex\n\n      for ( i = 0, l = vcount.length; i < l; i ++ ) {\n\n        var jointCount = vcount[ i ]; // this is the amount of joints that affect a single vertex\n        var vertexSkinData = [];\n\n        for ( j = 0; j < jointCount; j ++ ) {\n\n          var skinIndex = v[ stride + jointOffset ];\n          var weightId = v[ stride + weightOffset ];\n          var skinWeight = weights[ weightId ];\n\n          vertexSkinData.push( { index: skinIndex, weight: skinWeight } );\n\n          stride += 2;\n\n        }\n\n        // we sort the joints in descending order based on the weights.\n        // this ensures, we only procced the most important joints of the vertex\n\n        vertexSkinData.sort( descending );\n\n        // now we provide for each vertex a set of four index and weight values.\n        // the order of the skin data matches the order of vertices\n\n        for ( j = 0; j < BONE_LIMIT; j ++ ) {\n\n          var d = vertexSkinData[ j ];\n\n          if ( d !== undefined ) {\n\n            build.indices.array.push( d.index );\n            build.weights.array.push( d.weight );\n\n          } else {\n\n            build.indices.array.push( 0 );\n            build.weights.array.push( 0 );\n\n          }\n\n        }\n\n      }\n\n      // setup bind matrix\n\n      if ( data.bindShapeMatrix ) {\n\n        build.bindMatrix = new THREE.Matrix4().fromArray( data.bindShapeMatrix ).transpose();\n\n      } else {\n\n        build.bindMatrix = new THREE.Matrix4().identity();\n\n      }\n\n      // process bones and inverse bind matrix data\n\n      for ( i = 0, l = jointSource.array.length; i < l; i ++ ) {\n\n        var name = jointSource.array[ i ];\n        var boneInverse = new THREE.Matrix4().fromArray( inverseSource.array, i * inverseSource.stride ).transpose();\n\n        build.joints.push( { name: name, boneInverse: boneInverse } );\n\n      }\n\n      return build;\n\n      // array sort function\n\n      function descending( a, b ) {\n\n        return b.weight - a.weight;\n\n      }\n\n    }\n\n    function getController( id ) {\n\n      return getBuild( library.controllers[ id ], buildController );\n\n    }\n\n    // image\n\n    function parseImage( xml ) {\n\n      var data = {\n        init_from: getElementsByTagName( xml, 'init_from' )[ 0 ].textContent\n      };\n\n      library.images[ xml.getAttribute( 'id' ) ] = data;\n\n    }\n\n    function buildImage( data ) {\n\n      if ( data.build !== undefined ) return data.build;\n\n      return data.init_from;\n\n    }\n\n    function getImage( id ) {\n\n      var data = library.images[ id ];\n\n      if ( data !== undefined ) {\n\n        return getBuild( data, buildImage );\n\n      }\n\n      console.warn( 'THREE.ColladaLoader: Couldn\\'t find image with ID:', id );\n\n      return null;\n\n    }\n\n    // effect\n\n    function parseEffect( xml ) {\n\n      var data = {};\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'profile_COMMON':\n            data.profile = parseEffectProfileCOMMON( child );\n            break;\n\n        }\n\n      }\n\n      library.effects[ xml.getAttribute( 'id' ) ] = data;\n\n    }\n\n    function parseEffectProfileCOMMON( xml ) {\n\n      var data = {\n        surfaces: {},\n        samplers: {}\n      };\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'newparam':\n            parseEffectNewparam( child, data );\n            break;\n\n          case 'technique':\n            data.technique = parseEffectTechnique( child );\n            break;\n\n          case 'extra':\n            data.extra = parseEffectExtra( child );\n            break;\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function parseEffectNewparam( xml, data ) {\n\n      var sid = xml.getAttribute( 'sid' );\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'surface':\n            data.surfaces[ sid ] = parseEffectSurface( child );\n            break;\n\n          case 'sampler2D':\n            data.samplers[ sid ] = parseEffectSampler( child );\n            break;\n\n        }\n\n      }\n\n    }\n\n    function parseEffectSurface( xml ) {\n\n      var data = {};\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'init_from':\n            data.init_from = child.textContent;\n            break;\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function parseEffectSampler( xml ) {\n\n      var data = {};\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'source':\n            data.source = child.textContent;\n            break;\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function parseEffectTechnique( xml ) {\n\n      var data = {};\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'constant':\n          case 'lambert':\n          case 'blinn':\n          case 'phong':\n            data.type = child.nodeName;\n            data.parameters = parseEffectParameters( child );\n            break;\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function parseEffectParameters( xml ) {\n\n      var data = {};\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'emission':\n          case 'diffuse':\n          case 'specular':\n          case 'bump':\n          case 'ambient':\n          case 'shininess':\n          case 'transparency':\n            data[ child.nodeName ] = parseEffectParameter( child );\n            break;\n          case 'transparent':\n            data[ child.nodeName ] = {\n              opaque: child.getAttribute( 'opaque' ),\n              data: parseEffectParameter( child )\n            };\n            break;\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function parseEffectParameter( xml ) {\n\n      var data = {};\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'color':\n            data[ child.nodeName ] = parseFloats( child.textContent );\n            break;\n\n          case 'float':\n            data[ child.nodeName ] = parseFloat( child.textContent );\n            break;\n\n          case 'texture':\n            data[ child.nodeName ] = { id: child.getAttribute( 'texture' ), extra: parseEffectParameterTexture( child ) };\n            break;\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function parseEffectParameterTexture( xml ) {\n\n      var data = {\n        technique: {}\n      };\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'extra':\n            parseEffectParameterTextureExtra( child, data );\n            break;\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function parseEffectParameterTextureExtra( xml, data ) {\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'technique':\n            parseEffectParameterTextureExtraTechnique( child, data );\n            break;\n\n        }\n\n      }\n\n    }\n\n    function parseEffectParameterTextureExtraTechnique( xml, data ) {\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'repeatU':\n          case 'repeatV':\n          case 'offsetU':\n          case 'offsetV':\n            data.technique[ child.nodeName ] = parseFloat( child.textContent );\n            break;\n\n          case 'wrapU':\n          case 'wrapV':\n\n            // some files have values for wrapU/wrapV which become NaN via parseInt\n\n            if ( child.textContent.toUpperCase() === 'TRUE' ) {\n\n              data.technique[ child.nodeName ] = 1;\n\n            } else if ( child.textContent.toUpperCase() === 'FALSE' ) {\n\n              data.technique[ child.nodeName ] = 0;\n\n            } else {\n\n              data.technique[ child.nodeName ] = parseInt( child.textContent );\n\n            }\n\n            break;\n\n        }\n\n      }\n\n    }\n\n    function parseEffectExtra( xml ) {\n\n      var data = {};\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'technique':\n            data.technique = parseEffectExtraTechnique( child );\n            break;\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function parseEffectExtraTechnique( xml ) {\n\n      var data = {};\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'double_sided':\n            data[ child.nodeName ] = parseInt( child.textContent );\n            break;\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function buildEffect( data ) {\n\n      return data;\n\n    }\n\n    function getEffect( id ) {\n\n      return getBuild( library.effects[ id ], buildEffect );\n\n    }\n\n    // material\n\n    function parseMaterial( xml ) {\n\n      var data = {\n        name: xml.getAttribute( 'name' )\n      };\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'instance_effect':\n            data.url = parseId( child.getAttribute( 'url' ) );\n            break;\n\n        }\n\n      }\n\n      library.materials[ xml.getAttribute( 'id' ) ] = data;\n\n    }\n\n    function getTextureLoader( image ) {\n\n      var loader;\n\n      var extension = image.slice( ( image.lastIndexOf( '.' ) - 1 >>> 0 ) + 2 ); // http://www.jstips.co/en/javascript/get-file-extension/\n      extension = extension.toLowerCase();\n\n      switch ( extension ) {\n\n        case 'tga':\n          loader = tgaLoader;\n          break;\n\n        default:\n          loader = textureLoader;\n\n      }\n\n      return loader;\n\n    }\n\n    function buildMaterial( data ) {\n\n      var effect = getEffect( data.url );\n      var technique = effect.profile.technique;\n      var extra = effect.profile.extra;\n\n      var material;\n\n      switch ( technique.type ) {\n\n        case 'phong':\n        case 'blinn':\n          material = new THREE.MeshPhongMaterial();\n          break;\n\n        case 'lambert':\n          material = new THREE.MeshLambertMaterial();\n          break;\n\n        default:\n          material = new THREE.MeshBasicMaterial();\n          break;\n\n      }\n\n      material.name = data.name;\n\n      function getTexture( textureObject ) {\n\n        var sampler = effect.profile.samplers[ textureObject.id ];\n        var image = null;\n\n        // get image\n\n        if ( sampler !== undefined ) {\n\n          var surface = effect.profile.surfaces[ sampler.source ];\n          image = getImage( surface.init_from );\n\n        } else {\n\n          console.warn( 'THREE.ColladaLoader: Undefined sampler. Access image directly (see #12530).' );\n          image = getImage( textureObject.id );\n\n        }\n\n        // create texture if image is avaiable\n\n        if ( image !== null ) {\n\n          var loader = getTextureLoader( image );\n\n          if ( loader !== undefined ) {\n\n            var texture = loader.load( image );\n\n            var extra = textureObject.extra;\n\n            if ( extra !== undefined && extra.technique !== undefined && isEmpty( extra.technique ) === false ) {\n\n              var technique = extra.technique;\n\n              texture.wrapS = technique.wrapU ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n              texture.wrapT = technique.wrapV ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n\n              texture.offset.set( technique.offsetU || 0, technique.offsetV || 0 );\n              texture.repeat.set( technique.repeatU || 1, technique.repeatV || 1 );\n\n            } else {\n\n              texture.wrapS = THREE.RepeatWrapping;\n              texture.wrapT = THREE.RepeatWrapping;\n\n            }\n\n            return texture;\n\n          } else {\n\n            console.warn( 'THREE.ColladaLoader: Loader for texture %s not found.', image );\n\n            return null;\n\n          }\n\n        } else {\n\n          console.warn( 'THREE.ColladaLoader: Couldn\\'t create texture with ID:', textureObject.id );\n\n          return null;\n\n        }\n\n      }\n\n      var parameters = technique.parameters;\n\n      for ( var key in parameters ) {\n\n        var parameter = parameters[ key ];\n\n        switch ( key ) {\n\n          case 'diffuse':\n            if ( parameter.color ) material.color.fromArray( parameter.color );\n            if ( parameter.texture ) material.map = getTexture( parameter.texture );\n            break;\n          case 'specular':\n            if ( parameter.color && material.specular ) material.specular.fromArray( parameter.color );\n            if ( parameter.texture ) material.specularMap = getTexture( parameter.texture );\n            break;\n          case 'bump':\n            if ( parameter.texture ) material.normalMap = getTexture( parameter.texture );\n            break;\n          case 'ambient':\n            if ( parameter.texture ) material.lightMap = getTexture( parameter.texture );\n            break;\n          case 'shininess':\n            if ( parameter.float && material.shininess ) material.shininess = parameter.float;\n            break;\n          case 'emission':\n            if ( parameter.color && material.emissive ) material.emissive.fromArray( parameter.color );\n            if ( parameter.texture ) material.emissiveMap = getTexture( parameter.texture );\n            break;\n\n        }\n\n      }\n\n      //\n\n      var transparent = parameters[ 'transparent' ];\n      var transparency = parameters[ 'transparency' ];\n\n      // <transparency> does not exist but <transparent>\n\n      if ( transparency === undefined && transparent ) {\n\n        transparency = {\n          float: 1\n        };\n\n      }\n\n      // <transparent> does not exist but <transparency>\n\n      if ( transparent === undefined && transparency ) {\n\n        transparent = {\n          opaque: 'A_ONE',\n          data: {\n            color: [ 1, 1, 1, 1 ]\n          } };\n\n      }\n\n      if ( transparent && transparency ) {\n\n        // handle case if a texture exists but no color\n\n        if ( transparent.data.texture ) {\n\n          // we do not set an alpha map (see #13792)\n\n          material.transparent = true;\n\n        } else {\n\n          var color = transparent.data.color;\n\n          switch ( transparent.opaque ) {\n\n            case 'A_ONE':\n              material.opacity = color[ 3 ] * transparency.float;\n              break;\n            case 'RGB_ZERO':\n              material.opacity = 1 - ( color[ 0 ] * transparency.float );\n              break;\n            case 'A_ZERO':\n              material.opacity = 1 - ( color[ 3 ] * transparency.float );\n              break;\n            case 'RGB_ONE':\n              material.opacity = color[ 0 ] * transparency.float;\n              break;\n            default:\n              console.warn( 'THREE.ColladaLoader: Invalid opaque type \"%s\" of transparent tag.', transparent.opaque );\n\n          }\n\n          if ( material.opacity < 1 ) material.transparent = true;\n\n        }\n\n      }\n\n      //\n\n      if ( extra !== undefined && extra.technique !== undefined && extra.technique.double_sided === 1 ) {\n\n        material.side = THREE.DoubleSide;\n\n      }\n\n      return material;\n\n    }\n\n    function getMaterial( id ) {\n\n      return getBuild( library.materials[ id ], buildMaterial );\n\n    }\n\n    // camera\n\n    function parseCamera( xml ) {\n\n      var data = {\n        name: xml.getAttribute( 'name' )\n      };\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'optics':\n            data.optics = parseCameraOptics( child );\n            break;\n\n        }\n\n      }\n\n      library.cameras[ xml.getAttribute( 'id' ) ] = data;\n\n    }\n\n    function parseCameraOptics( xml ) {\n\n      for ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        switch ( child.nodeName ) {\n\n          case 'technique_common':\n            return parseCameraTechnique( child );\n\n        }\n\n      }\n\n      return {};\n\n    }\n\n    function parseCameraTechnique( xml ) {\n\n      var data = {};\n\n      for ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        switch ( child.nodeName ) {\n\n          case 'perspective':\n          case 'orthographic':\n\n            data.technique = child.nodeName;\n            data.parameters = parseCameraParameters( child );\n\n            break;\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function parseCameraParameters( xml ) {\n\n      var data = {};\n\n      for ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        switch ( child.nodeName ) {\n\n          case 'xfov':\n          case 'yfov':\n          case 'xmag':\n          case 'ymag':\n          case 'znear':\n          case 'zfar':\n          case 'aspect_ratio':\n            data[ child.nodeName ] = parseFloat( child.textContent );\n            break;\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function buildCamera( data ) {\n\n      var camera;\n\n      switch ( data.optics.technique ) {\n\n        case 'perspective':\n          camera = new THREE.PerspectiveCamera(\n            data.optics.parameters.yfov,\n            data.optics.parameters.aspect_ratio,\n            data.optics.parameters.znear,\n            data.optics.parameters.zfar\n          );\n          break;\n\n        case 'orthographic':\n          var ymag = data.optics.parameters.ymag;\n          var xmag = data.optics.parameters.xmag;\n          var aspectRatio = data.optics.parameters.aspect_ratio;\n\n          xmag = ( xmag === undefined ) ? ( ymag * aspectRatio ) : xmag;\n          ymag = ( ymag === undefined ) ? ( xmag / aspectRatio ) : ymag;\n\n          xmag *= 0.5;\n          ymag *= 0.5;\n\n          camera = new THREE.OrthographicCamera(\n            - xmag, xmag, ymag, - ymag, // left, right, top, bottom\n            data.optics.parameters.znear,\n            data.optics.parameters.zfar\n          );\n          break;\n\n        default:\n          camera = new THREE.PerspectiveCamera();\n          break;\n\n      }\n\n      camera.name = data.name;\n\n      return camera;\n\n    }\n\n    function getCamera( id ) {\n\n      var data = library.cameras[ id ];\n\n      if ( data !== undefined ) {\n\n        return getBuild( data, buildCamera );\n\n      }\n\n      console.warn( 'THREE.ColladaLoader: Couldn\\'t find camera with ID:', id );\n\n      return null;\n\n    }\n\n    // light\n\n    function parseLight( xml ) {\n\n      var data = {};\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'technique_common':\n            data = parseLightTechnique( child );\n            break;\n\n        }\n\n      }\n\n      library.lights[ xml.getAttribute( 'id' ) ] = data;\n\n    }\n\n    function parseLightTechnique( xml ) {\n\n      var data = {};\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'directional':\n          case 'point':\n          case 'spot':\n          case 'ambient':\n\n            data.technique = child.nodeName;\n            data.parameters = parseLightParameters( child );\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function parseLightParameters( xml ) {\n\n      var data = {};\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'color':\n            var array = parseFloats( child.textContent );\n            data.color = new THREE.Color().fromArray( array );\n            break;\n\n          case 'falloff_angle':\n            data.falloffAngle = parseFloat( child.textContent );\n            break;\n\n          case 'quadratic_attenuation':\n            var f = parseFloat( child.textContent );\n            data.distance = f ? Math.sqrt( 1 / f ) : 0;\n            break;\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function buildLight( data ) {\n\n      var light;\n\n      switch ( data.technique ) {\n\n        case 'directional':\n          light = new THREE.DirectionalLight();\n          break;\n\n        case 'point':\n          light = new THREE.PointLight();\n          break;\n\n        case 'spot':\n          light = new THREE.SpotLight();\n          break;\n\n        case 'ambient':\n          light = new THREE.AmbientLight();\n          break;\n\n      }\n\n      if ( data.parameters.color ) light.color.copy( data.parameters.color );\n      if ( data.parameters.distance ) light.distance = data.parameters.distance;\n\n      return light;\n\n    }\n\n    function getLight( id ) {\n\n      var data = library.lights[ id ];\n\n      if ( data !== undefined ) {\n\n        return getBuild( data, buildLight );\n\n      }\n\n      console.warn( 'THREE.ColladaLoader: Couldn\\'t find light with ID:', id );\n\n      return null;\n\n    }\n\n    // geometry\n\n    function parseGeometry( xml ) {\n\n      var data = {\n        name: xml.getAttribute( 'name' ),\n        sources: {},\n        vertices: {},\n        primitives: []\n      };\n\n      var mesh = getElementsByTagName( xml, 'mesh' )[ 0 ];\n\n      // the following tags inside geometry are not supported yet (see https://github.com/mrdoob/three.js/pull/12606): convex_mesh, spline, brep\n      if ( mesh === undefined ) return;\n\n      for ( var i = 0; i < mesh.childNodes.length; i ++ ) {\n\n        var child = mesh.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        var id = child.getAttribute( 'id' );\n\n        switch ( child.nodeName ) {\n\n          case 'source':\n            data.sources[ id ] = parseSource( child );\n            break;\n\n          case 'vertices':\n            // data.sources[ id ] = data.sources[ parseId( getElementsByTagName( child, 'input' )[ 0 ].getAttribute( 'source' ) ) ];\n            data.vertices = parseGeometryVertices( child );\n            break;\n\n          case 'polygons':\n            console.warn( 'THREE.ColladaLoader: Unsupported primitive type: ', child.nodeName );\n            break;\n\n          case 'lines':\n          case 'linestrips':\n          case 'polylist':\n          case 'triangles':\n            data.primitives.push( parseGeometryPrimitive( child ) );\n            break;\n\n          default:\n            console.log( child );\n\n        }\n\n      }\n\n      library.geometries[ xml.getAttribute( 'id' ) ] = data;\n\n    }\n\n    function parseSource( xml ) {\n\n      var data = {\n        array: [],\n        stride: 3\n      };\n\n      for ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'float_array':\n            data.array = parseFloats( child.textContent );\n            break;\n\n          case 'Name_array':\n            data.array = parseStrings( child.textContent );\n            break;\n\n          case 'technique_common':\n            var accessor = getElementsByTagName( child, 'accessor' )[ 0 ];\n\n            if ( accessor !== undefined ) {\n\n              data.stride = parseInt( accessor.getAttribute( 'stride' ) );\n\n            }\n            break;\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function parseGeometryVertices( xml ) {\n\n      var data = {};\n\n      for ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        data[ child.getAttribute( 'semantic' ) ] = parseId( child.getAttribute( 'source' ) );\n\n      }\n\n      return data;\n\n    }\n\n    function parseGeometryPrimitive( xml ) {\n\n      var primitive = {\n        type: xml.nodeName,\n        material: xml.getAttribute( 'material' ),\n        count: parseInt( xml.getAttribute( 'count' ) ),\n        inputs: {},\n        stride: 0,\n        hasUV: false\n      };\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'input':\n            var id = parseId( child.getAttribute( 'source' ) );\n            var semantic = child.getAttribute( 'semantic' );\n            var offset = parseInt( child.getAttribute( 'offset' ) );\n            var set = parseInt( child.getAttribute( 'set' ) );\n            var inputname = ( set > 0 ? semantic + set : semantic );\n            primitive.inputs[ inputname ] = { id: id, offset: offset };\n            primitive.stride = Math.max( primitive.stride, offset + 1 );\n            if ( semantic === 'TEXCOORD' ) primitive.hasUV = true;\n            break;\n\n          case 'vcount':\n            primitive.vcount = parseInts( child.textContent );\n            break;\n\n          case 'p':\n            primitive.p = parseInts( child.textContent );\n            break;\n\n        }\n\n      }\n\n      return primitive;\n\n    }\n\n    function groupPrimitives( primitives ) {\n\n      var build = {};\n\n      for ( var i = 0; i < primitives.length; i ++ ) {\n\n        var primitive = primitives[ i ];\n\n        if ( build[ primitive.type ] === undefined ) build[ primitive.type ] = [];\n\n        build[ primitive.type ].push( primitive );\n\n      }\n\n      return build;\n\n    }\n\n    function checkUVCoordinates( primitives ) {\n\n      var count = 0;\n\n      for ( var i = 0, l = primitives.length; i < l; i ++ ) {\n\n        var primitive = primitives[ i ];\n\n        if ( primitive.hasUV === true ) {\n\n          count ++;\n\n        }\n\n      }\n\n      if ( count > 0 && count < primitives.length ) {\n\n        primitives.uvsNeedsFix = true;\n\n      }\n\n    }\n\n    function buildGeometry( data ) {\n\n      var build = {};\n\n      var sources = data.sources;\n      var vertices = data.vertices;\n      var primitives = data.primitives;\n\n      if ( primitives.length === 0 ) return {};\n\n      // our goal is to create one buffer geometry for a single type of primitives\n      // first, we group all primitives by their type\n\n      var groupedPrimitives = groupPrimitives( primitives );\n\n      for ( var type in groupedPrimitives ) {\n\n        var primitiveType = groupedPrimitives[ type ];\n\n        // second, ensure consistent uv coordinates for each type of primitives (polylist,triangles or lines)\n\n        checkUVCoordinates( primitiveType );\n\n        // third, create a buffer geometry for each type of primitives\n\n        build[ type ] = buildGeometryType( primitiveType, sources, vertices );\n\n      }\n\n      return build;\n\n    }\n\n    function buildGeometryType( primitives, sources, vertices ) {\n\n      var build = {};\n\n      var position = { array: [], stride: 0 };\n      var normal = { array: [], stride: 0 };\n      var uv = { array: [], stride: 0 };\n      var uv2 = { array: [], stride: 0 };\n      var color = { array: [], stride: 0 };\n\n      var skinIndex = { array: [], stride: 4 };\n      var skinWeight = { array: [], stride: 4 };\n\n      var geometry = new THREE.BufferGeometry();\n\n      var materialKeys = [];\n\n      var start = 0;\n\n      for ( var p = 0; p < primitives.length; p ++ ) {\n\n        var primitive = primitives[ p ];\n        var inputs = primitive.inputs;\n\n        // groups\n\n        var count = 0;\n\n        switch ( primitive.type ) {\n\n          case 'lines':\n          case 'linestrips':\n            count = primitive.count * 2;\n            break;\n\n          case 'triangles':\n            count = primitive.count * 3;\n            break;\n\n          case 'polylist':\n\n            for ( var g = 0; g < primitive.count; g ++ ) {\n\n              var vc = primitive.vcount[ g ];\n\n              switch ( vc ) {\n\n                case 3:\n                  count += 3; // single triangle\n                  break;\n\n                case 4:\n                  count += 6; // quad, subdivided into two triangles\n                  break;\n\n                default:\n                  count += ( vc - 2 ) * 3; // polylist with more than four vertices\n                  break;\n\n              }\n\n            }\n\n            break;\n\n          default:\n            console.warn( 'THREE.ColladaLoader: Unknow primitive type:', primitive.type );\n\n        }\n\n        geometry.addGroup( start, count, p );\n        start += count;\n\n        // material\n\n        if ( primitive.material ) {\n\n          materialKeys.push( primitive.material );\n\n        }\n\n        // geometry data\n\n        for ( var name in inputs ) {\n\n          var input = inputs[ name ];\n\n          switch ( name ) {\n\n            case 'VERTEX':\n              for ( var key in vertices ) {\n\n                var id = vertices[ key ];\n\n                switch ( key ) {\n\n                  case 'POSITION':\n                    var prevLength = position.array.length;\n                    buildGeometryData( primitive, sources[ id ], input.offset, position.array );\n                    position.stride = sources[ id ].stride;\n\n                    if ( sources.skinWeights && sources.skinIndices ) {\n\n                      buildGeometryData( primitive, sources.skinIndices, input.offset, skinIndex.array );\n                      buildGeometryData( primitive, sources.skinWeights, input.offset, skinWeight.array );\n\n                    }\n\n                    // see #3803\n\n                    if ( primitive.hasUV === false && primitives.uvsNeedsFix === true ) {\n\n                      var count = ( position.array.length - prevLength ) / position.stride;\n\n                      for ( var i = 0; i < count; i ++ ) {\n\n                        // fill missing uv coordinates\n\n                        uv.array.push( 0, 0 );\n\n                      }\n\n                    }\n                    break;\n\n                  case 'NORMAL':\n                    buildGeometryData( primitive, sources[ id ], input.offset, normal.array );\n                    normal.stride = sources[ id ].stride;\n                    break;\n\n                  case 'COLOR':\n                    buildGeometryData( primitive, sources[ id ], input.offset, color.array );\n                    color.stride = sources[ id ].stride;\n                    break;\n\n                  case 'TEXCOORD':\n                    buildGeometryData( primitive, sources[ id ], input.offset, uv.array );\n                    uv.stride = sources[ id ].stride;\n                    break;\n\n                  case 'TEXCOORD1':\n                    buildGeometryData( primitive, sources[ id ], input.offset, uv2.array );\n                    uv.stride = sources[ id ].stride;\n                    break;\n\n                  default:\n                    console.warn( 'THREE.ColladaLoader: Semantic \"%s\" not handled in geometry build process.', key );\n\n                }\n\n              }\n              break;\n\n            case 'NORMAL':\n              buildGeometryData( primitive, sources[ input.id ], input.offset, normal.array );\n              normal.stride = sources[ input.id ].stride;\n              break;\n\n            case 'COLOR':\n              buildGeometryData( primitive, sources[ input.id ], input.offset, color.array );\n              color.stride = sources[ input.id ].stride;\n              break;\n\n            case 'TEXCOORD':\n              buildGeometryData( primitive, sources[ input.id ], input.offset, uv.array );\n              uv.stride = sources[ input.id ].stride;\n              break;\n\n            case 'TEXCOORD1':\n              buildGeometryData( primitive, sources[ input.id ], input.offset, uv2.array );\n              uv2.stride = sources[ input.id ].stride;\n              break;\n\n          }\n\n        }\n\n      }\n\n      // build geometry\n\n      if ( position.array.length > 0 ) geometry.addAttribute( 'position', new THREE.Float32BufferAttribute( position.array, position.stride ) );\n      if ( normal.array.length > 0 ) geometry.addAttribute( 'normal', new THREE.Float32BufferAttribute( normal.array, normal.stride ) );\n      if ( color.array.length > 0 ) geometry.addAttribute( 'color', new THREE.Float32BufferAttribute( color.array, color.stride ) );\n      if ( uv.array.length > 0 ) geometry.addAttribute( 'uv', new THREE.Float32BufferAttribute( uv.array, uv.stride ) );\n      if ( uv2.array.length > 0 ) geometry.addAttribute( 'uv2', new THREE.Float32BufferAttribute( uv2.array, uv2.stride ) );\n\n      if ( skinIndex.array.length > 0 ) geometry.addAttribute( 'skinIndex', new THREE.Float32BufferAttribute( skinIndex.array, skinIndex.stride ) );\n      if ( skinWeight.array.length > 0 ) geometry.addAttribute( 'skinWeight', new THREE.Float32BufferAttribute( skinWeight.array, skinWeight.stride ) );\n\n      build.data = geometry;\n      build.type = primitives[ 0 ].type;\n      build.materialKeys = materialKeys;\n\n      return build;\n\n    }\n\n    function buildGeometryData( primitive, source, offset, array ) {\n\n      var indices = primitive.p;\n      var stride = primitive.stride;\n      var vcount = primitive.vcount;\n\n      function pushVector( i ) {\n\n        var index = indices[ i + offset ] * sourceStride;\n        var length = index + sourceStride;\n\n        for ( ; index < length; index ++ ) {\n\n          array.push( sourceArray[ index ] );\n\n        }\n\n      }\n\n      var sourceArray = source.array;\n      var sourceStride = source.stride;\n\n      if ( primitive.vcount !== undefined ) {\n\n        var index = 0;\n\n        for ( var i = 0, l = vcount.length; i < l; i ++ ) {\n\n          var count = vcount[ i ];\n\n          if ( count === 4 ) {\n\n            var a = index + stride * 0;\n            var b = index + stride * 1;\n            var c = index + stride * 2;\n            var d = index + stride * 3;\n\n            pushVector( a ); pushVector( b ); pushVector( d );\n            pushVector( b ); pushVector( c ); pushVector( d );\n\n          } else if ( count === 3 ) {\n\n            var a = index + stride * 0;\n            var b = index + stride * 1;\n            var c = index + stride * 2;\n\n            pushVector( a ); pushVector( b ); pushVector( c );\n\n          } else if ( count > 4 ) {\n\n            for ( var k = 1, kl = ( count - 2 ); k <= kl; k ++ ) {\n\n              var a = index + stride * 0;\n              var b = index + stride * k;\n              var c = index + stride * ( k + 1 );\n\n              pushVector( a ); pushVector( b ); pushVector( c );\n\n            }\n\n          }\n\n          index += stride * count;\n\n        }\n\n      } else {\n\n        for ( var i = 0, l = indices.length; i < l; i += stride ) {\n\n          pushVector( i );\n\n        }\n\n      }\n\n    }\n\n    function getGeometry( id ) {\n\n      return getBuild( library.geometries[ id ], buildGeometry );\n\n    }\n\n    // kinematics\n\n    function parseKinematicsModel( xml ) {\n\n      var data = {\n        name: xml.getAttribute( 'name' ) || '',\n        joints: {},\n        links: []\n      };\n\n      for ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'technique_common':\n            parseKinematicsTechniqueCommon( child, data );\n            break;\n\n        }\n\n      }\n\n      library.kinematicsModels[ xml.getAttribute( 'id' ) ] = data;\n\n    }\n\n    function buildKinematicsModel( data ) {\n\n      if ( data.build !== undefined ) return data.build;\n\n      return data;\n\n    }\n\n    function getKinematicsModel( id ) {\n\n      return getBuild( library.kinematicsModels[ id ], buildKinematicsModel );\n\n    }\n\n    function parseKinematicsTechniqueCommon( xml, data ) {\n\n      for ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'joint':\n            data.joints[ child.getAttribute( 'sid' ) ] = parseKinematicsJoint( child );\n            break;\n\n          case 'link':\n            data.links.push( parseKinematicsLink( child ) );\n            break;\n\n        }\n\n      }\n\n    }\n\n    function parseKinematicsJoint( xml ) {\n\n      var data;\n\n      for ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'prismatic':\n          case 'revolute':\n            data = parseKinematicsJointParameter( child );\n            break;\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function parseKinematicsJointParameter( xml, data ) {\n\n      var data = {\n        sid: xml.getAttribute( 'sid' ),\n        name: xml.getAttribute( 'name' ) || '',\n        axis: new THREE.Vector3(),\n        limits: {\n          min: 0,\n          max: 0\n        },\n        type: xml.nodeName,\n        static: false,\n        zeroPosition: 0,\n        middlePosition: 0\n      };\n\n      for ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'axis':\n            var array = parseFloats( child.textContent );\n            data.axis.fromArray( array );\n            break;\n          case 'limits':\n            var max = child.getElementsByTagName( 'max' )[ 0 ];\n            var min = child.getElementsByTagName( 'min' )[ 0 ];\n\n            data.limits.max = parseFloat( max.textContent );\n            data.limits.min = parseFloat( min.textContent );\n            break;\n\n        }\n\n      }\n\n      // if min is equal to or greater than max, consider the joint static\n\n      if ( data.limits.min >= data.limits.max ) {\n\n        data.static = true;\n\n      }\n\n      // calculate middle position\n\n      data.middlePosition = ( data.limits.min + data.limits.max ) / 2.0;\n\n      return data;\n\n    }\n\n    function parseKinematicsLink( xml ) {\n\n      var data = {\n        sid: xml.getAttribute( 'sid' ),\n        name: xml.getAttribute( 'name' ) || '',\n        attachments: [],\n        transforms: []\n      };\n\n      for ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'attachment_full':\n            data.attachments.push( parseKinematicsAttachment( child ) );\n            break;\n\n          case 'matrix':\n          case 'translate':\n          case 'rotate':\n            data.transforms.push( parseKinematicsTransform( child ) );\n            break;\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function parseKinematicsAttachment( xml ) {\n\n      var data = {\n        joint: xml.getAttribute( 'joint' ).split( '/' ).pop(),\n        transforms: [],\n        links: []\n      };\n\n      for ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'link':\n            data.links.push( parseKinematicsLink( child ) );\n            break;\n\n          case 'matrix':\n          case 'translate':\n          case 'rotate':\n            data.transforms.push( parseKinematicsTransform( child ) );\n            break;\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function parseKinematicsTransform( xml ) {\n\n      var data = {\n        type: xml.nodeName\n      };\n\n      var array = parseFloats( xml.textContent );\n\n      switch ( data.type ) {\n\n        case 'matrix':\n          data.obj = new THREE.Matrix4();\n          data.obj.fromArray( array ).transpose();\n          break;\n\n        case 'translate':\n          data.obj = new THREE.Vector3();\n          data.obj.fromArray( array );\n          break;\n\n        case 'rotate':\n          data.obj = new THREE.Vector3();\n          data.obj.fromArray( array );\n          data.angle = THREE.Math.degToRad( array[ 3 ] );\n          break;\n\n      }\n\n      return data;\n\n    }\n\n    // physics\n\n    function parsePhysicsModel( xml ) {\n\n      var data = {\n        name: xml.getAttribute( 'name' ) || '',\n        rigidBodies: {}\n      };\n\n      for ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'rigid_body':\n            data.rigidBodies[ child.getAttribute( 'name' ) ] = {};\n            parsePhysicsRigidBody( child, data.rigidBodies[ child.getAttribute( 'name' ) ] );\n            break;\n\n        }\n\n      }\n\n      library.physicsModels[ xml.getAttribute( 'id' ) ] = data;\n\n    }\n\n    function parsePhysicsRigidBody( xml, data ) {\n\n      for ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'technique_common':\n            parsePhysicsTechniqueCommon( child, data );\n            break;\n\n        }\n\n      }\n\n    }\n\n    function parsePhysicsTechniqueCommon( xml, data ) {\n\n      for ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'inertia':\n            data.inertia = parseFloats( child.textContent );\n            break;\n\n          case 'mass':\n            data.mass = parseFloats( child.textContent )[ 0 ];\n            break;\n\n        }\n\n      }\n\n    }\n\n    // scene\n\n    function parseKinematicsScene( xml ) {\n\n      var data = {\n        bindJointAxis: []\n      };\n\n      for ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'bind_joint_axis':\n            data.bindJointAxis.push( parseKinematicsBindJointAxis( child ) );\n            break;\n\n        }\n\n      }\n\n      library.kinematicsScenes[ parseId( xml.getAttribute( 'url' ) ) ] = data;\n\n    }\n\n    function parseKinematicsBindJointAxis( xml ) {\n\n      var data = {\n        target: xml.getAttribute( 'target' ).split( '/' ).pop()\n      };\n\n      for ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'axis':\n            var param = child.getElementsByTagName( 'param' )[ 0 ];\n            data.axis = param.textContent;\n            var tmpJointIndex = data.axis.split( 'inst_' ).pop().split( 'axis' )[ 0 ];\n            data.jointIndex = tmpJointIndex.substr( 0, tmpJointIndex.length - 1 );\n            break;\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function buildKinematicsScene( data ) {\n\n      if ( data.build !== undefined ) return data.build;\n\n      return data;\n\n    }\n\n    function getKinematicsScene( id ) {\n\n      return getBuild( library.kinematicsScenes[ id ], buildKinematicsScene );\n\n    }\n\n    function setupKinematics() {\n\n      var kinematicsModelId = Object.keys( library.kinematicsModels )[ 0 ];\n      var kinematicsSceneId = Object.keys( library.kinematicsScenes )[ 0 ];\n      var visualSceneId = Object.keys( library.visualScenes )[ 0 ];\n\n      if ( kinematicsModelId === undefined || kinematicsSceneId === undefined ) return;\n\n      var kinematicsModel = getKinematicsModel( kinematicsModelId );\n      var kinematicsScene = getKinematicsScene( kinematicsSceneId );\n      var visualScene = getVisualScene( visualSceneId );\n\n      var bindJointAxis = kinematicsScene.bindJointAxis;\n      var jointMap = {};\n\n      for ( var i = 0, l = bindJointAxis.length; i < l; i ++ ) {\n\n        var axis = bindJointAxis[ i ];\n\n        // the result of the following query is an element of type 'translate', 'rotate','scale' or 'matrix'\n\n        var targetElement = collada.querySelector( '[sid=\"' + axis.target + '\"]' );\n\n        if ( targetElement ) {\n\n          // get the parent of the transfrom element\n\n          var parentVisualElement = targetElement.parentElement;\n\n          // connect the joint of the kinematics model with the element in the visual scene\n\n          connect( axis.jointIndex, parentVisualElement );\n\n        }\n\n      }\n\n      function connect( jointIndex, visualElement ) {\n\n        var visualElementName = visualElement.getAttribute( 'name' );\n        var joint = kinematicsModel.joints[ jointIndex ];\n\n        visualScene.traverse( function ( object ) {\n\n          if ( object.name === visualElementName ) {\n\n            jointMap[ jointIndex ] = {\n              object: object,\n              transforms: buildTransformList( visualElement ),\n              joint: joint,\n              position: joint.zeroPosition\n            };\n\n          }\n\n        } );\n\n      }\n\n      var m0 = new THREE.Matrix4();\n\n      kinematics = {\n\n        joints: kinematicsModel && kinematicsModel.joints,\n\n        getJointValue: function ( jointIndex ) {\n\n          var jointData = jointMap[ jointIndex ];\n\n          if ( jointData ) {\n\n            return jointData.position;\n\n          } else {\n\n            console.warn( 'THREE.ColladaLoader: Joint ' + jointIndex + ' doesn\\'t exist.' );\n\n          }\n\n        },\n\n        setJointValue: function ( jointIndex, value ) {\n\n          var jointData = jointMap[ jointIndex ];\n\n          if ( jointData ) {\n\n            var joint = jointData.joint;\n\n            if ( value > joint.limits.max || value < joint.limits.min ) {\n\n              console.warn( 'THREE.ColladaLoader: Joint ' + jointIndex + ' value ' + value + ' outside of limits (min: ' + joint.limits.min + ', max: ' + joint.limits.max + ').' );\n\n            } else if ( joint.static ) {\n\n              console.warn( 'THREE.ColladaLoader: Joint ' + jointIndex + ' is static.' );\n\n            } else {\n\n              var object = jointData.object;\n              var axis = joint.axis;\n              var transforms = jointData.transforms;\n\n              matrix.identity();\n\n              // each update, we have to apply all transforms in the correct order\n\n              for ( var i = 0; i < transforms.length; i ++ ) {\n\n                var transform = transforms[ i ];\n\n                // if there is a connection of the transform node with a joint, apply the joint value\n\n                if ( transform.sid && transform.sid.indexOf( jointIndex ) !== - 1 ) {\n\n                  switch ( joint.type ) {\n\n                    case 'revolute':\n                      matrix.multiply( m0.makeRotationAxis( axis, THREE.Math.degToRad( value ) ) );\n                      break;\n\n                    case 'prismatic':\n                      matrix.multiply( m0.makeTranslation( axis.x * value, axis.y * value, axis.z * value ) );\n                      break;\n\n                    default:\n                      console.warn( 'THREE.ColladaLoader: Unknown joint type: ' + joint.type );\n                      break;\n\n                  }\n\n                } else {\n\n                  switch ( transform.type ) {\n\n                    case 'matrix':\n                      matrix.multiply( transform.obj );\n                      break;\n\n                    case 'translate':\n                      matrix.multiply( m0.makeTranslation( transform.obj.x, transform.obj.y, transform.obj.z ) );\n                      break;\n\n                    case 'scale':\n                      matrix.scale( transform.obj );\n                      break;\n\n                    case 'rotate':\n                      matrix.multiply( m0.makeRotationAxis( transform.obj, transform.angle ) );\n                      break;\n\n                  }\n\n                }\n\n              }\n\n              object.matrix.copy( matrix );\n              object.matrix.decompose( object.position, object.quaternion, object.scale );\n\n              jointMap[ jointIndex ].position = value;\n\n            }\n\n          } else {\n\n            console.log( 'THREE.ColladaLoader: ' + jointIndex + ' does not exist.' );\n\n          }\n\n        }\n\n      };\n\n    }\n\n    function buildTransformList( node ) {\n\n      var transforms = [];\n\n      var xml = collada.querySelector( '[id=\"' + node.id + '\"]' );\n\n      for ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'matrix':\n            var array = parseFloats( child.textContent );\n            var matrix = new THREE.Matrix4().fromArray( array ).transpose();\n            transforms.push( {\n              sid: child.getAttribute( 'sid' ),\n              type: child.nodeName,\n              obj: matrix\n            } );\n            break;\n\n          case 'translate':\n          case 'scale':\n            var array = parseFloats( child.textContent );\n            var vector = new THREE.Vector3().fromArray( array );\n            transforms.push( {\n              sid: child.getAttribute( 'sid' ),\n              type: child.nodeName,\n              obj: vector\n            } );\n            break;\n\n          case 'rotate':\n            var array = parseFloats( child.textContent );\n            var vector = new THREE.Vector3().fromArray( array );\n            var angle = THREE.Math.degToRad( array[ 3 ] );\n            transforms.push( {\n              sid: child.getAttribute( 'sid' ),\n              type: child.nodeName,\n              obj: vector,\n              angle: angle\n            } );\n            break;\n\n        }\n\n      }\n\n      return transforms;\n\n    }\n\n    // nodes\n\n    function prepareNodes( xml ) {\n\n      var elements = xml.getElementsByTagName( 'node' );\n\n      // ensure all node elements have id attributes\n\n      for ( var i = 0; i < elements.length; i ++ ) {\n\n        var element = elements[ i ];\n\n        if ( element.hasAttribute( 'id' ) === false ) {\n\n          element.setAttribute( 'id', generateId() );\n\n        }\n\n      }\n\n    }\n\n    var matrix = new THREE.Matrix4();\n    var vector = new THREE.Vector3();\n\n    function parseNode( xml ) {\n\n      var data = {\n        name: xml.getAttribute( 'name' ) || '',\n        type: xml.getAttribute( 'type' ),\n        id: xml.getAttribute( 'id' ),\n        sid: xml.getAttribute( 'sid' ),\n        matrix: new THREE.Matrix4(),\n        nodes: [],\n        instanceCameras: [],\n        instanceControllers: [],\n        instanceLights: [],\n        instanceGeometries: [],\n        instanceNodes: [],\n        transforms: {}\n      };\n\n      for ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'node':\n            data.nodes.push( child.getAttribute( 'id' ) );\n            parseNode( child );\n            break;\n\n          case 'instance_camera':\n            data.instanceCameras.push( parseId( child.getAttribute( 'url' ) ) );\n            break;\n\n          case 'instance_controller':\n            data.instanceControllers.push( parseNodeInstance( child ) );\n            break;\n\n          case 'instance_light':\n            data.instanceLights.push( parseId( child.getAttribute( 'url' ) ) );\n            break;\n\n          case 'instance_geometry':\n            data.instanceGeometries.push( parseNodeInstance( child ) );\n            break;\n\n          case 'instance_node':\n            data.instanceNodes.push( parseId( child.getAttribute( 'url' ) ) );\n            break;\n\n          case 'matrix':\n            var array = parseFloats( child.textContent );\n            data.matrix.multiply( matrix.fromArray( array ).transpose() );\n            data.transforms[ child.getAttribute( 'sid' ) ] = child.nodeName;\n            break;\n\n          case 'translate':\n            var array = parseFloats( child.textContent );\n            vector.fromArray( array );\n            data.matrix.multiply( matrix.makeTranslation( vector.x, vector.y, vector.z ) );\n            data.transforms[ child.getAttribute( 'sid' ) ] = child.nodeName;\n            break;\n\n          case 'rotate':\n            var array = parseFloats( child.textContent );\n            var angle = THREE.Math.degToRad( array[ 3 ] );\n            data.matrix.multiply( matrix.makeRotationAxis( vector.fromArray( array ), angle ) );\n            data.transforms[ child.getAttribute( 'sid' ) ] = child.nodeName;\n            break;\n\n          case 'scale':\n            var array = parseFloats( child.textContent );\n            data.matrix.scale( vector.fromArray( array ) );\n            data.transforms[ child.getAttribute( 'sid' ) ] = child.nodeName;\n            break;\n\n          case 'extra':\n            break;\n\n          default:\n            console.log( child );\n\n        }\n\n      }\n\n      if ( hasNode( data.id ) ) {\n\n        console.warn( 'THREE.ColladaLoader: There is already a node with ID %s. Exclude current node from further processing.', data.id );\n\n      } else {\n\n        library.nodes[ data.id ] = data;\n\n      }\n\n      return data;\n\n    }\n\n    function parseNodeInstance( xml ) {\n\n      var data = {\n        id: parseId( xml.getAttribute( 'url' ) ),\n        materials: {},\n        skeletons: []\n      };\n\n      for ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        switch ( child.nodeName ) {\n\n          case 'bind_material':\n            var instances = child.getElementsByTagName( 'instance_material' );\n\n            for ( var j = 0; j < instances.length; j ++ ) {\n\n              var instance = instances[ j ];\n              var symbol = instance.getAttribute( 'symbol' );\n              var target = instance.getAttribute( 'target' );\n\n              data.materials[ symbol ] = parseId( target );\n\n            }\n\n            break;\n\n          case 'skeleton':\n            data.skeletons.push( parseId( child.textContent ) );\n            break;\n\n          default:\n            break;\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function buildSkeleton( skeletons, joints ) {\n\n      var boneData = [];\n      var sortedBoneData = [];\n\n      var i, j, data;\n\n      // a skeleton can have multiple root bones. collada expresses this\n      // situtation with multiple \"skeleton\" tags per controller instance\n\n      for ( i = 0; i < skeletons.length; i ++ ) {\n\n        var skeleton = skeletons[ i ];\n\n        var root;\n\n        if ( hasNode( skeleton ) ) {\n\n          root = getNode( skeleton );\n          buildBoneHierarchy( root, joints, boneData );\n\n        } else if ( hasVisualScene( skeleton ) ) {\n\n          // handle case where the skeleton refers to the visual scene (#13335)\n\n          var visualScene = library.visualScenes[ skeleton ];\n          var children = visualScene.children;\n\n          for ( var j = 0; j < children.length; j ++ ) {\n\n            var child = children[ j ];\n\n            if ( child.type === 'JOINT' ) {\n\n              var root = getNode( child.id );\n              buildBoneHierarchy( root, joints, boneData );\n\n            }\n\n          }\n\n        } else {\n\n          console.error( 'THREE.ColladaLoader: Unable to find root bone of skeleton with ID:', skeleton );\n\n        }\n\n      }\n\n      // sort bone data (the order is defined in the corresponding controller)\n\n      for ( i = 0; i < joints.length; i ++ ) {\n\n        for ( j = 0; j < boneData.length; j ++ ) {\n\n          data = boneData[ j ];\n\n          if ( data.bone.name === joints[ i ].name ) {\n\n            sortedBoneData[ i ] = data;\n            data.processed = true;\n            break;\n\n          }\n\n        }\n\n      }\n\n      // add unprocessed bone data at the end of the list\n\n      for ( i = 0; i < boneData.length; i ++ ) {\n\n        data = boneData[ i ];\n\n        if ( data.processed === false ) {\n\n          sortedBoneData.push( data );\n          data.processed = true;\n\n        }\n\n      }\n\n      // setup arrays for skeleton creation\n\n      var bones = [];\n      var boneInverses = [];\n\n      for ( i = 0; i < sortedBoneData.length; i ++ ) {\n\n        data = sortedBoneData[ i ];\n\n        bones.push( data.bone );\n        boneInverses.push( data.boneInverse );\n\n      }\n\n      return new THREE.Skeleton( bones, boneInverses );\n\n    }\n\n    function buildBoneHierarchy( root, joints, boneData ) {\n\n      // setup bone data from visual scene\n\n      root.traverse( function ( object ) {\n\n        if ( object.isBone === true ) {\n\n          var boneInverse;\n\n          // retrieve the boneInverse from the controller data\n\n          for ( var i = 0; i < joints.length; i ++ ) {\n\n            var joint = joints[ i ];\n\n            if ( joint.name === object.name ) {\n\n              boneInverse = joint.boneInverse;\n              break;\n\n            }\n\n          }\n\n          if ( boneInverse === undefined ) {\n\n            // Unfortunately, there can be joints in the visual scene that are not part of the\n            // corresponding controller. In this case, we have to create a dummy boneInverse matrix\n            // for the respective bone. This bone won't affect any vertices, because there are no skin indices\n            // and weights defined for it. But we still have to add the bone to the sorted bone list in order to\n            // ensure a correct animation of the model.\n\n            boneInverse = new THREE.Matrix4();\n\n          }\n\n          boneData.push( { bone: object, boneInverse: boneInverse, processed: false } );\n\n        }\n\n      } );\n\n    }\n\n    function buildNode( data ) {\n\n      var objects = [];\n\n      var matrix = data.matrix;\n      var nodes = data.nodes;\n      var type = data.type;\n      var instanceCameras = data.instanceCameras;\n      var instanceControllers = data.instanceControllers;\n      var instanceLights = data.instanceLights;\n      var instanceGeometries = data.instanceGeometries;\n      var instanceNodes = data.instanceNodes;\n\n      // nodes\n\n      for ( var i = 0, l = nodes.length; i < l; i ++ ) {\n\n        objects.push( getNode( nodes[ i ] ) );\n\n      }\n\n      // instance cameras\n\n      for ( var i = 0, l = instanceCameras.length; i < l; i ++ ) {\n\n        var instanceCamera = getCamera( instanceCameras[ i ] );\n\n        if ( instanceCamera !== null ) {\n\n          objects.push( instanceCamera.clone() );\n\n        }\n\n      }\n\n      // instance controllers\n\n      for ( var i = 0, l = instanceControllers.length; i < l; i ++ ) {\n\n        var instance = instanceControllers[ i ];\n        var controller = getController( instance.id );\n        var geometries = getGeometry( controller.id );\n        var newObjects = buildObjects( geometries, instance.materials );\n\n        var skeletons = instance.skeletons;\n        var joints = controller.skin.joints;\n\n        var skeleton = buildSkeleton( skeletons, joints );\n\n        for ( var j = 0, jl = newObjects.length; j < jl; j ++ ) {\n\n          var object = newObjects[ j ];\n\n          if ( object.isSkinnedMesh ) {\n\n            object.bind( skeleton, controller.skin.bindMatrix );\n            object.normalizeSkinWeights();\n\n          }\n\n          objects.push( object );\n\n        }\n\n      }\n\n      // instance lights\n\n      for ( var i = 0, l = instanceLights.length; i < l; i ++ ) {\n\n        var instanceLight = getLight( instanceLights[ i ] );\n\n        if ( instanceLight !== null ) {\n\n          objects.push( instanceLight.clone() );\n\n        }\n\n      }\n\n      // instance geometries\n\n      for ( var i = 0, l = instanceGeometries.length; i < l; i ++ ) {\n\n        var instance = instanceGeometries[ i ];\n\n        // a single geometry instance in collada can lead to multiple object3Ds.\n        // this is the case when primitives are combined like triangles and lines\n\n        var geometries = getGeometry( instance.id );\n        var newObjects = buildObjects( geometries, instance.materials );\n\n        for ( var j = 0, jl = newObjects.length; j < jl; j ++ ) {\n\n          objects.push( newObjects[ j ] );\n\n        }\n\n      }\n\n      // instance nodes\n\n      for ( var i = 0, l = instanceNodes.length; i < l; i ++ ) {\n\n        objects.push( getNode( instanceNodes[ i ] ).clone() );\n\n      }\n\n      var object;\n\n      if ( nodes.length === 0 && objects.length === 1 ) {\n\n        object = objects[ 0 ];\n\n      } else {\n\n        object = ( type === 'JOINT' ) ? new THREE.Bone() : new THREE.Group();\n\n        for ( var i = 0; i < objects.length; i ++ ) {\n\n          object.add( objects[ i ] );\n\n        }\n\n      }\n\n      if ( object.name === '' ) {\n\n        object.name = ( type === 'JOINT' ) ? data.sid : data.name;\n\n      }\n\n      object.matrix.copy( matrix );\n      object.matrix.decompose( object.position, object.quaternion, object.scale );\n\n      return object;\n\n    }\n\n    var fallbackMaterial = new THREE.MeshBasicMaterial( { color: 0xff00ff } );\n\n    function resolveMaterialBinding( keys, instanceMaterials ) {\n\n      var materials = [];\n\n      for ( var i = 0, l = keys.length; i < l; i ++ ) {\n\n        var id = instanceMaterials[ keys[ i ] ];\n\n        if ( id === undefined ) {\n\n          console.warn( 'THREE.ColladaLoader: Material with key %s not found. Apply fallback material.', keys[ i ] );\n          materials.push( fallbackMaterial );\n\n        } else {\n\n          materials.push( getMaterial( id ) );\n\n        }\n\n      }\n\n      return materials;\n\n    }\n\n    function buildObjects( geometries, instanceMaterials ) {\n\n      var objects = [];\n\n      for ( var type in geometries ) {\n\n        var geometry = geometries[ type ];\n\n        var materials = resolveMaterialBinding( geometry.materialKeys, instanceMaterials );\n\n        // handle case if no materials are defined\n\n        if ( materials.length === 0 ) {\n\n          if ( type === 'lines' || type === 'linestrips' ) {\n\n            materials.push( new THREE.LineBasicMaterial() );\n\n          } else {\n\n            materials.push( new THREE.MeshPhongMaterial() );\n\n          }\n\n        }\n\n        // regard skinning\n\n        var skinning = ( geometry.data.attributes.skinIndex !== undefined );\n\n        if ( skinning ) {\n\n          for ( var i = 0, l = materials.length; i < l; i ++ ) {\n\n            materials[ i ].skinning = true;\n\n          }\n\n        }\n\n        // choose between a single or multi materials (material array)\n\n        var material = ( materials.length === 1 ) ? materials[ 0 ] : materials;\n\n        // now create a specific 3D object\n\n        var object;\n\n        switch ( type ) {\n\n          case 'lines':\n            object = new THREE.LineSegments( geometry.data, material );\n            break;\n\n          case 'linestrips':\n            object = new THREE.Line( geometry.data, material );\n            break;\n\n          case 'triangles':\n          case 'polylist':\n            if ( skinning ) {\n\n              object = new THREE.SkinnedMesh( geometry.data, material );\n\n            } else {\n\n              object = new THREE.Mesh( geometry.data, material );\n\n            }\n            break;\n\n        }\n\n        objects.push( object );\n\n      }\n\n      return objects;\n\n    }\n\n    function hasNode( id ) {\n\n      return library.nodes[ id ] !== undefined;\n\n    }\n\n    function getNode( id ) {\n\n      return getBuild( library.nodes[ id ], buildNode );\n\n    }\n\n    // visual scenes\n\n    function parseVisualScene( xml ) {\n\n      var data = {\n        name: xml.getAttribute( 'name' ),\n        children: []\n      };\n\n      prepareNodes( xml );\n\n      var elements = getElementsByTagName( xml, 'node' );\n\n      for ( var i = 0; i < elements.length; i ++ ) {\n\n        data.children.push( parseNode( elements[ i ] ) );\n\n      }\n\n      library.visualScenes[ xml.getAttribute( 'id' ) ] = data;\n\n    }\n\n    function buildVisualScene( data ) {\n\n      var group = new THREE.Group();\n      group.name = data.name;\n\n      var children = data.children;\n\n      for ( var i = 0; i < children.length; i ++ ) {\n\n        var child = children[ i ];\n\n        group.add( getNode( child.id ) );\n\n      }\n\n      return group;\n\n    }\n\n    function hasVisualScene( id ) {\n\n      return library.visualScenes[ id ] !== undefined;\n\n    }\n\n    function getVisualScene( id ) {\n\n      return getBuild( library.visualScenes[ id ], buildVisualScene );\n\n    }\n\n    // scenes\n\n    function parseScene( xml ) {\n\n      var instance = getElementsByTagName( xml, 'instance_visual_scene' )[ 0 ];\n      return getVisualScene( parseId( instance.getAttribute( 'url' ) ) );\n\n    }\n\n    function setupAnimations() {\n\n      var clips = library.clips;\n\n      if ( isEmpty( clips ) === true ) {\n\n        if ( isEmpty( library.animations ) === false ) {\n\n          // if there are animations but no clips, we create a default clip for playback\n\n          var tracks = [];\n\n          for ( var id in library.animations ) {\n\n            var animationTracks = getAnimation( id );\n\n            for ( var i = 0, l = animationTracks.length; i < l; i ++ ) {\n\n              tracks.push( animationTracks[ i ] );\n\n            }\n\n          }\n\n          animations.push( new THREE.AnimationClip( 'default', - 1, tracks ) );\n\n        }\n\n      } else {\n\n        for ( var id in clips ) {\n\n          animations.push( getAnimationClip( id ) );\n\n        }\n\n      }\n\n    }\n\n    if ( text.length === 0 ) {\n\n      return { scene: new THREE.Scene() };\n\n    }\n\n    var xml = new DOMParser().parseFromString( text, 'application/xml' );\n\n    var collada = getElementsByTagName( xml, 'COLLADA' )[ 0 ];\n\n    // metadata\n\n    var version = collada.getAttribute( 'version' );\n    console.log( 'THREE.ColladaLoader: File version', version );\n\n    var asset = parseAsset( getElementsByTagName( collada, 'asset' )[ 0 ] );\n    var textureLoader = new THREE.TextureLoader( this.manager );\n    textureLoader.setPath( this.resourcePath || path ).setCrossOrigin( this.crossOrigin );\n\n    var tgaLoader;\n\n    if ( THREE.TGALoader ) {\n\n      tgaLoader = new THREE.TGALoader( this.manager );\n      tgaLoader.setPath( this.resourcePath || path );\n\n    }\n\n    //\n\n    var animations = [];\n    var kinematics = {};\n    var count = 0;\n\n    //\n\n    var library = {\n      animations: {},\n      clips: {},\n      controllers: {},\n      images: {},\n      effects: {},\n      materials: {},\n      cameras: {},\n      lights: {},\n      geometries: {},\n      nodes: {},\n      visualScenes: {},\n      kinematicsModels: {},\n      physicsModels: {},\n      kinematicsScenes: {}\n    };\n\n    parseLibrary( collada, 'library_animations', 'animation', parseAnimation );\n    parseLibrary( collada, 'library_animation_clips', 'animation_clip', parseAnimationClip );\n    parseLibrary( collada, 'library_controllers', 'controller', parseController );\n    parseLibrary( collada, 'library_images', 'image', parseImage );\n    parseLibrary( collada, 'library_effects', 'effect', parseEffect );\n    parseLibrary( collada, 'library_materials', 'material', parseMaterial );\n    parseLibrary( collada, 'library_cameras', 'camera', parseCamera );\n    parseLibrary( collada, 'library_lights', 'light', parseLight );\n    parseLibrary( collada, 'library_geometries', 'geometry', parseGeometry );\n    parseLibrary( collada, 'library_nodes', 'node', parseNode );\n    parseLibrary( collada, 'library_visual_scenes', 'visual_scene', parseVisualScene );\n    parseLibrary( collada, 'library_kinematics_models', 'kinematics_model', parseKinematicsModel );\n    parseLibrary( collada, 'library_physics_models', 'physics_model', parsePhysicsModel );\n    parseLibrary( collada, 'scene', 'instance_kinematics_scene', parseKinematicsScene );\n\n    buildLibrary( library.animations, buildAnimation );\n    buildLibrary( library.clips, buildAnimationClip );\n    buildLibrary( library.controllers, buildController );\n    buildLibrary( library.images, buildImage );\n    buildLibrary( library.effects, buildEffect );\n    buildLibrary( library.materials, buildMaterial );\n    buildLibrary( library.cameras, buildCamera );\n    buildLibrary( library.lights, buildLight );\n    buildLibrary( library.geometries, buildGeometry );\n    buildLibrary( library.visualScenes, buildVisualScene );\n\n    setupAnimations();\n    setupKinematics();\n\n    var scene = parseScene( getElementsByTagName( collada, 'scene' )[ 0 ] );\n\n    if ( asset.upAxis === 'Z_UP' ) {\n\n      scene.quaternion.setFromEuler( new THREE.Euler( - Math.PI / 2, 0, 0 ) );\n\n    }\n\n    scene.scale.multiplyScalar( asset.unit );\n\n    return {\n      animations: animations,\n      kinematics: kinematics,\n      library: library,\n      scene: scene\n    };\n\n  }\n\n};\n"]},"metadata":{},"sourceType":"script"}