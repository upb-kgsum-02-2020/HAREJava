{"ast":null,"code":"/**\n * Flat-shaded ocean primitive.\n *\n * Based on a Codrops tutorial:\n * http://tympanus.net/codrops/2016/04/26/the-aviator-animating-basic-3d-scene-threejs/\n */\nmodule.exports.Primitive = AFRAME.registerPrimitive('a-ocean', {\n  defaultComponents: {\n    ocean: {},\n    rotation: {\n      x: -90,\n      y: 0,\n      z: 0\n    }\n  },\n  mappings: {\n    width: 'ocean.width',\n    depth: 'ocean.depth',\n    density: 'ocean.density',\n    amplitude: 'ocean.amplitude',\n    amplitudeVariance: 'ocean.amplitudeVariance',\n    speed: 'ocean.speed',\n    speedVariance: 'ocean.speedVariance',\n    color: 'ocean.color',\n    opacity: 'ocean.opacity'\n  }\n});\nmodule.exports.Component = AFRAME.registerComponent('ocean', {\n  schema: {\n    // Dimensions of the ocean area.\n    width: {\n      default: 10,\n      min: 0\n    },\n    depth: {\n      default: 10,\n      min: 0\n    },\n    // Density of waves.\n    density: {\n      default: 10\n    },\n    // Wave amplitude and variance.\n    amplitude: {\n      default: 0.1\n    },\n    amplitudeVariance: {\n      default: 0.3\n    },\n    // Wave speed and variance.\n    speed: {\n      default: 1\n    },\n    speedVariance: {\n      default: 2\n    },\n    // Material.\n    color: {\n      default: '#7AD2F7',\n      type: 'color'\n    },\n    opacity: {\n      default: 0.8\n    }\n  },\n\n  /**\n   * Use play() instead of init(), because component mappings – unavailable as dependencies – are\n   * not guaranteed to have parsed when this component is initialized.\n   */\n  play: function () {\n    const el = this.el,\n          data = this.data;\n    let material = el.components.material;\n    const geometry = new THREE.PlaneGeometry(data.width, data.depth, data.density, data.density);\n    geometry.mergeVertices();\n    this.waves = [];\n\n    for (let v, i = 0, l = geometry.vertices.length; i < l; i++) {\n      v = geometry.vertices[i];\n      this.waves.push({\n        z: v.z,\n        ang: Math.random() * Math.PI * 2,\n        amp: data.amplitude + Math.random() * data.amplitudeVariance,\n        speed: (data.speed + Math.random() * data.speedVariance) / 1000 // radians / frame\n\n      });\n    }\n\n    if (!material) {\n      material = {};\n      material.material = new THREE.MeshPhongMaterial({\n        color: data.color,\n        transparent: data.opacity < 1,\n        opacity: data.opacity,\n        shading: THREE.FlatShading\n      });\n    }\n\n    this.mesh = new THREE.Mesh(geometry, material.material);\n    el.setObject3D('mesh', this.mesh);\n  },\n  remove: function () {\n    this.el.removeObject3D('mesh');\n  },\n  tick: function (t, dt) {\n    if (!dt) return;\n    const verts = this.mesh.geometry.vertices;\n\n    for (let v, vprops, i = 0; v = verts[i]; i++) {\n      vprops = this.waves[i];\n      v.z = vprops.z + Math.sin(vprops.ang) * vprops.amp;\n      vprops.ang += vprops.speed * dt;\n    }\n\n    this.mesh.geometry.verticesNeedUpdate = true;\n  }\n});","map":{"version":3,"sources":["E:/Universitat Paderborn/NEW/kgsum/kgsum/kgsum/src/main/resources/kgsum-visualization/node_modules/aframe-extras/src/primitives/a-ocean.js"],"names":["module","exports","Primitive","AFRAME","registerPrimitive","defaultComponents","ocean","rotation","x","y","z","mappings","width","depth","density","amplitude","amplitudeVariance","speed","speedVariance","color","opacity","Component","registerComponent","schema","default","min","type","play","el","data","material","components","geometry","THREE","PlaneGeometry","mergeVertices","waves","v","i","l","vertices","length","push","ang","Math","random","PI","amp","MeshPhongMaterial","transparent","shading","FlatShading","mesh","Mesh","setObject3D","remove","removeObject3D","tick","t","dt","verts","vprops","sin","verticesNeedUpdate"],"mappings":"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","sourcesContent":["/**\n * Flat-shaded ocean primitive.\n *\n * Based on a Codrops tutorial:\n * http://tympanus.net/codrops/2016/04/26/the-aviator-animating-basic-3d-scene-threejs/\n */\nmodule.exports.Primitive = AFRAME.registerPrimitive('a-ocean', {\n  defaultComponents: {\n    ocean: {},\n    rotation: {x: -90, y: 0, z: 0}\n  },\n  mappings: {\n    width: 'ocean.width',\n    depth: 'ocean.depth',\n    density: 'ocean.density',\n    amplitude: 'ocean.amplitude',\n    amplitudeVariance: 'ocean.amplitudeVariance',\n    speed: 'ocean.speed',\n    speedVariance: 'ocean.speedVariance',\n    color: 'ocean.color',\n    opacity: 'ocean.opacity'\n  }\n});\n\nmodule.exports.Component = AFRAME.registerComponent('ocean', {\n  schema: {\n    // Dimensions of the ocean area.\n    width: {default: 10, min: 0},\n    depth: {default: 10, min: 0},\n\n    // Density of waves.\n    density: {default: 10},\n\n    // Wave amplitude and variance.\n    amplitude: {default: 0.1},\n    amplitudeVariance: {default: 0.3},\n\n    // Wave speed and variance.\n    speed: {default: 1},\n    speedVariance: {default: 2},\n\n    // Material.\n    color: {default: '#7AD2F7', type: 'color'},\n    opacity: {default: 0.8}\n  },\n\n  /**\n   * Use play() instead of init(), because component mappings – unavailable as dependencies – are\n   * not guaranteed to have parsed when this component is initialized.\n   */\n  play: function () {\n    const el = this.el,\n        data = this.data;\n    let material = el.components.material;\n\n    const geometry = new THREE.PlaneGeometry(data.width, data.depth, data.density, data.density);\n    geometry.mergeVertices();\n    this.waves = [];\n    for (let v, i = 0, l = geometry.vertices.length; i < l; i++) {\n      v = geometry.vertices[i];\n      this.waves.push({\n        z: v.z,\n        ang: Math.random() * Math.PI * 2,\n        amp: data.amplitude + Math.random() * data.amplitudeVariance,\n        speed: (data.speed + Math.random() * data.speedVariance) / 1000 // radians / frame\n      });\n    }\n\n    if (!material) {\n      material = {};\n      material.material = new THREE.MeshPhongMaterial({\n        color: data.color,\n        transparent: data.opacity < 1,\n        opacity: data.opacity,\n        shading: THREE.FlatShading,\n      });\n    }\n\n    this.mesh = new THREE.Mesh(geometry, material.material);\n    el.setObject3D('mesh', this.mesh);\n  },\n\n  remove: function () {\n    this.el.removeObject3D('mesh');\n  },\n\n  tick: function (t, dt) {\n    if (!dt) return;\n\n    const verts = this.mesh.geometry.vertices;\n    for (let v, vprops, i = 0; (v = verts[i]); i++){\n      vprops = this.waves[i];\n      v.z = vprops.z + Math.sin(vprops.ang) * vprops.amp;\n      vprops.ang += vprops.speed * dt;\n    }\n    this.mesh.geometry.verticesNeedUpdate = true;\n  }\n});\n"]},"metadata":{},"sourceType":"script"}