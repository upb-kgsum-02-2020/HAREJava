{"ast":null,"code":"const fetchScript = require('../../lib/fetch-script')();\n\nconst LOADER_SRC = 'https://cdn.jsdelivr.net/gh/mrdoob/three.js@r86/examples/js/loaders/GLTFLoader.js';\n\nconst loadLoader = function () {\n  let promise;\n  return function () {\n    promise = promise || fetchScript(LOADER_SRC);\n    return promise;\n  };\n}();\n/**\n * Legacy loader for glTF 1.0 models.\n * Asynchronously loads THREE.GLTFLoader from jsdelivr.\n */\n\n\nmodule.exports = AFRAME.registerComponent('gltf-model-legacy', {\n  schema: {\n    type: 'model'\n  },\n  init: function () {\n    this.model = null;\n    this.loader = null;\n    this.loaderPromise = loadLoader().then(() => {\n      this.loader = new THREE.GLTFLoader();\n      this.loader.setCrossOrigin('Anonymous');\n    });\n  },\n  update: function () {\n    const self = this;\n    const el = this.el;\n    const src = this.data;\n\n    if (!src) {\n      return;\n    }\n\n    this.remove();\n    this.loaderPromise.then(() => {\n      this.loader.load(src, function gltfLoaded(gltfModel) {\n        self.model = gltfModel.scene;\n        self.model.animations = gltfModel.animations;\n        el.setObject3D('mesh', self.model);\n        el.emit('model-loaded', {\n          format: 'gltf',\n          model: self.model\n        });\n      });\n    });\n  },\n  remove: function () {\n    if (!this.model) {\n      return;\n    }\n\n    this.el.removeObject3D('mesh');\n  }\n});","map":{"version":3,"sources":["E:/Universitat Paderborn/NEW/kgsum/kgsum/kgsum/src/main/resources/kgsum-visualization/node_modules/aframe-extras/src/loaders/gltf-model-legacy.js"],"names":["fetchScript","require","LOADER_SRC","loadLoader","promise","module","exports","AFRAME","registerComponent","schema","type","init","model","loader","loaderPromise","then","THREE","GLTFLoader","setCrossOrigin","update","self","el","src","data","remove","load","gltfLoaded","gltfModel","scene","animations","setObject3D","emit","format","removeObject3D"],"mappings":"AAAA,MAAMA,WAAW,GAAGC,OAAO,CAAC,wBAAD,CAAP,EAApB;;AAEA,MAAMC,UAAU,GAAG,mFAAnB;;AAEA,MAAMC,UAAU,GAAI,YAAY;AAC9B,MAAIC,OAAJ;AACA,SAAO,YAAY;AACjBA,IAAAA,OAAO,GAAGA,OAAO,IAAIJ,WAAW,CAACE,UAAD,CAAhC;AACA,WAAOE,OAAP;AACD,GAHD;AAID,CANmB,EAApB;AAQA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiBC,MAAM,CAACC,iBAAP,CAAyB,mBAAzB,EAA8C;AAC7DC,EAAAA,MAAM,EAAE;AAACC,IAAAA,IAAI,EAAE;AAAP,GADqD;AAG7DC,EAAAA,IAAI,EAAE,YAAY;AAChB,SAAKC,KAAL,GAAa,IAAb;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,aAAL,GAAqBX,UAAU,GAAGY,IAAb,CAAkB,MAAM;AAC3C,WAAKF,MAAL,GAAc,IAAIG,KAAK,CAACC,UAAV,EAAd;AACA,WAAKJ,MAAL,CAAYK,cAAZ,CAA2B,WAA3B;AACD,KAHoB,CAArB;AAID,GAV4D;AAY7DC,EAAAA,MAAM,EAAE,YAAY;AAClB,UAAMC,IAAI,GAAG,IAAb;AACA,UAAMC,EAAE,GAAG,KAAKA,EAAhB;AACA,UAAMC,GAAG,GAAG,KAAKC,IAAjB;;AAEA,QAAI,CAACD,GAAL,EAAU;AAAE;AAAS;;AAErB,SAAKE,MAAL;AAEA,SAAKV,aAAL,CAAmBC,IAAnB,CAAwB,MAAM;AAC5B,WAAKF,MAAL,CAAYY,IAAZ,CAAiBH,GAAjB,EAAsB,SAASI,UAAT,CAAqBC,SAArB,EAAgC;AACpDP,QAAAA,IAAI,CAACR,KAAL,GAAae,SAAS,CAACC,KAAvB;AACAR,QAAAA,IAAI,CAACR,KAAL,CAAWiB,UAAX,GAAwBF,SAAS,CAACE,UAAlC;AACAR,QAAAA,EAAE,CAACS,WAAH,CAAe,MAAf,EAAuBV,IAAI,CAACR,KAA5B;AACAS,QAAAA,EAAE,CAACU,IAAH,CAAQ,cAAR,EAAwB;AAACC,UAAAA,MAAM,EAAE,MAAT;AAAiBpB,UAAAA,KAAK,EAAEQ,IAAI,CAACR;AAA7B,SAAxB;AACD,OALD;AAMD,KAPD;AAQD,GA7B4D;AA+B7DY,EAAAA,MAAM,EAAE,YAAY;AAClB,QAAI,CAAC,KAAKZ,KAAV,EAAiB;AAAE;AAAS;;AAC5B,SAAKS,EAAL,CAAQY,cAAR,CAAuB,MAAvB;AACD;AAlC4D,CAA9C,CAAjB","sourcesContent":["const fetchScript = require('../../lib/fetch-script')();\n\nconst LOADER_SRC = 'https://cdn.jsdelivr.net/gh/mrdoob/three.js@r86/examples/js/loaders/GLTFLoader.js';\n\nconst loadLoader = (function () {\n  let promise;\n  return function () {\n    promise = promise || fetchScript(LOADER_SRC);\n    return promise;\n  };\n}());\n\n/**\n * Legacy loader for glTF 1.0 models.\n * Asynchronously loads THREE.GLTFLoader from jsdelivr.\n */\nmodule.exports = AFRAME.registerComponent('gltf-model-legacy', {\n  schema: {type: 'model'},\n\n  init: function () {\n    this.model = null;\n    this.loader = null;\n    this.loaderPromise = loadLoader().then(() => {\n      this.loader = new THREE.GLTFLoader();\n      this.loader.setCrossOrigin('Anonymous');\n    });\n  },\n\n  update: function () {\n    const self = this;\n    const el = this.el;\n    const src = this.data;\n\n    if (!src) { return; }\n\n    this.remove();\n\n    this.loaderPromise.then(() => {\n      this.loader.load(src, function gltfLoaded (gltfModel) {\n        self.model = gltfModel.scene;\n        self.model.animations = gltfModel.animations;\n        el.setObject3D('mesh', self.model);\n        el.emit('model-loaded', {format: 'gltf', model: self.model});\n      });\n    });\n  },\n\n  remove: function () {\n    if (!this.model) { return; }\n    this.el.removeObject3D('mesh');\n  }\n});\n"]},"metadata":{},"sourceType":"script"}