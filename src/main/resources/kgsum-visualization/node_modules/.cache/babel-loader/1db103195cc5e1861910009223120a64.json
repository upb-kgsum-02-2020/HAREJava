{"ast":null,"code":"/**\n * Movement Controls\n *\n * @author Don McCurdy <dm@donmccurdy.com>\n */\nconst COMPONENT_SUFFIX = '-controls',\n      MAX_DELTA = 0.2,\n      // ms\nEPS = 10e-6;\nmodule.exports = AFRAME.registerComponent('movement-controls', {\n  /*******************************************************************\n   * Schema\n   */\n  dependencies: ['rotation'],\n  schema: {\n    enabled: {\n      default: true\n    },\n    controls: {\n      default: ['gamepad', 'trackpad', 'keyboard', 'touch']\n    },\n    speed: {\n      default: 0.3,\n      min: 0\n    },\n    fly: {\n      default: false\n    },\n    constrainToNavMesh: {\n      default: false\n    },\n    camera: {\n      default: '[movement-controls] [camera]',\n      type: 'selector'\n    }\n  },\n\n  /*******************************************************************\n   * Lifecycle\n   */\n  init: function () {\n    const el = this.el;\n    this.velocityCtrl = null;\n    this.velocity = new THREE.Vector3();\n    this.heading = new THREE.Quaternion(); // Navigation\n\n    this.navGroup = null;\n    this.navNode = null;\n\n    if (el.sceneEl.hasLoaded) {\n      this.injectControls();\n    } else {\n      el.sceneEl.addEventListener('loaded', this.injectControls.bind(this));\n    }\n  },\n  update: function (prevData) {\n    const el = this.el;\n    const data = this.data;\n    const nav = el.sceneEl.systems.nav;\n\n    if (el.sceneEl.hasLoaded) {\n      this.injectControls();\n    }\n\n    if (nav && data.constrainToNavMesh !== prevData.constrainToNavMesh) {\n      data.constrainToNavMesh ? nav.addAgent(this) : nav.removeAgent(this);\n    }\n  },\n  injectControls: function () {\n    const data = this.data;\n    var name;\n\n    for (let i = 0; i < data.controls.length; i++) {\n      name = data.controls[i] + COMPONENT_SUFFIX;\n\n      if (!this.el.components[name]) {\n        this.el.setAttribute(name, '');\n      }\n    }\n  },\n  updateNavLocation: function () {\n    this.navGroup = null;\n    this.navNode = null;\n  },\n\n  /*******************************************************************\n   * Tick\n   */\n  tick: function () {\n    const start = new THREE.Vector3();\n    const end = new THREE.Vector3();\n    const clampedEnd = new THREE.Vector3();\n    return function (t, dt) {\n      if (!dt) return;\n      const el = this.el;\n      const data = this.data;\n      if (!data.enabled) return;\n      this.updateVelocityCtrl();\n      const velocityCtrl = this.velocityCtrl;\n      const velocity = this.velocity;\n      if (!velocityCtrl) return; // Update velocity. If FPS is too low, reset.\n\n      if (dt / 1000 > MAX_DELTA) {\n        velocity.set(0, 0, 0);\n      } else {\n        this.updateVelocity(dt);\n      }\n\n      if (data.constrainToNavMesh && velocityCtrl.isNavMeshConstrained !== false) {\n        if (velocity.lengthSq() < EPS) return;\n        start.copy(el.object3D.position);\n        end.copy(velocity).multiplyScalar(dt / 1000).add(start);\n        const nav = el.sceneEl.systems.nav;\n        this.navGroup = this.navGroup === null ? nav.getGroup(start) : this.navGroup;\n        this.navNode = this.navNode || nav.getNode(start, this.navGroup);\n        this.navNode = nav.clampStep(start, end, this.navGroup, this.navNode, clampedEnd);\n        el.object3D.position.copy(clampedEnd);\n      } else if (el.hasAttribute('velocity')) {\n        el.setAttribute('velocity', velocity);\n      } else {\n        el.object3D.position.x += velocity.x * dt / 1000;\n        el.object3D.position.y += velocity.y * dt / 1000;\n        el.object3D.position.z += velocity.z * dt / 1000;\n      }\n    };\n  }(),\n\n  /*******************************************************************\n   * Movement\n   */\n  updateVelocityCtrl: function () {\n    const data = this.data;\n\n    if (data.enabled) {\n      for (let i = 0, l = data.controls.length; i < l; i++) {\n        const control = this.el.components[data.controls[i] + COMPONENT_SUFFIX];\n\n        if (control && control.isVelocityActive()) {\n          this.velocityCtrl = control;\n          return;\n        }\n      }\n\n      this.velocityCtrl = null;\n    }\n  },\n  updateVelocity: function () {\n    const vector2 = new THREE.Vector2();\n    const quaternion = new THREE.Quaternion();\n    return function (dt) {\n      let dVelocity;\n      const el = this.el;\n      const control = this.velocityCtrl;\n      const velocity = this.velocity;\n      const data = this.data;\n\n      if (control) {\n        if (control.getVelocityDelta) {\n          dVelocity = control.getVelocityDelta(dt);\n        } else if (control.getVelocity) {\n          velocity.copy(control.getVelocity());\n          return;\n        } else if (control.getPositionDelta) {\n          velocity.copy(control.getPositionDelta(dt).multiplyScalar(1000 / dt));\n          return;\n        } else {\n          throw new Error('Incompatible movement controls: ', control);\n        }\n      }\n\n      if (el.hasAttribute('velocity') && !data.constrainToNavMesh) {\n        velocity.copy(this.el.getAttribute('velocity'));\n      }\n\n      if (dVelocity && data.enabled) {\n        const cameraEl = data.camera; // Rotate to heading\n\n        quaternion.copy(cameraEl.object3D.quaternion);\n        quaternion.premultiply(el.object3D.quaternion);\n        dVelocity.applyQuaternion(quaternion);\n        const factor = dVelocity.length();\n\n        if (data.fly) {\n          velocity.copy(dVelocity);\n          velocity.multiplyScalar(this.data.speed * 16.66667);\n        } else {\n          vector2.set(dVelocity.x, dVelocity.z);\n          vector2.setLength(factor * this.data.speed * 16.66667);\n          velocity.x = vector2.x;\n          velocity.z = vector2.y;\n        }\n      }\n    };\n  }()\n});","map":{"version":3,"sources":["E:/Universitat Paderborn/NEW/kgsum/kgsum-visualization/node_modules/aframe-extras/src/controls/movement-controls.js"],"names":["COMPONENT_SUFFIX","MAX_DELTA","EPS","module","exports","AFRAME","registerComponent","dependencies","schema","enabled","default","controls","speed","min","fly","constrainToNavMesh","camera","type","init","el","velocityCtrl","velocity","THREE","Vector3","heading","Quaternion","navGroup","navNode","sceneEl","hasLoaded","injectControls","addEventListener","bind","update","prevData","data","nav","systems","addAgent","removeAgent","name","i","length","components","setAttribute","updateNavLocation","tick","start","end","clampedEnd","t","dt","updateVelocityCtrl","set","updateVelocity","isNavMeshConstrained","lengthSq","copy","object3D","position","multiplyScalar","add","getGroup","getNode","clampStep","hasAttribute","x","y","z","l","control","isVelocityActive","vector2","Vector2","quaternion","dVelocity","getVelocityDelta","getVelocity","getPositionDelta","Error","getAttribute","cameraEl","premultiply","applyQuaternion","factor","setLength"],"mappings":"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","sourcesContent":["/**\n * Movement Controls\n *\n * @author Don McCurdy <dm@donmccurdy.com>\n */\n\nconst COMPONENT_SUFFIX = '-controls',\n    MAX_DELTA = 0.2, // ms\n    EPS = 10e-6;\n\nmodule.exports = AFRAME.registerComponent('movement-controls', {\n\n  /*******************************************************************\n   * Schema\n   */\n\n  dependencies: ['rotation'],\n\n  schema: {\n    enabled:            { default: true },\n    controls:           { default: ['gamepad', 'trackpad', 'keyboard', 'touch'] },\n    speed:              { default: 0.3, min: 0 },\n    fly:                { default: false },\n    constrainToNavMesh: { default: false },\n    camera:             { default: '[movement-controls] [camera]', type: 'selector' }\n  },\n\n  /*******************************************************************\n   * Lifecycle\n   */\n\n  init: function () {\n    const el = this.el;\n\n    this.velocityCtrl = null;\n\n    this.velocity = new THREE.Vector3();\n    this.heading = new THREE.Quaternion();\n\n    // Navigation\n    this.navGroup = null;\n    this.navNode = null;\n\n    if (el.sceneEl.hasLoaded) {\n      this.injectControls();\n    } else {\n      el.sceneEl.addEventListener('loaded', this.injectControls.bind(this));\n    }\n  },\n\n  update: function (prevData) {\n    const el = this.el;\n    const data = this.data;\n    const nav = el.sceneEl.systems.nav;\n    if (el.sceneEl.hasLoaded) {\n      this.injectControls();\n    }\n    if (nav && data.constrainToNavMesh !== prevData.constrainToNavMesh) {\n      data.constrainToNavMesh\n        ? nav.addAgent(this)\n        : nav.removeAgent(this);\n    }\n  },\n\n  injectControls: function () {\n    const data = this.data;\n    var name;\n\n    for (let i = 0; i < data.controls.length; i++) {\n      name = data.controls[i] + COMPONENT_SUFFIX;\n      if (!this.el.components[name]) {\n        this.el.setAttribute(name, '');\n      }\n    }\n  },\n\n  updateNavLocation: function () {\n    this.navGroup = null;\n    this.navNode = null;\n  },\n\n  /*******************************************************************\n   * Tick\n   */\n\n  tick: (function () {\n    const start = new THREE.Vector3();\n    const end = new THREE.Vector3();\n    const clampedEnd = new THREE.Vector3();\n\n    return function (t, dt) {\n      if (!dt) return;\n\n      const el = this.el;\n      const data = this.data;\n\n      if (!data.enabled) return;\n\n      this.updateVelocityCtrl();\n      const velocityCtrl = this.velocityCtrl;\n      const velocity = this.velocity;\n\n      if (!velocityCtrl) return;\n\n      // Update velocity. If FPS is too low, reset.\n      if (dt / 1000 > MAX_DELTA) {\n        velocity.set(0, 0, 0);\n      } else {\n        this.updateVelocity(dt);\n      }\n\n      if (data.constrainToNavMesh\n          && velocityCtrl.isNavMeshConstrained !== false) {\n\n        if (velocity.lengthSq() < EPS) return;\n\n        start.copy(el.object3D.position);\n        end\n          .copy(velocity)\n          .multiplyScalar(dt / 1000)\n          .add(start);\n\n        const nav = el.sceneEl.systems.nav;\n        this.navGroup = this.navGroup === null ? nav.getGroup(start) : this.navGroup;\n        this.navNode = this.navNode || nav.getNode(start, this.navGroup);\n        this.navNode = nav.clampStep(start, end, this.navGroup, this.navNode, clampedEnd);\n        el.object3D.position.copy(clampedEnd);\n      } else if (el.hasAttribute('velocity')) {\n        el.setAttribute('velocity', velocity);\n      } else {\n        el.object3D.position.x += velocity.x * dt / 1000;\n        el.object3D.position.y += velocity.y * dt / 1000;\n        el.object3D.position.z += velocity.z * dt / 1000;\n      }\n\n    };\n  }()),\n\n  /*******************************************************************\n   * Movement\n   */\n\n  updateVelocityCtrl: function () {\n    const data = this.data;\n    if (data.enabled) {\n      for (let i = 0, l = data.controls.length; i < l; i++) {\n        const control = this.el.components[data.controls[i] + COMPONENT_SUFFIX];\n        if (control && control.isVelocityActive()) {\n          this.velocityCtrl = control;\n          return;\n        }\n      }\n      this.velocityCtrl = null;\n    }\n  },\n\n  updateVelocity: (function () {\n    const vector2 = new THREE.Vector2();\n    const quaternion = new THREE.Quaternion();\n\n    return function (dt) {\n      let dVelocity;\n      const el = this.el;\n      const control = this.velocityCtrl;\n      const velocity = this.velocity;\n      const data = this.data;\n\n      if (control) {\n        if (control.getVelocityDelta) {\n          dVelocity = control.getVelocityDelta(dt);\n        } else if (control.getVelocity) {\n          velocity.copy(control.getVelocity());\n          return;\n        } else if (control.getPositionDelta) {\n          velocity.copy(control.getPositionDelta(dt).multiplyScalar(1000 / dt));\n          return;\n        } else {\n          throw new Error('Incompatible movement controls: ', control);\n        }\n      }\n\n      if (el.hasAttribute('velocity') && !data.constrainToNavMesh) {\n        velocity.copy(this.el.getAttribute('velocity'));\n      }\n\n      if (dVelocity && data.enabled) {\n        const cameraEl = data.camera;\n\n        // Rotate to heading\n        quaternion.copy(cameraEl.object3D.quaternion);\n        quaternion.premultiply(el.object3D.quaternion);\n        dVelocity.applyQuaternion(quaternion);\n\n        const factor = dVelocity.length();\n        if (data.fly) {\n          velocity.copy(dVelocity);\n          velocity.multiplyScalar(this.data.speed * 16.66667);\n        } else {\n          vector2.set(dVelocity.x, dVelocity.z);\n          vector2.setLength(factor * this.data.speed * 16.66667);\n          velocity.x = vector2.x;\n          velocity.z = vector2.y;\n        }\n      }\n    };\n\n  }())\n});\n"]},"metadata":{},"sourceType":"script"}