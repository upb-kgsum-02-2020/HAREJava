{"ast":null,"code":"/**\n * Gamepad controls for A-Frame.\n *\n * Stripped-down version of: https://github.com/donmccurdy/aframe-gamepad-controls\n *\n * For more information about the Gamepad API, see:\n * https://developer.mozilla.org/en-US/docs/Web/API/Gamepad_API/Using_the_Gamepad_API\n */\nconst GamepadButton = require('../../lib/GamepadButton'),\n      GamepadButtonEvent = require('../../lib/GamepadButtonEvent');\n\nconst JOYSTICK_EPS = 0.2;\nconst Hand = {\n  LEFT: 'left',\n  RIGHT: 'right'\n};\nconst Joystick = {\n  MOVEMENT: 1,\n  ROTATION: 2\n};\nmodule.exports = AFRAME.registerComponent('gamepad-controls', {\n  /*******************************************************************\n   * Statics\n   */\n  GamepadButton: GamepadButton,\n\n  /*******************************************************************\n   * Schema\n   */\n  schema: {\n    // Enable/disable gamepad-controls\n    enabled: {\n      default: true\n    },\n    // Heading element for rotation\n    camera: {\n      default: '[camera]',\n      type: 'selector'\n    },\n    // Rotation sensitivity\n    rotationSensitivity: {\n      default: 2.0\n    }\n  },\n\n  /*******************************************************************\n   * Core\n   */\n\n  /**\n   * Called once when component is attached. Generally for initial setup.\n   */\n  init: function () {\n    const sceneEl = this.el.sceneEl;\n    this.system = sceneEl.systems['tracked-controls-webxr'] || {\n      controllers: []\n    };\n    this.prevTime = window.performance.now(); // Button state\n\n    this.buttons = {}; // Rotation\n\n    const rotation = this.el.object3D.rotation;\n    this.pitch = new THREE.Object3D();\n    this.pitch.rotation.x = THREE.Math.degToRad(rotation.x);\n    this.yaw = new THREE.Object3D();\n    this.yaw.position.y = 10;\n    this.yaw.rotation.y = THREE.Math.degToRad(rotation.y);\n    this.yaw.add(this.pitch);\n    this._lookVector = new THREE.Vector2();\n    this._moveVector = new THREE.Vector2();\n    this._dpadVector = new THREE.Vector2();\n    sceneEl.addBehavior(this);\n  },\n\n  /**\n   * Called when component is attached and when component data changes.\n   * Generally modifies the entity based on the data.\n   */\n  update: function () {\n    this.tick();\n  },\n\n  /**\n   * Called on each iteration of main render loop.\n   */\n  tick: function (t, dt) {\n    this.updateButtonState();\n    this.updateRotation(dt);\n  },\n\n  /**\n   * Called when a component is removed (e.g., via removeAttribute).\n   * Generally undoes all modifications to the entity.\n   */\n  remove: function () {},\n\n  /*******************************************************************\n   * Movement\n   */\n  isVelocityActive: function () {\n    if (!this.data.enabled || !this.isConnected()) return false;\n    const dpad = this._dpadVector;\n    const joystick = this._moveVector;\n    this.getDpad(dpad);\n    this.getJoystick(Joystick.MOVEMENT, joystick);\n    const inputX = dpad.x || joystick.x;\n    const inputY = dpad.y || joystick.y;\n    return Math.abs(inputX) > JOYSTICK_EPS || Math.abs(inputY) > JOYSTICK_EPS;\n  },\n  getVelocityDelta: function () {\n    const dpad = this._dpadVector;\n    const joystick = this._moveVector;\n    this.getDpad(dpad);\n    this.getJoystick(Joystick.MOVEMENT, joystick);\n    const inputX = dpad.x || joystick.x;\n    const inputY = dpad.y || joystick.y;\n    const dVelocity = new THREE.Vector3();\n\n    if (Math.abs(inputX) > JOYSTICK_EPS) {\n      dVelocity.x += inputX;\n    }\n\n    if (Math.abs(inputY) > JOYSTICK_EPS) {\n      dVelocity.z += inputY;\n    }\n\n    return dVelocity;\n  },\n\n  /*******************************************************************\n   * Rotation\n   */\n  isRotationActive: function () {\n    if (!this.data.enabled || !this.isConnected()) return false;\n    const joystick = this._lookVector;\n    this.getJoystick(Joystick.ROTATION, joystick);\n    return Math.abs(joystick.x) > JOYSTICK_EPS || Math.abs(joystick.y) > JOYSTICK_EPS;\n  },\n  updateRotation: function (dt) {\n    if (!this.isRotationActive()) return;\n    const data = this.data;\n    const yaw = this.yaw;\n    const pitch = this.pitch;\n    const lookControls = data.camera.components['look-controls'];\n    const hasLookControls = lookControls && lookControls.pitchObject && lookControls.yawObject; // Sync with look-controls pitch/yaw if available.\n\n    if (hasLookControls) {\n      pitch.rotation.copy(lookControls.pitchObject.rotation);\n      yaw.rotation.copy(lookControls.yawObject.rotation);\n    }\n\n    const lookVector = this._lookVector;\n    this.getJoystick(Joystick.ROTATION, lookVector);\n    if (Math.abs(lookVector.x) <= JOYSTICK_EPS) lookVector.x = 0;\n    if (Math.abs(lookVector.y) <= JOYSTICK_EPS) lookVector.y = 0;\n    lookVector.multiplyScalar(data.rotationSensitivity * dt / 1000);\n    yaw.rotation.y -= lookVector.x;\n    pitch.rotation.x -= lookVector.y;\n    pitch.rotation.x = Math.max(-Math.PI / 2, Math.min(Math.PI / 2, pitch.rotation.x));\n    data.camera.object3D.rotation.set(pitch.rotation.x, yaw.rotation.y, 0); // Sync with look-controls pitch/yaw if available.\n\n    if (hasLookControls) {\n      lookControls.pitchObject.rotation.copy(pitch.rotation);\n      lookControls.yawObject.rotation.copy(yaw.rotation);\n    }\n  },\n\n  /*******************************************************************\n   * Button events\n   */\n  updateButtonState: function () {\n    const gamepad = this.getGamepad(Hand.RIGHT);\n\n    if (this.data.enabled && gamepad) {\n      // Fire DOM events for button state changes.\n      for (var i = 0; i < gamepad.buttons.length; i++) {\n        if (gamepad.buttons[i].pressed && !this.buttons[i]) {\n          this.emit(new GamepadButtonEvent('gamepadbuttondown', i, gamepad.buttons[i]));\n        } else if (!gamepad.buttons[i].pressed && this.buttons[i]) {\n          this.emit(new GamepadButtonEvent('gamepadbuttonup', i, gamepad.buttons[i]));\n        }\n\n        this.buttons[i] = gamepad.buttons[i].pressed;\n      }\n    } else if (Object.keys(this.buttons)) {\n      // Reset state if controls are disabled or controller is lost.\n      this.buttons = {};\n    }\n  },\n  emit: function (event) {\n    // Emit original event.\n    this.el.emit(event.type, event); // Emit convenience event, identifying button index.\n\n    this.el.emit(event.type + ':' + event.index, new GamepadButtonEvent(event.type, event.index, event));\n  },\n\n  /*******************************************************************\n   * Gamepad state\n   */\n\n  /**\n   * Returns the Gamepad instance attached to the component. If connected,\n   * a proxy-controls component may provide access to Gamepad input from a\n   * remote device.\n   *\n   * @param {string} handPreference\n   * @return {Gamepad}\n   */\n  getGamepad: function () {\n    const _xrGamepads = [];\n    const _empty = [];\n    return function (handPreference) {\n      // https://github.com/donmccurdy/aframe-proxy-controls\n      const proxyControls = this.el.sceneEl.components['proxy-controls'];\n      const proxyGamepad = proxyControls && proxyControls.isConnected() && proxyControls.getGamepad(0);\n      if (proxyGamepad) return proxyGamepad; // https://www.w3.org/TR/webxr/#dom-xrinputsource-handedness\n\n      _xrGamepads.length = 0;\n\n      for (let i = 0; i < this.system.controllers.length; i++) {\n        const xrController = this.system.controllers[i];\n        const xrGamepad = xrController ? xrController.gamepad : null;\n\n        _xrGamepads.push(xrGamepad);\n\n        if (xrGamepad && xrGamepad.handedness === handPreference) return xrGamepad;\n      } // https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/hand\n\n\n      const navGamepads = navigator.getGamepads ? navigator.getGamepads() : _empty;\n\n      for (let i = 0; i < navGamepads.length; i++) {\n        const navGamepad = navGamepads[i];\n        if (navGamepad && navGamepad.hand === handPreference) return navGamepad;\n      }\n\n      return _xrGamepads[0] || navGamepads[0];\n    };\n  }(),\n\n  /**\n   * Returns the state of the given button.\n   * @param  {number} index The button (0-N) for which to find state.\n   * @return {GamepadButton}\n   */\n  getButton: function (index) {\n    return this.getGamepad(Hand.RIGHT).buttons[index];\n  },\n\n  /**\n   * Returns state of the given axis. Axes are labelled 0-N, where 0-1 will\n   * represent X/Y on the first joystick, and 2-3 X/Y on the second.\n   * @param  {number} index The axis (0-N) for which to find state.\n   * @return {number} On the interval [-1,1].\n   */\n  getAxis: function (index) {\n    return this.getGamepad(index > 1 ? Hand.RIGHT : Hand.LEFT).axes[index];\n  },\n\n  /**\n   * Returns the state of the specified joystick as a THREE.Vector2.\n   * @param  {Joystick} role\n   * @param  {THREE.Vector2} target\n   * @return {THREE.Vector2}\n   */\n  getJoystick: function (index, target) {\n    const gamepad = this.getGamepad(index === Joystick.MOVEMENT ? Hand.LEFT : Hand.RIGHT);\n\n    if (gamepad.mapping === 'xr-standard') {\n      // See: https://github.com/donmccurdy/aframe-extras/issues/307\n      switch (index) {\n        case Joystick.MOVEMENT:\n          return target.set(gamepad.axes[2], gamepad.axes[3]);\n\n        case Joystick.ROTATION:\n          return target.set(gamepad.axes[0], gamepad.axes[1]);\n      }\n    } else {\n      switch (index) {\n        case Joystick.MOVEMENT:\n          return target.set(gamepad.axes[0], gamepad.axes[1]);\n\n        case Joystick.ROTATION:\n          return target.set(gamepad.axes[2], gamepad.axes[3]);\n      }\n    }\n\n    throw new Error('Unexpected joystick index \"%d\".', index);\n  },\n\n  /**\n   * Returns the state of the dpad as a THREE.Vector2.\n   * @param {THREE.Vector2} target\n   * @return {THREE.Vector2}\n   */\n  getDpad: function (target) {\n    const gamepad = this.getGamepad(Hand.LEFT);\n\n    if (!gamepad.buttons[GamepadButton.DPAD_RIGHT]) {\n      return target.set(0, 0);\n    }\n\n    return target.set((gamepad.buttons[GamepadButton.DPAD_RIGHT].pressed ? 1 : 0) + (gamepad.buttons[GamepadButton.DPAD_LEFT].pressed ? -1 : 0), (gamepad.buttons[GamepadButton.DPAD_UP].pressed ? -1 : 0) + (gamepad.buttons[GamepadButton.DPAD_DOWN].pressed ? 1 : 0));\n  },\n\n  /**\n   * Returns true if the gamepad is currently connected to the system.\n   * @return {boolean}\n   */\n  isConnected: function () {\n    const gamepad = this.getGamepad(Hand.LEFT);\n    return !!(gamepad && gamepad.connected);\n  },\n\n  /**\n   * Returns a string containing some information about the controller. Result\n   * may vary across browsers, for a given controller.\n   * @return {string}\n   */\n  getID: function () {\n    return this.getGamepad(Hand.LEFT).id;\n  }\n});","map":{"version":3,"sources":["E:/Universitat Paderborn/NEW/kgsum/kgsum-visualization/node_modules/aframe-extras/src/controls/gamepad-controls.js"],"names":["GamepadButton","require","GamepadButtonEvent","JOYSTICK_EPS","Hand","LEFT","RIGHT","Joystick","MOVEMENT","ROTATION","module","exports","AFRAME","registerComponent","schema","enabled","default","camera","type","rotationSensitivity","init","sceneEl","el","system","systems","controllers","prevTime","window","performance","now","buttons","rotation","object3D","pitch","THREE","Object3D","x","Math","degToRad","yaw","position","y","add","_lookVector","Vector2","_moveVector","_dpadVector","addBehavior","update","tick","t","dt","updateButtonState","updateRotation","remove","isVelocityActive","data","isConnected","dpad","joystick","getDpad","getJoystick","inputX","inputY","abs","getVelocityDelta","dVelocity","Vector3","z","isRotationActive","lookControls","components","hasLookControls","pitchObject","yawObject","copy","lookVector","multiplyScalar","max","PI","min","set","gamepad","getGamepad","i","length","pressed","emit","Object","keys","event","index","_xrGamepads","_empty","handPreference","proxyControls","proxyGamepad","xrController","xrGamepad","push","handedness","navGamepads","navigator","getGamepads","navGamepad","hand","getButton","getAxis","axes","target","mapping","Error","DPAD_RIGHT","DPAD_LEFT","DPAD_UP","DPAD_DOWN","connected","getID","id"],"mappings":"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","sourcesContent":["/**\n * Gamepad controls for A-Frame.\n *\n * Stripped-down version of: https://github.com/donmccurdy/aframe-gamepad-controls\n *\n * For more information about the Gamepad API, see:\n * https://developer.mozilla.org/en-US/docs/Web/API/Gamepad_API/Using_the_Gamepad_API\n */\n\nconst GamepadButton = require('../../lib/GamepadButton'),\n    GamepadButtonEvent = require('../../lib/GamepadButtonEvent');\n\nconst JOYSTICK_EPS = 0.2;\n\nconst Hand = {\n  LEFT: 'left',\n  RIGHT: 'right'\n};\n\nconst Joystick = {\n  MOVEMENT: 1,\n  ROTATION: 2\n};\n\nmodule.exports = AFRAME.registerComponent('gamepad-controls', {\n\n  /*******************************************************************\n   * Statics\n   */\n\n  GamepadButton: GamepadButton,\n\n  /*******************************************************************\n   * Schema\n   */\n\n  schema: {\n    // Enable/disable gamepad-controls\n    enabled: { default: true },\n\n    // Heading element for rotation\n    camera: { default: '[camera]', type: 'selector' },\n\n    // Rotation sensitivity\n    rotationSensitivity: { default: 2.0 },\n  },\n\n  /*******************************************************************\n   * Core\n   */\n\n  /**\n   * Called once when component is attached. Generally for initial setup.\n   */\n  init: function () {\n    const sceneEl = this.el.sceneEl;\n\n    this.system = sceneEl.systems['tracked-controls-webxr'] || {controllers: []};\n\n    this.prevTime = window.performance.now();\n\n    // Button state\n    this.buttons = {};\n\n    // Rotation\n    const rotation = this.el.object3D.rotation;\n    this.pitch = new THREE.Object3D();\n    this.pitch.rotation.x = THREE.Math.degToRad(rotation.x);\n    this.yaw = new THREE.Object3D();\n    this.yaw.position.y = 10;\n    this.yaw.rotation.y = THREE.Math.degToRad(rotation.y);\n    this.yaw.add(this.pitch);\n\n    this._lookVector = new THREE.Vector2();\n    this._moveVector = new THREE.Vector2();\n    this._dpadVector = new THREE.Vector2();\n\n    sceneEl.addBehavior(this);\n  },\n\n  /**\n   * Called when component is attached and when component data changes.\n   * Generally modifies the entity based on the data.\n   */\n  update: function () { this.tick(); },\n\n  /**\n   * Called on each iteration of main render loop.\n   */\n  tick: function (t, dt) {\n    this.updateButtonState();\n    this.updateRotation(dt);\n  },\n\n  /**\n   * Called when a component is removed (e.g., via removeAttribute).\n   * Generally undoes all modifications to the entity.\n   */\n  remove: function () { },\n\n  /*******************************************************************\n   * Movement\n   */\n\n  isVelocityActive: function () {\n    if (!this.data.enabled || !this.isConnected()) return false;\n\n    const dpad = this._dpadVector;\n    const joystick = this._moveVector;\n\n    this.getDpad(dpad);\n    this.getJoystick(Joystick.MOVEMENT, joystick);\n\n    const inputX = dpad.x || joystick.x;\n    const inputY = dpad.y || joystick.y;\n\n    return Math.abs(inputX) > JOYSTICK_EPS || Math.abs(inputY) > JOYSTICK_EPS;\n  },\n\n  getVelocityDelta: function () {\n    const dpad = this._dpadVector;\n    const joystick = this._moveVector;\n\n    this.getDpad(dpad);\n    this.getJoystick(Joystick.MOVEMENT, joystick);\n\n    const inputX = dpad.x || joystick.x;\n    const inputY = dpad.y || joystick.y;\n    const dVelocity = new THREE.Vector3();\n\n    if (Math.abs(inputX) > JOYSTICK_EPS) {\n      dVelocity.x += inputX;\n    }\n    if (Math.abs(inputY) > JOYSTICK_EPS) {\n      dVelocity.z += inputY;\n    }\n\n    return dVelocity;\n  },\n\n  /*******************************************************************\n   * Rotation\n   */\n\n  isRotationActive: function () {\n    if (!this.data.enabled || !this.isConnected()) return false;\n\n    const joystick = this._lookVector;\n\n    this.getJoystick(Joystick.ROTATION, joystick);\n\n    return Math.abs(joystick.x) > JOYSTICK_EPS || Math.abs(joystick.y) > JOYSTICK_EPS;\n  },\n\n  updateRotation: function (dt) {\n    if (!this.isRotationActive()) return;\n\n    const data = this.data;\n    const yaw = this.yaw;\n    const pitch = this.pitch;\n    const lookControls = data.camera.components['look-controls'];\n    const hasLookControls = lookControls && lookControls.pitchObject && lookControls.yawObject;\n\n    // Sync with look-controls pitch/yaw if available.\n    if (hasLookControls) {\n      pitch.rotation.copy(lookControls.pitchObject.rotation);\n      yaw.rotation.copy(lookControls.yawObject.rotation);\n    }\n\n    const lookVector = this._lookVector;\n\n    this.getJoystick(Joystick.ROTATION, lookVector);\n\n    if (Math.abs(lookVector.x) <= JOYSTICK_EPS) lookVector.x = 0;\n    if (Math.abs(lookVector.y) <= JOYSTICK_EPS) lookVector.y = 0;\n\n    lookVector.multiplyScalar(data.rotationSensitivity * dt / 1000);\n    yaw.rotation.y -= lookVector.x;\n    pitch.rotation.x -= lookVector.y;\n    pitch.rotation.x = Math.max(- Math.PI / 2, Math.min(Math.PI / 2, pitch.rotation.x));\n    data.camera.object3D.rotation.set(pitch.rotation.x, yaw.rotation.y, 0);\n\n    // Sync with look-controls pitch/yaw if available.\n    if (hasLookControls) {\n      lookControls.pitchObject.rotation.copy(pitch.rotation);\n      lookControls.yawObject.rotation.copy(yaw.rotation);\n    }\n  },\n\n  /*******************************************************************\n   * Button events\n   */\n\n  updateButtonState: function () {\n    const gamepad = this.getGamepad(Hand.RIGHT);\n    if (this.data.enabled && gamepad) {\n\n      // Fire DOM events for button state changes.\n      for (var i = 0; i < gamepad.buttons.length; i++) {\n        if (gamepad.buttons[i].pressed && !this.buttons[i]) {\n          this.emit(new GamepadButtonEvent('gamepadbuttondown', i, gamepad.buttons[i]));\n        } else if (!gamepad.buttons[i].pressed && this.buttons[i]) {\n          this.emit(new GamepadButtonEvent('gamepadbuttonup', i, gamepad.buttons[i]));\n        }\n        this.buttons[i] = gamepad.buttons[i].pressed;\n      }\n\n    } else if (Object.keys(this.buttons)) {\n      // Reset state if controls are disabled or controller is lost.\n      this.buttons = {};\n    }\n  },\n\n  emit: function (event) {\n    // Emit original event.\n    this.el.emit(event.type, event);\n\n    // Emit convenience event, identifying button index.\n    this.el.emit(\n      event.type + ':' + event.index,\n      new GamepadButtonEvent(event.type, event.index, event)\n    );\n  },\n\n  /*******************************************************************\n   * Gamepad state\n   */\n\n  /**\n   * Returns the Gamepad instance attached to the component. If connected,\n   * a proxy-controls component may provide access to Gamepad input from a\n   * remote device.\n   *\n   * @param {string} handPreference\n   * @return {Gamepad}\n   */\n  getGamepad: (function () {\n    const _xrGamepads = [];\n    const _empty = [];\n\n    return function (handPreference) {\n      // https://github.com/donmccurdy/aframe-proxy-controls\n      const proxyControls = this.el.sceneEl.components['proxy-controls'];\n      const proxyGamepad = proxyControls && proxyControls.isConnected()\n        && proxyControls.getGamepad(0);\n      if (proxyGamepad) return proxyGamepad;\n\n      // https://www.w3.org/TR/webxr/#dom-xrinputsource-handedness\n      _xrGamepads.length = 0;\n      for (let i = 0; i < this.system.controllers.length; i++) {\n        const xrController = this.system.controllers[i];\n        const xrGamepad = xrController ? xrController.gamepad : null;\n        _xrGamepads.push(xrGamepad);\n        if (xrGamepad && xrGamepad.handedness === handPreference) return xrGamepad;\n      }\n\n      // https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/hand\n      const navGamepads = navigator.getGamepads ? navigator.getGamepads() : _empty;\n      for (let i = 0; i < navGamepads.length; i++) {\n        const navGamepad = navGamepads[i];\n        if (navGamepad && navGamepad.hand === handPreference) return navGamepad;\n      }\n\n      return _xrGamepads[0] || navGamepads[0];\n    };\n  })(),\n\n  /**\n   * Returns the state of the given button.\n   * @param  {number} index The button (0-N) for which to find state.\n   * @return {GamepadButton}\n   */\n  getButton: function (index) {\n    return this.getGamepad(Hand.RIGHT).buttons[index];\n  },\n\n  /**\n   * Returns state of the given axis. Axes are labelled 0-N, where 0-1 will\n   * represent X/Y on the first joystick, and 2-3 X/Y on the second.\n   * @param  {number} index The axis (0-N) for which to find state.\n   * @return {number} On the interval [-1,1].\n   */\n  getAxis: function (index) {\n    return this.getGamepad(index > 1 ? Hand.RIGHT : Hand.LEFT).axes[index];\n  },\n\n  /**\n   * Returns the state of the specified joystick as a THREE.Vector2.\n   * @param  {Joystick} role\n   * @param  {THREE.Vector2} target\n   * @return {THREE.Vector2}\n   */\n  getJoystick: function (index, target) {\n    const gamepad = this.getGamepad(index === Joystick.MOVEMENT ? Hand.LEFT : Hand.RIGHT);\n    if (gamepad.mapping === 'xr-standard') {\n      // See: https://github.com/donmccurdy/aframe-extras/issues/307\n      switch (index) {\n        case Joystick.MOVEMENT: return target.set(gamepad.axes[2], gamepad.axes[3]);\n        case Joystick.ROTATION: return target.set(gamepad.axes[0], gamepad.axes[1]);\n      }\n    } else {\n      switch (index) {\n        case Joystick.MOVEMENT: return target.set(gamepad.axes[0], gamepad.axes[1]);\n        case Joystick.ROTATION: return target.set(gamepad.axes[2], gamepad.axes[3]);\n      }\n    }\n    throw new Error('Unexpected joystick index \"%d\".', index);\n  },\n\n  /**\n   * Returns the state of the dpad as a THREE.Vector2.\n   * @param {THREE.Vector2} target\n   * @return {THREE.Vector2}\n   */\n  getDpad: function (target) {\n    const gamepad = this.getGamepad(Hand.LEFT);\n    if (!gamepad.buttons[GamepadButton.DPAD_RIGHT]) {\n      return target.set(0, 0);\n    }\n    return target.set(\n      (gamepad.buttons[GamepadButton.DPAD_RIGHT].pressed ? 1 : 0)\n      + (gamepad.buttons[GamepadButton.DPAD_LEFT].pressed ? -1 : 0),\n      (gamepad.buttons[GamepadButton.DPAD_UP].pressed ? -1 : 0)\n      + (gamepad.buttons[GamepadButton.DPAD_DOWN].pressed ? 1 : 0)\n    );\n  },\n\n  /**\n   * Returns true if the gamepad is currently connected to the system.\n   * @return {boolean}\n   */\n  isConnected: function () {\n    const gamepad = this.getGamepad(Hand.LEFT);\n    return !!(gamepad && gamepad.connected);\n  },\n\n  /**\n   * Returns a string containing some information about the controller. Result\n   * may vary across browsers, for a given controller.\n   * @return {string}\n   */\n  getID: function () {\n    return this.getGamepad(Hand.LEFT).id;\n  }\n});\n"]},"metadata":{},"sourceType":"script"}